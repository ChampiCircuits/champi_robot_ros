
stm_pamis_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bb0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08004d90  08004d90  00005d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ed4  08004ed4  00006074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004ed4  08004ed4  00005ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004edc  08004edc  00006074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004edc  08004edc  00005edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ee4  08004ee4  00005ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08004ee8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  20000074  08004f5c  00006074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08004f5c  00006348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010872  00000000  00000000  000060a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027df  00000000  00000000  00016916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  000190f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000964  00000000  00000000  00019d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021690  00000000  00000000  0001a6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec77  00000000  00000000  0003bd44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bcadc  00000000  00000000  0004a9bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00107497  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000395c  00000000  00000000  001074dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0010ae38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004d78 	.word	0x08004d78

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08004d78 	.word	0x08004d78

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	@ 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2iz>:
 800088c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000894:	d215      	bcs.n	80008c2 <__aeabi_d2iz+0x36>
 8000896:	d511      	bpl.n	80008bc <__aeabi_d2iz+0x30>
 8000898:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d912      	bls.n	80008c8 <__aeabi_d2iz+0x3c>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80008b2:	fa23 f002 	lsr.w	r0, r3, r2
 80008b6:	bf18      	it	ne
 80008b8:	4240      	negne	r0, r0
 80008ba:	4770      	bx	lr
 80008bc:	f04f 0000 	mov.w	r0, #0
 80008c0:	4770      	bx	lr
 80008c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008c6:	d105      	bne.n	80008d4 <__aeabi_d2iz+0x48>
 80008c8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80008cc:	bf08      	it	eq
 80008ce:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80008d2:	4770      	bx	lr
 80008d4:	f04f 0000 	mov.w	r0, #0
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <__aeabi_uldivmod>:
 80008dc:	b953      	cbnz	r3, 80008f4 <__aeabi_uldivmod+0x18>
 80008de:	b94a      	cbnz	r2, 80008f4 <__aeabi_uldivmod+0x18>
 80008e0:	2900      	cmp	r1, #0
 80008e2:	bf08      	it	eq
 80008e4:	2800      	cmpeq	r0, #0
 80008e6:	bf1c      	itt	ne
 80008e8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80008ec:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80008f0:	f000 b988 	b.w	8000c04 <__aeabi_idiv0>
 80008f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008fc:	f000 f806 	bl	800090c <__udivmoddi4>
 8000900:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000908:	b004      	add	sp, #16
 800090a:	4770      	bx	lr

0800090c <__udivmoddi4>:
 800090c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000910:	9d08      	ldr	r5, [sp, #32]
 8000912:	468e      	mov	lr, r1
 8000914:	4604      	mov	r4, r0
 8000916:	4688      	mov	r8, r1
 8000918:	2b00      	cmp	r3, #0
 800091a:	d14a      	bne.n	80009b2 <__udivmoddi4+0xa6>
 800091c:	428a      	cmp	r2, r1
 800091e:	4617      	mov	r7, r2
 8000920:	d962      	bls.n	80009e8 <__udivmoddi4+0xdc>
 8000922:	fab2 f682 	clz	r6, r2
 8000926:	b14e      	cbz	r6, 800093c <__udivmoddi4+0x30>
 8000928:	f1c6 0320 	rsb	r3, r6, #32
 800092c:	fa01 f806 	lsl.w	r8, r1, r6
 8000930:	fa20 f303 	lsr.w	r3, r0, r3
 8000934:	40b7      	lsls	r7, r6
 8000936:	ea43 0808 	orr.w	r8, r3, r8
 800093a:	40b4      	lsls	r4, r6
 800093c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000940:	fa1f fc87 	uxth.w	ip, r7
 8000944:	fbb8 f1fe 	udiv	r1, r8, lr
 8000948:	0c23      	lsrs	r3, r4, #16
 800094a:	fb0e 8811 	mls	r8, lr, r1, r8
 800094e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000952:	fb01 f20c 	mul.w	r2, r1, ip
 8000956:	429a      	cmp	r2, r3
 8000958:	d909      	bls.n	800096e <__udivmoddi4+0x62>
 800095a:	18fb      	adds	r3, r7, r3
 800095c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000960:	f080 80ea 	bcs.w	8000b38 <__udivmoddi4+0x22c>
 8000964:	429a      	cmp	r2, r3
 8000966:	f240 80e7 	bls.w	8000b38 <__udivmoddi4+0x22c>
 800096a:	3902      	subs	r1, #2
 800096c:	443b      	add	r3, r7
 800096e:	1a9a      	subs	r2, r3, r2
 8000970:	b2a3      	uxth	r3, r4
 8000972:	fbb2 f0fe 	udiv	r0, r2, lr
 8000976:	fb0e 2210 	mls	r2, lr, r0, r2
 800097a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800097e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000982:	459c      	cmp	ip, r3
 8000984:	d909      	bls.n	800099a <__udivmoddi4+0x8e>
 8000986:	18fb      	adds	r3, r7, r3
 8000988:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800098c:	f080 80d6 	bcs.w	8000b3c <__udivmoddi4+0x230>
 8000990:	459c      	cmp	ip, r3
 8000992:	f240 80d3 	bls.w	8000b3c <__udivmoddi4+0x230>
 8000996:	443b      	add	r3, r7
 8000998:	3802      	subs	r0, #2
 800099a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800099e:	eba3 030c 	sub.w	r3, r3, ip
 80009a2:	2100      	movs	r1, #0
 80009a4:	b11d      	cbz	r5, 80009ae <__udivmoddi4+0xa2>
 80009a6:	40f3      	lsrs	r3, r6
 80009a8:	2200      	movs	r2, #0
 80009aa:	e9c5 3200 	strd	r3, r2, [r5]
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	428b      	cmp	r3, r1
 80009b4:	d905      	bls.n	80009c2 <__udivmoddi4+0xb6>
 80009b6:	b10d      	cbz	r5, 80009bc <__udivmoddi4+0xb0>
 80009b8:	e9c5 0100 	strd	r0, r1, [r5]
 80009bc:	2100      	movs	r1, #0
 80009be:	4608      	mov	r0, r1
 80009c0:	e7f5      	b.n	80009ae <__udivmoddi4+0xa2>
 80009c2:	fab3 f183 	clz	r1, r3
 80009c6:	2900      	cmp	r1, #0
 80009c8:	d146      	bne.n	8000a58 <__udivmoddi4+0x14c>
 80009ca:	4573      	cmp	r3, lr
 80009cc:	d302      	bcc.n	80009d4 <__udivmoddi4+0xc8>
 80009ce:	4282      	cmp	r2, r0
 80009d0:	f200 8105 	bhi.w	8000bde <__udivmoddi4+0x2d2>
 80009d4:	1a84      	subs	r4, r0, r2
 80009d6:	eb6e 0203 	sbc.w	r2, lr, r3
 80009da:	2001      	movs	r0, #1
 80009dc:	4690      	mov	r8, r2
 80009de:	2d00      	cmp	r5, #0
 80009e0:	d0e5      	beq.n	80009ae <__udivmoddi4+0xa2>
 80009e2:	e9c5 4800 	strd	r4, r8, [r5]
 80009e6:	e7e2      	b.n	80009ae <__udivmoddi4+0xa2>
 80009e8:	2a00      	cmp	r2, #0
 80009ea:	f000 8090 	beq.w	8000b0e <__udivmoddi4+0x202>
 80009ee:	fab2 f682 	clz	r6, r2
 80009f2:	2e00      	cmp	r6, #0
 80009f4:	f040 80a4 	bne.w	8000b40 <__udivmoddi4+0x234>
 80009f8:	1a8a      	subs	r2, r1, r2
 80009fa:	0c03      	lsrs	r3, r0, #16
 80009fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a00:	b280      	uxth	r0, r0
 8000a02:	b2bc      	uxth	r4, r7
 8000a04:	2101      	movs	r1, #1
 8000a06:	fbb2 fcfe 	udiv	ip, r2, lr
 8000a0a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000a0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a12:	fb04 f20c 	mul.w	r2, r4, ip
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d907      	bls.n	8000a2a <__udivmoddi4+0x11e>
 8000a1a:	18fb      	adds	r3, r7, r3
 8000a1c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000a20:	d202      	bcs.n	8000a28 <__udivmoddi4+0x11c>
 8000a22:	429a      	cmp	r2, r3
 8000a24:	f200 80e0 	bhi.w	8000be8 <__udivmoddi4+0x2dc>
 8000a28:	46c4      	mov	ip, r8
 8000a2a:	1a9b      	subs	r3, r3, r2
 8000a2c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000a30:	fb0e 3312 	mls	r3, lr, r2, r3
 8000a34:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000a38:	fb02 f404 	mul.w	r4, r2, r4
 8000a3c:	429c      	cmp	r4, r3
 8000a3e:	d907      	bls.n	8000a50 <__udivmoddi4+0x144>
 8000a40:	18fb      	adds	r3, r7, r3
 8000a42:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000a46:	d202      	bcs.n	8000a4e <__udivmoddi4+0x142>
 8000a48:	429c      	cmp	r4, r3
 8000a4a:	f200 80ca 	bhi.w	8000be2 <__udivmoddi4+0x2d6>
 8000a4e:	4602      	mov	r2, r0
 8000a50:	1b1b      	subs	r3, r3, r4
 8000a52:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000a56:	e7a5      	b.n	80009a4 <__udivmoddi4+0x98>
 8000a58:	f1c1 0620 	rsb	r6, r1, #32
 8000a5c:	408b      	lsls	r3, r1
 8000a5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000a62:	431f      	orrs	r7, r3
 8000a64:	fa0e f401 	lsl.w	r4, lr, r1
 8000a68:	fa20 f306 	lsr.w	r3, r0, r6
 8000a6c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000a70:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000a74:	4323      	orrs	r3, r4
 8000a76:	fa00 f801 	lsl.w	r8, r0, r1
 8000a7a:	fa1f fc87 	uxth.w	ip, r7
 8000a7e:	fbbe f0f9 	udiv	r0, lr, r9
 8000a82:	0c1c      	lsrs	r4, r3, #16
 8000a84:	fb09 ee10 	mls	lr, r9, r0, lr
 8000a88:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000a8c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000a90:	45a6      	cmp	lr, r4
 8000a92:	fa02 f201 	lsl.w	r2, r2, r1
 8000a96:	d909      	bls.n	8000aac <__udivmoddi4+0x1a0>
 8000a98:	193c      	adds	r4, r7, r4
 8000a9a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000a9e:	f080 809c 	bcs.w	8000bda <__udivmoddi4+0x2ce>
 8000aa2:	45a6      	cmp	lr, r4
 8000aa4:	f240 8099 	bls.w	8000bda <__udivmoddi4+0x2ce>
 8000aa8:	3802      	subs	r0, #2
 8000aaa:	443c      	add	r4, r7
 8000aac:	eba4 040e 	sub.w	r4, r4, lr
 8000ab0:	fa1f fe83 	uxth.w	lr, r3
 8000ab4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ab8:	fb09 4413 	mls	r4, r9, r3, r4
 8000abc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ac0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ac4:	45a4      	cmp	ip, r4
 8000ac6:	d908      	bls.n	8000ada <__udivmoddi4+0x1ce>
 8000ac8:	193c      	adds	r4, r7, r4
 8000aca:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000ace:	f080 8082 	bcs.w	8000bd6 <__udivmoddi4+0x2ca>
 8000ad2:	45a4      	cmp	ip, r4
 8000ad4:	d97f      	bls.n	8000bd6 <__udivmoddi4+0x2ca>
 8000ad6:	3b02      	subs	r3, #2
 8000ad8:	443c      	add	r4, r7
 8000ada:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ade:	eba4 040c 	sub.w	r4, r4, ip
 8000ae2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ae6:	4564      	cmp	r4, ip
 8000ae8:	4673      	mov	r3, lr
 8000aea:	46e1      	mov	r9, ip
 8000aec:	d362      	bcc.n	8000bb4 <__udivmoddi4+0x2a8>
 8000aee:	d05f      	beq.n	8000bb0 <__udivmoddi4+0x2a4>
 8000af0:	b15d      	cbz	r5, 8000b0a <__udivmoddi4+0x1fe>
 8000af2:	ebb8 0203 	subs.w	r2, r8, r3
 8000af6:	eb64 0409 	sbc.w	r4, r4, r9
 8000afa:	fa04 f606 	lsl.w	r6, r4, r6
 8000afe:	fa22 f301 	lsr.w	r3, r2, r1
 8000b02:	431e      	orrs	r6, r3
 8000b04:	40cc      	lsrs	r4, r1
 8000b06:	e9c5 6400 	strd	r6, r4, [r5]
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	e74f      	b.n	80009ae <__udivmoddi4+0xa2>
 8000b0e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000b12:	0c01      	lsrs	r1, r0, #16
 8000b14:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000b18:	b280      	uxth	r0, r0
 8000b1a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000b1e:	463b      	mov	r3, r7
 8000b20:	4638      	mov	r0, r7
 8000b22:	463c      	mov	r4, r7
 8000b24:	46b8      	mov	r8, r7
 8000b26:	46be      	mov	lr, r7
 8000b28:	2620      	movs	r6, #32
 8000b2a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000b2e:	eba2 0208 	sub.w	r2, r2, r8
 8000b32:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000b36:	e766      	b.n	8000a06 <__udivmoddi4+0xfa>
 8000b38:	4601      	mov	r1, r0
 8000b3a:	e718      	b.n	800096e <__udivmoddi4+0x62>
 8000b3c:	4610      	mov	r0, r2
 8000b3e:	e72c      	b.n	800099a <__udivmoddi4+0x8e>
 8000b40:	f1c6 0220 	rsb	r2, r6, #32
 8000b44:	fa2e f302 	lsr.w	r3, lr, r2
 8000b48:	40b7      	lsls	r7, r6
 8000b4a:	40b1      	lsls	r1, r6
 8000b4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000b50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b54:	430a      	orrs	r2, r1
 8000b56:	fbb3 f8fe 	udiv	r8, r3, lr
 8000b5a:	b2bc      	uxth	r4, r7
 8000b5c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000b60:	0c11      	lsrs	r1, r2, #16
 8000b62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b66:	fb08 f904 	mul.w	r9, r8, r4
 8000b6a:	40b0      	lsls	r0, r6
 8000b6c:	4589      	cmp	r9, r1
 8000b6e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000b72:	b280      	uxth	r0, r0
 8000b74:	d93e      	bls.n	8000bf4 <__udivmoddi4+0x2e8>
 8000b76:	1879      	adds	r1, r7, r1
 8000b78:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000b7c:	d201      	bcs.n	8000b82 <__udivmoddi4+0x276>
 8000b7e:	4589      	cmp	r9, r1
 8000b80:	d81f      	bhi.n	8000bc2 <__udivmoddi4+0x2b6>
 8000b82:	eba1 0109 	sub.w	r1, r1, r9
 8000b86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b8a:	fb09 f804 	mul.w	r8, r9, r4
 8000b8e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b92:	b292      	uxth	r2, r2
 8000b94:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b98:	4542      	cmp	r2, r8
 8000b9a:	d229      	bcs.n	8000bf0 <__udivmoddi4+0x2e4>
 8000b9c:	18ba      	adds	r2, r7, r2
 8000b9e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000ba2:	d2c4      	bcs.n	8000b2e <__udivmoddi4+0x222>
 8000ba4:	4542      	cmp	r2, r8
 8000ba6:	d2c2      	bcs.n	8000b2e <__udivmoddi4+0x222>
 8000ba8:	f1a9 0102 	sub.w	r1, r9, #2
 8000bac:	443a      	add	r2, r7
 8000bae:	e7be      	b.n	8000b2e <__udivmoddi4+0x222>
 8000bb0:	45f0      	cmp	r8, lr
 8000bb2:	d29d      	bcs.n	8000af0 <__udivmoddi4+0x1e4>
 8000bb4:	ebbe 0302 	subs.w	r3, lr, r2
 8000bb8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000bbc:	3801      	subs	r0, #1
 8000bbe:	46e1      	mov	r9, ip
 8000bc0:	e796      	b.n	8000af0 <__udivmoddi4+0x1e4>
 8000bc2:	eba7 0909 	sub.w	r9, r7, r9
 8000bc6:	4449      	add	r1, r9
 8000bc8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000bcc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bd0:	fb09 f804 	mul.w	r8, r9, r4
 8000bd4:	e7db      	b.n	8000b8e <__udivmoddi4+0x282>
 8000bd6:	4673      	mov	r3, lr
 8000bd8:	e77f      	b.n	8000ada <__udivmoddi4+0x1ce>
 8000bda:	4650      	mov	r0, sl
 8000bdc:	e766      	b.n	8000aac <__udivmoddi4+0x1a0>
 8000bde:	4608      	mov	r0, r1
 8000be0:	e6fd      	b.n	80009de <__udivmoddi4+0xd2>
 8000be2:	443b      	add	r3, r7
 8000be4:	3a02      	subs	r2, #2
 8000be6:	e733      	b.n	8000a50 <__udivmoddi4+0x144>
 8000be8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bec:	443b      	add	r3, r7
 8000bee:	e71c      	b.n	8000a2a <__udivmoddi4+0x11e>
 8000bf0:	4649      	mov	r1, r9
 8000bf2:	e79c      	b.n	8000b2e <__udivmoddi4+0x222>
 8000bf4:	eba1 0109 	sub.w	r1, r1, r9
 8000bf8:	46c4      	mov	ip, r8
 8000bfa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bfe:	fb09 f804 	mul.w	r8, r9, r4
 8000c02:	e7c4      	b.n	8000b8e <__udivmoddi4+0x282>

08000c04 <__aeabi_idiv0>:
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <_ZN8SCServosC1Ev>:
#define ID_SERVO_TEST 7


class SCServos {
public:
    SCServos() = default;
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3304      	adds	r3, #4
 8000c14:	221e      	movs	r2, #30
 8000c16:	2100      	movs	r1, #0
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f003 fa96 	bl	800414a <memset>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <_ZN7devices10scs_servos4testEv>:
                    HAL_Delay(100);
                }
            }
        }

        int test() {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
            int result = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
            for (int i = 0; i < N_SERVOS; i++) {
 8000c32:	2300      	movs	r3, #0
 8000c34:	603b      	str	r3, [r7, #0]
 8000c36:	e02c      	b.n	8000c92 <_ZN7devices10scs_servos4testEv+0x6a>
                if (servos.ReadPos(ids_servos[i]) == -1) {
 8000c38:	4a1a      	ldr	r2, [pc, #104]	@ (8000ca4 <_ZN7devices10scs_servos4testEv+0x7c>)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	4619      	mov	r1, r3
 8000c42:	4819      	ldr	r0, [pc, #100]	@ (8000ca8 <_ZN7devices10scs_servos4testEv+0x80>)
 8000c44:	f000 f9ed 	bl	8001022 <_ZN8SCServos7ReadPosEh>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000c4e:	bf0c      	ite	eq
 8000c50:	2301      	moveq	r3, #1
 8000c52:	2300      	movne	r3, #0
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d00c      	beq.n	8000c74 <_ZN7devices10scs_servos4testEv+0x4c>
                    LOG_ERROR("scs", "Error reading servo number %d", ids_servos[i]);
 8000c5a:	4a12      	ldr	r2, [pc, #72]	@ (8000ca4 <_ZN7devices10scs_servos4testEv+0x7c>)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	4413      	add	r3, r2
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	461a      	mov	r2, r3
 8000c64:	4911      	ldr	r1, [pc, #68]	@ (8000cac <_ZN7devices10scs_servos4testEv+0x84>)
 8000c66:	4812      	ldr	r0, [pc, #72]	@ (8000cb0 <_ZN7devices10scs_servos4testEv+0x88>)
 8000c68:	f003 fa1a 	bl	80040a0 <iprintf>
                    result = -1;
 8000c6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	e008      	b.n	8000c86 <_ZN7devices10scs_servos4testEv+0x5e>
                } else {
                    LOG_INFO("scs", "Servo number %d read successful", ids_servos[i]);
 8000c74:	4a0b      	ldr	r2, [pc, #44]	@ (8000ca4 <_ZN7devices10scs_servos4testEv+0x7c>)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	4413      	add	r3, r2
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	490b      	ldr	r1, [pc, #44]	@ (8000cac <_ZN7devices10scs_servos4testEv+0x84>)
 8000c80:	480c      	ldr	r0, [pc, #48]	@ (8000cb4 <_ZN7devices10scs_servos4testEv+0x8c>)
 8000c82:	f003 fa0d 	bl	80040a0 <iprintf>
                }
                HAL_Delay(1);
 8000c86:	2001      	movs	r0, #1
 8000c88:	f000 feea 	bl	8001a60 <HAL_Delay>
            for (int i = 0; i < N_SERVOS; i++) {
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	603b      	str	r3, [r7, #0]
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	ddcf      	ble.n	8000c38 <_ZN7devices10scs_servos4testEv+0x10>
            }
            return result;
 8000c98:	687b      	ldr	r3, [r7, #4]
        }
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	20000090 	.word	0x20000090
 8000cac:	08004d90 	.word	0x08004d90
 8000cb0:	08004dbc 	.word	0x08004dbc
 8000cb4:	08004de8 	.word	0x08004de8

08000cb8 <_ZN7devices10scs_servos10set_enableEb>:

        void set_enable(bool enable) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
            for (const auto id : ids_servos) {
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d00 <_ZN7devices10scs_servos10set_enableEb+0x48>)
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d00 <_ZN7devices10scs_servos10set_enableEb+0x48>)
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	4b0e      	ldr	r3, [pc, #56]	@ (8000d04 <_ZN7devices10scs_servos10set_enableEb+0x4c>)
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	e00e      	b.n	8000cee <_ZN7devices10scs_servos10set_enableEb+0x36>
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	72fb      	strb	r3, [r7, #11]
                servos.EnableTorque(id, enable);
 8000cd6:	79fa      	ldrb	r2, [r7, #7]
 8000cd8:	7af9      	ldrb	r1, [r7, #11]
 8000cda:	2301      	movs	r3, #1
 8000cdc:	480a      	ldr	r0, [pc, #40]	@ (8000d08 <_ZN7devices10scs_servos10set_enableEb+0x50>)
 8000cde:	f000 f8ea 	bl	8000eb6 <_ZN8SCServos12EnableTorqueEhhh>
                HAL_Delay(1);
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	f000 febc 	bl	8001a60 <HAL_Delay>
            for (const auto id : ids_servos) {
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	3301      	adds	r3, #1
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	697a      	ldr	r2, [r7, #20]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d1ec      	bne.n	8000cd0 <_ZN7devices10scs_servos10set_enableEb+0x18>
            }
        }
 8000cf6:	bf00      	nop
 8000cf8:	bf00      	nop
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000000 	.word	0x20000000
 8000d04:	20000001 	.word	0x20000001
 8000d08:	20000090 	.word	0x20000090

08000d0c <_ZN7devices10scs_servos9set_angleEhfi>:
        float read_angle(uint8_t id)
        {
            return static_cast<float>(servos.ReadPos(id)) * UNIT_TO_DEG;
        }

        void set_angle(uint8_t id, float angle, int ms) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	ed87 0a02 	vstr	s0, [r7, #8]
 8000d18:	6079      	str	r1, [r7, #4]
 8000d1a:	73fb      	strb	r3, [r7, #15]
            set_angle_async(id, angle, ms);
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	ed97 0a02 	vldr	s0, [r7, #8]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 f80b 	bl	8000d40 <_ZN7devices10scs_servos15set_angle_asyncEhfi>
            HAL_Delay(ms);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f000 fe97 	bl	8001a60 <HAL_Delay>
        }
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	0000      	movs	r0, r0
 8000d3c:	0000      	movs	r0, r0
	...

08000d40 <_ZN7devices10scs_servos15set_angle_asyncEhfi>:

        void set_angle_async(uint8_t id, float angle, int ms) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b088      	sub	sp, #32
 8000d44:	af02      	add	r7, sp, #8
 8000d46:	4603      	mov	r3, r0
 8000d48:	ed87 0a02 	vstr	s0, [r7, #8]
 8000d4c:	6079      	str	r1, [r7, #4]
 8000d4e:	73fb      	strb	r3, [r7, #15]
            int position = (int)(angle * DEG_TO_UNIT);
 8000d50:	68b8      	ldr	r0, [r7, #8]
 8000d52:	f7ff fd43 	bl	80007dc <__aeabi_f2d>
 8000d56:	a315      	add	r3, pc, #84	@ (adr r3, 8000dac <_ZN7devices10scs_servos15set_angle_asyncEhfi+0x6c>)
 8000d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d5c:	f7ff fab0 	bl	80002c0 <__aeabi_dmul>
 8000d60:	4602      	mov	r2, r0
 8000d62:	460b      	mov	r3, r1
 8000d64:	4610      	mov	r0, r2
 8000d66:	4619      	mov	r1, r3
 8000d68:	f7ff fd90 	bl	800088c <__aeabi_d2iz>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	617b      	str	r3, [r7, #20]
            if (position < 0) {
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	da02      	bge.n	8000d7c <_ZN7devices10scs_servos15set_angle_asyncEhfi+0x3c>
                position = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	e006      	b.n	8000d8a <_ZN7devices10scs_servos15set_angle_asyncEhfi+0x4a>
            } else if (position > 1023) {
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d82:	db02      	blt.n	8000d8a <_ZN7devices10scs_servos15set_angle_asyncEhfi+0x4a>
                position = 1023;
 8000d84:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8000d88:	617b      	str	r3, [r7, #20]
            }
            servos.WritePos(id, position, ms);
 8000d8a:	7bf9      	ldrb	r1, [r7, #15]
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	697a      	ldr	r2, [r7, #20]
 8000d94:	4804      	ldr	r0, [pc, #16]	@ (8000da8 <_ZN7devices10scs_servos15set_angle_asyncEhfi+0x68>)
 8000d96:	f000 f8dd 	bl	8000f54 <_ZN8SCServos8WritePosEhiih>
            HAL_Delay(1);
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f000 fe60 	bl	8001a60 <HAL_Delay>
        }
 8000da0:	bf00      	nop
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000090 	.word	0x20000090
 8000dac:	851eb852 	.word	0x851eb852
 8000db0:	400e51eb 	.word	0x400e51eb

08000db4 <_ZN8SCServosC1EP20__UART_HandleTypeDef>:

    }
}


SCServos::SCServos (UART_HandleTypeDef *huart) : huart_(huart) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	683a      	ldr	r2, [r7, #0]
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	221e      	movs	r2, #30
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f003 f9bc 	bl	800414a <memset>

}
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <_ZNK8SCServos10write_byteEh>:

void SCServos::write_byte(uint8_t reg) const {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	460b      	mov	r3, r1
 8000de6:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit(huart_, &reg, 1, 10);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6818      	ldr	r0, [r3, #0]
 8000dec:	1cf9      	adds	r1, r7, #3
 8000dee:	230a      	movs	r3, #10
 8000df0:	2201      	movs	r2, #1
 8000df2:	f002 f94f 	bl	8003094 <HAL_UART_Transmit>
    uint8_t data;
    HAL_UART_Receive(huart_, &data, 1, 10); // Cause we receive sent bytes (single wire)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6818      	ldr	r0, [r3, #0]
 8000dfa:	f107 010f 	add.w	r1, r7, #15
 8000dfe:	230a      	movs	r3, #10
 8000e00:	2201      	movs	r2, #1
 8000e02:	f002 f9d5 	bl	80031b0 <HAL_UART_Receive>
}
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <_ZNK8SCServos11write_bytesEPht>:

void SCServos::write_bytes(uint8_t *reg, uint16_t len) const {
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	60f8      	str	r0, [r7, #12]
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < len; i++) {
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	82fb      	strh	r3, [r7, #22]
 8000e20:	e00a      	b.n	8000e38 <_ZNK8SCServos11write_bytesEPht+0x2a>
        write_byte(reg[i]);
 8000e22:	8afb      	ldrh	r3, [r7, #22]
 8000e24:	68ba      	ldr	r2, [r7, #8]
 8000e26:	4413      	add	r3, r2
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	68f8      	ldr	r0, [r7, #12]
 8000e2e:	f7ff ffd5 	bl	8000ddc <_ZNK8SCServos10write_byteEh>
    for (uint16_t i = 0; i < len; i++) {
 8000e32:	8afb      	ldrh	r3, [r7, #22]
 8000e34:	3301      	adds	r3, #1
 8000e36:	82fb      	strh	r3, [r7, #22]
 8000e38:	8afa      	ldrh	r2, [r7, #22]
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d3f0      	bcc.n	8000e22 <_ZNK8SCServos11write_bytesEPht+0x14>
    }
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <_ZNK8SCServos7ReadBufEtPh>:

int SCServos::ReadBuf(uint16_t len, uint8_t *buf) const {
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b086      	sub	sp, #24
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	60f8      	str	r0, [r7, #12]
 8000e52:	460b      	mov	r3, r1
 8000e54:	607a      	str	r2, [r7, #4]
 8000e56:	817b      	strh	r3, [r7, #10]
    int ret = HAL_UART_Receive(huart_, buf, len, 1000);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	6818      	ldr	r0, [r3, #0]
 8000e5c:	897a      	ldrh	r2, [r7, #10]
 8000e5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	f002 f9a4 	bl	80031b0 <HAL_UART_Receive>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	617b      	str	r3, [r7, #20]
    if(ret==HAL_OK) {
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d101      	bne.n	8000e76 <_ZNK8SCServos7ReadBufEtPh+0x2c>
        return len;
 8000e72:	897b      	ldrh	r3, [r7, #10]
 8000e74:	e001      	b.n	8000e7a <_ZNK8SCServos7ReadBufEtPh+0x30>
    }
    return -1;
 8000e76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <_ZNK8SCServos12fflushRevBufEv>:

void SCServos::fflushRevBuf() const {
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b084      	sub	sp, #16
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
	uint8_t data;
	while(HAL_UART_Receive(huart_, &data, 1, 0)==HAL_OK);
 8000e8a:	bf00      	nop
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6818      	ldr	r0, [r3, #0]
 8000e90:	f107 010f 	add.w	r1, r7, #15
 8000e94:	2300      	movs	r3, #0
 8000e96:	2201      	movs	r2, #1
 8000e98:	f002 f98a 	bl	80031b0 <HAL_UART_Receive>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	bf0c      	ite	eq
 8000ea2:	2301      	moveq	r3, #1
 8000ea4:	2300      	movne	r3, #0
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1ef      	bne.n	8000e8c <_ZNK8SCServos12fflushRevBufEv+0xa>
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <_ZN8SCServos12EnableTorqueEhhh>:

int SCServos::EnableTorque(uint8_t ID, uint8_t Enable, uint8_t ReturnLevel)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b084      	sub	sp, #16
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
 8000ebe:	4608      	mov	r0, r1
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	70fb      	strb	r3, [r7, #3]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	70bb      	strb	r3, [r7, #2]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	707b      	strb	r3, [r7, #1]
    int messageLength = 4;
 8000ed0:	2304      	movs	r3, #4
 8000ed2:	60fb      	str	r3, [r7, #12]

    fflushRevBuf();
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff ffd4 	bl	8000e82 <_ZNK8SCServos12fflushRevBufEv>

    buffer[0] = startByte;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	22ff      	movs	r2, #255	@ 0xff
 8000ede:	711a      	strb	r2, [r3, #4]
    buffer[1] = startByte;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	22ff      	movs	r2, #255	@ 0xff
 8000ee4:	715a      	strb	r2, [r3, #5]
    buffer[2] = ID;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	78fa      	ldrb	r2, [r7, #3]
 8000eea:	719a      	strb	r2, [r3, #6]
    buffer[3] = messageLength;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	71da      	strb	r2, [r3, #7]
    buffer[4] = INST_WRITE;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	721a      	strb	r2, [r3, #8]
    buffer[5] = P_TORQUE_ENABLE;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2228      	movs	r2, #40	@ 0x28
 8000efe:	725a      	strb	r2, [r3, #9]
    buffer[6] = Enable;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	78ba      	ldrb	r2, [r7, #2]
 8000f04:	729a      	strb	r2, [r3, #10]
    buffer[7] = (~(ID + messageLength + INST_WRITE + Enable + P_TORQUE_ENABLE))&0xFF;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	78fb      	ldrb	r3, [r7, #3]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	78bb      	ldrb	r3, [r7, #2]
 8000f12:	4413      	add	r3, r2
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	f06f 032b 	mvn.w	r3, #43	@ 0x2b
 8000f1a:	1a9b      	subs	r3, r3, r2
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	72da      	strb	r2, [r3, #11]
    write_bytes(buffer, 8);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3304      	adds	r3, #4
 8000f26:	2208      	movs	r2, #8
 8000f28:	4619      	mov	r1, r3
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff ff6f 	bl	8000e0e <_ZNK8SCServos11write_bytesEPht>
    if(ID !=  0xfe && ReturnLevel==2)
 8000f30:	78fb      	ldrb	r3, [r7, #3]
 8000f32:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f34:	d009      	beq.n	8000f4a <_ZN8SCServos12EnableTorqueEhhh+0x94>
 8000f36:	787b      	ldrb	r3, [r7, #1]
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d106      	bne.n	8000f4a <_ZN8SCServos12EnableTorqueEhhh+0x94>
        return ReadBuf(6);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2106      	movs	r1, #6
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff ff82 	bl	8000e4a <_ZNK8SCServos7ReadBufEtPh>
 8000f46:	4603      	mov	r3, r0
 8000f48:	e000      	b.n	8000f4c <_ZN8SCServos12EnableTorqueEhhh+0x96>
    return 0;
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <_ZN8SCServos8WritePosEhiih>:

int SCServos::WritePos(uint8_t ID, int position, int velocity, uint8_t ReturnLevel)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	607a      	str	r2, [r7, #4]
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	460b      	mov	r3, r1
 8000f62:	72fb      	strb	r3, [r7, #11]
    int messageLength = 7;
 8000f64:	2307      	movs	r3, #7
 8000f66:	617b      	str	r3, [r7, #20]
    uint8_t posL = position>>8;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	121b      	asrs	r3, r3, #8
 8000f6c:	74fb      	strb	r3, [r7, #19]
    uint8_t posH = position&0xff;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	74bb      	strb	r3, [r7, #18]
    uint8_t velL = velocity>>8;
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	121b      	asrs	r3, r3, #8
 8000f76:	747b      	strb	r3, [r7, #17]
    uint8_t velH = velocity&0xff;
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	743b      	strb	r3, [r7, #16]

    fflushRevBuf();
 8000f7c:	68f8      	ldr	r0, [r7, #12]
 8000f7e:	f7ff ff80 	bl	8000e82 <_ZNK8SCServos12fflushRevBufEv>
    buffer[0] = startByte;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	22ff      	movs	r2, #255	@ 0xff
 8000f86:	711a      	strb	r2, [r3, #4]
    buffer[1] = startByte;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	22ff      	movs	r2, #255	@ 0xff
 8000f8c:	715a      	strb	r2, [r3, #5]
    buffer[2] = ID;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	7afa      	ldrb	r2, [r7, #11]
 8000f92:	719a      	strb	r2, [r3, #6]
    buffer[3] = messageLength;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	71da      	strb	r2, [r3, #7]
    buffer[4] = INST_WRITE;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	721a      	strb	r2, [r3, #8]
    buffer[5] = P_GOAL_POSITION_L;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	222a      	movs	r2, #42	@ 0x2a
 8000fa6:	725a      	strb	r2, [r3, #9]
    buffer[6] = posL;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	7cfa      	ldrb	r2, [r7, #19]
 8000fac:	729a      	strb	r2, [r3, #10]
    buffer[7] = posH;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	7cba      	ldrb	r2, [r7, #18]
 8000fb2:	72da      	strb	r2, [r3, #11]
    buffer[8] = velL;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	7c7a      	ldrb	r2, [r7, #17]
 8000fb8:	731a      	strb	r2, [r3, #12]
    buffer[9] = velH;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	7c3a      	ldrb	r2, [r7, #16]
 8000fbe:	735a      	strb	r2, [r3, #13]
    buffer[10] = (~(ID + messageLength + INST_WRITE + P_GOAL_POSITION_L + posL + posH + velL + velH)) & 0xFF;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	7afb      	ldrb	r3, [r7, #11]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	7cfb      	ldrb	r3, [r7, #19]
 8000fcc:	4413      	add	r3, r2
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	7cbb      	ldrb	r3, [r7, #18]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	7c7b      	ldrb	r3, [r7, #17]
 8000fd8:	4413      	add	r3, r2
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	7c3b      	ldrb	r3, [r7, #16]
 8000fde:	4413      	add	r3, r2
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	f06f 032d 	mvn.w	r3, #45	@ 0x2d
 8000fe6:	1a9b      	subs	r3, r3, r2
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	739a      	strb	r2, [r3, #14]
    write_bytes(buffer, 11);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	220b      	movs	r2, #11
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	68f8      	ldr	r0, [r7, #12]
 8000ff8:	f7ff ff09 	bl	8000e0e <_ZNK8SCServos11write_bytesEPht>
    if(ID != 16 && ReturnLevel==2)
 8000ffc:	7afb      	ldrb	r3, [r7, #11]
 8000ffe:	2b10      	cmp	r3, #16
 8001000:	d00a      	beq.n	8001018 <_ZN8SCServos8WritePosEhiih+0xc4>
 8001002:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001006:	2b02      	cmp	r3, #2
 8001008:	d106      	bne.n	8001018 <_ZN8SCServos8WritePosEhiih+0xc4>
        return ReadBuf(6);
 800100a:	2200      	movs	r2, #0
 800100c:	2106      	movs	r1, #6
 800100e:	68f8      	ldr	r0, [r7, #12]
 8001010:	f7ff ff1b 	bl	8000e4a <_ZNK8SCServos7ReadBufEtPh>
 8001014:	4603      	mov	r3, r0
 8001016:	e000      	b.n	800101a <_ZN8SCServos8WritePosEhiih+0xc6>
    return 0;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <_ZN8SCServos7ReadPosEh>:
    buffer[5] = (~(ID + messageLength + INST_ACTION)) & 0xFF;
    write_bytes(buffer, 6);
}

int SCServos::ReadPos(uint8_t ID)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	460b      	mov	r3, r1
 800102c:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[8] = {0};
 800102e:	f107 0308 	add.w	r3, r7, #8
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
    int size;
    int pos=0;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]

    fflushRevBuf();
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff ff20 	bl	8000e82 <_ZNK8SCServos12fflushRevBufEv>
    buffer[0] = startByte;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	22ff      	movs	r2, #255	@ 0xff
 8001046:	711a      	strb	r2, [r3, #4]
    buffer[1] = startByte;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	22ff      	movs	r2, #255	@ 0xff
 800104c:	715a      	strb	r2, [r3, #5]
    buffer[2] = ID;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	78fa      	ldrb	r2, [r7, #3]
 8001052:	719a      	strb	r2, [r3, #6]
    buffer[3] = 4;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2204      	movs	r2, #4
 8001058:	71da      	strb	r2, [r3, #7]
    buffer[4] = INST_READ;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2202      	movs	r2, #2
 800105e:	721a      	strb	r2, [r3, #8]
    buffer[5] = P_PRESENT_POSITION_L;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2238      	movs	r2, #56	@ 0x38
 8001064:	725a      	strb	r2, [r3, #9]
    buffer[6] = 2;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2202      	movs	r2, #2
 800106a:	729a      	strb	r2, [r3, #10]
    buffer[7] = (~(ID + 4 + INST_READ + P_PRESENT_POSITION_L + 2)) & 0xFF;
 800106c:	78fb      	ldrb	r3, [r7, #3]
 800106e:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 8001072:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8001076:	33bf      	adds	r3, #191	@ 0xbf
 8001078:	b2da      	uxtb	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	72da      	strb	r2, [r3, #11]
    write_bytes(buffer, 8);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3304      	adds	r3, #4
 8001082:	2208      	movs	r2, #8
 8001084:	4619      	mov	r1, r3
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff fec1 	bl	8000e0e <_ZNK8SCServos11write_bytesEPht>
    size = ReadBuf(8, buf);
 800108c:	f107 0308 	add.w	r3, r7, #8
 8001090:	461a      	mov	r2, r3
 8001092:	2108      	movs	r1, #8
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff fed8 	bl	8000e4a <_ZNK8SCServos7ReadBufEtPh>
 800109a:	6138      	str	r0, [r7, #16]
    if(size<8)
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	2b07      	cmp	r3, #7
 80010a0:	dc02      	bgt.n	80010a8 <_ZN8SCServos7ReadPosEh+0x86>
        return -1;
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010a6:	e00a      	b.n	80010be <_ZN8SCServos7ReadPosEh+0x9c>
    pos = buf[5];
 80010a8:	7b7b      	ldrb	r3, [r7, #13]
 80010aa:	617b      	str	r3, [r7, #20]
    pos <<= 8;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	021b      	lsls	r3, r3, #8
 80010b0:	617b      	str	r3, [r7, #20]
    pos |= buf[6];
 80010b2:	7bbb      	ldrb	r3, [r7, #14]
 80010b4:	461a      	mov	r2, r3
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	617b      	str	r3, [r7, #20]
    return pos;
 80010bc:	697b      	ldr	r3, [r7, #20]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <_ZN8SCServos16WriteLimitTroqueEhih>:
        return ReadBuf(6);
    return 0;
}

int SCServos::WriteLimitTroque(uint8_t ID, int MaxTroque, uint8_t ReturnLevel)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b086      	sub	sp, #24
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	60f8      	str	r0, [r7, #12]
 80010ce:	607a      	str	r2, [r7, #4]
 80010d0:	461a      	mov	r2, r3
 80010d2:	460b      	mov	r3, r1
 80010d4:	72fb      	strb	r3, [r7, #11]
 80010d6:	4613      	mov	r3, r2
 80010d8:	72bb      	strb	r3, [r7, #10]
    int messageLength = 5;
 80010da:	2305      	movs	r3, #5
 80010dc:	617b      	str	r3, [r7, #20]
    uint8_t MaxTL = MaxTroque>>8;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	121b      	asrs	r3, r3, #8
 80010e2:	74fb      	strb	r3, [r7, #19]
    uint8_t MaxTH = MaxTroque&0xff;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	74bb      	strb	r3, [r7, #18]

    fflushRevBuf();
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f7ff feca 	bl	8000e82 <_ZNK8SCServos12fflushRevBufEv>
    buffer[0] = startByte;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	22ff      	movs	r2, #255	@ 0xff
 80010f2:	711a      	strb	r2, [r3, #4]
    buffer[1] = startByte;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	22ff      	movs	r2, #255	@ 0xff
 80010f8:	715a      	strb	r2, [r3, #5]
    buffer[2] = ID;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	7afa      	ldrb	r2, [r7, #11]
 80010fe:	719a      	strb	r2, [r3, #6]
    buffer[3] = messageLength;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	71da      	strb	r2, [r3, #7]
    buffer[4] = INST_WRITE;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2203      	movs	r2, #3
 800110c:	721a      	strb	r2, [r3, #8]
    buffer[5] = P_MAX_TORQUE_L;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2210      	movs	r2, #16
 8001112:	725a      	strb	r2, [r3, #9]
    buffer[6] = MaxTL;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	7cfa      	ldrb	r2, [r7, #19]
 8001118:	729a      	strb	r2, [r3, #10]
    buffer[7] = MaxTH;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	7cba      	ldrb	r2, [r7, #18]
 800111e:	72da      	strb	r2, [r3, #11]
    buffer[8] = (~(ID + messageLength + INST_WRITE + P_MAX_TORQUE_L + MaxTL + MaxTH)) & 0xFF;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	b2da      	uxtb	r2, r3
 8001124:	7afb      	ldrb	r3, [r7, #11]
 8001126:	4413      	add	r3, r2
 8001128:	b2da      	uxtb	r2, r3
 800112a:	7cfb      	ldrb	r3, [r7, #19]
 800112c:	4413      	add	r3, r2
 800112e:	b2da      	uxtb	r2, r3
 8001130:	7cbb      	ldrb	r3, [r7, #18]
 8001132:	4413      	add	r3, r2
 8001134:	b2da      	uxtb	r2, r3
 8001136:	f06f 0313 	mvn.w	r3, #19
 800113a:	1a9b      	subs	r3, r3, r2
 800113c:	b2da      	uxtb	r2, r3
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	731a      	strb	r2, [r3, #12]
    write_bytes(buffer, 9);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	3304      	adds	r3, #4
 8001146:	2209      	movs	r2, #9
 8001148:	4619      	mov	r1, r3
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f7ff fe5f 	bl	8000e0e <_ZNK8SCServos11write_bytesEPht>

    if(ID != 16 && ReturnLevel==2)
 8001150:	7afb      	ldrb	r3, [r7, #11]
 8001152:	2b10      	cmp	r3, #16
 8001154:	d009      	beq.n	800116a <_ZN8SCServos16WriteLimitTroqueEhih+0xa4>
 8001156:	7abb      	ldrb	r3, [r7, #10]
 8001158:	2b02      	cmp	r3, #2
 800115a:	d106      	bne.n	800116a <_ZN8SCServos16WriteLimitTroqueEhih+0xa4>
        return ReadBuf(6);
 800115c:	2200      	movs	r2, #0
 800115e:	2106      	movs	r1, #6
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f7ff fe72 	bl	8000e4a <_ZNK8SCServos7ReadBufEtPh>
 8001166:	4603      	mov	r3, r0
 8001168:	e000      	b.n	800116c <_ZN8SCServos16WriteLimitTroqueEhih+0xa6>
    return 0;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <_Z41__static_initialization_and_destruction_0v>:
    for(uint8_t id=id_start; id<id_stop; id++) {
        if(ReadPos(id)!=-1) {
            printf("Found ID %d\n", id);
        }
    }
}
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
        SCServos servos;
 8001178:	4802      	ldr	r0, [pc, #8]	@ (8001184 <_Z41__static_initialization_and_destruction_0v+0x10>)
 800117a:	f7ff fd45 	bl	8000c08 <_ZN8SCServosC1Ev>
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000090 	.word	0x20000090

08001188 <_GLOBAL__sub_I__ZN7devices10scs_servos10ids_servosE>:
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
 800118c:	f7ff fff2 	bl	8001174 <_Z41__static_initialization_and_destruction_0v>
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <MX_GPIO_Init+0x44>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119e:	4a0e      	ldr	r2, [pc, #56]	@ (80011d8 <MX_GPIO_Init+0x44>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a6:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <MX_GPIO_Init+0x44>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <MX_GPIO_Init+0x44>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b6:	4a08      	ldr	r2, [pc, #32]	@ (80011d8 <MX_GPIO_Init+0x44>)
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011be:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <MX_GPIO_Init+0x44>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	683b      	ldr	r3, [r7, #0]

}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40021000 	.word	0x40021000

080011dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011dc:	b5b0      	push	{r4, r5, r7, lr}
 80011de:	b08e      	sub	sp, #56	@ 0x38
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e2:	f000 fbcd 	bl	8001980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e6:	f000 f897 	bl	8001318 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ea:	f7ff ffd3 	bl	8001194 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80011ee:	f000 f9f7 	bl	80015e0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80011f2:	2000      	movs	r0, #0
 80011f4:	f000 fac4 	bl	8001780 <BSP_LED_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80011f8:	4b3d      	ldr	r3, [pc, #244]	@ (80012f0 <main+0x114>)
 80011fa:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011fe:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8001200:	4b3b      	ldr	r3, [pc, #236]	@ (80012f0 <main+0x114>)
 8001202:	2200      	movs	r2, #0
 8001204:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8001206:	4b3a      	ldr	r3, [pc, #232]	@ (80012f0 <main+0x114>)
 8001208:	2200      	movs	r2, #0
 800120a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800120c:	4b38      	ldr	r3, [pc, #224]	@ (80012f0 <main+0x114>)
 800120e:	2200      	movs	r2, #0
 8001210:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8001212:	4b37      	ldr	r3, [pc, #220]	@ (80012f0 <main+0x114>)
 8001214:	2200      	movs	r2, #0
 8001216:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8001218:	4935      	ldr	r1, [pc, #212]	@ (80012f0 <main+0x114>)
 800121a:	2000      	movs	r0, #0
 800121c:	f000 fae6 	bl	80017ec <BSP_COM_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	bf14      	ite	ne
 8001226:	2301      	movne	r3, #1
 8001228:	2300      	moveq	r3, #0
 800122a:	b2db      	uxtb	r3, r3
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <main+0x58>
  {
    Error_Handler();
 8001230:	f000 f8c7 	bl	80013c2 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  devices::scs_servos::servos = SCServos(&huart1);
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	492f      	ldr	r1, [pc, #188]	@ (80012f4 <main+0x118>)
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fdbb 	bl	8000db4 <_ZN8SCServosC1EP20__UART_HandleTypeDef>
 800123e:	4b2e      	ldr	r3, [pc, #184]	@ (80012f8 <main+0x11c>)
 8001240:	461d      	mov	r5, r3
 8001242:	1d3c      	adds	r4, r7, #4
 8001244:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001246:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001248:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800124a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800124c:	6823      	ldr	r3, [r4, #0]
 800124e:	802b      	strh	r3, [r5, #0]

   devices::scs_servos::init_successful = false;
 8001250:	4b2a      	ldr	r3, [pc, #168]	@ (80012fc <main+0x120>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
   while (devices::scs_servos::test() == -1) {
 8001256:	e007      	b.n	8001268 <main+0x8c>
       LOG_ERROR("scs", "Error initializing servos. Retrying.");
 8001258:	4929      	ldr	r1, [pc, #164]	@ (8001300 <main+0x124>)
 800125a:	482a      	ldr	r0, [pc, #168]	@ (8001304 <main+0x128>)
 800125c:	f002 ff20 	bl	80040a0 <iprintf>
       HAL_Delay(1000);
 8001260:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001264:	f000 fbfc 	bl	8001a60 <HAL_Delay>
   while (devices::scs_servos::test() == -1) {
 8001268:	f7ff fcde 	bl	8000c28 <_ZN7devices10scs_servos4testEv>
 800126c:	4603      	mov	r3, r0
 800126e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001272:	bf0c      	ite	eq
 8001274:	2301      	moveq	r3, #1
 8001276:	2300      	movne	r3, #0
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1ec      	bne.n	8001258 <main+0x7c>
   }

   devices::scs_servos::set_enable(true); // TODO move to sysTask
 800127e:	2001      	movs	r0, #1
 8001280:	f7ff fd1a 	bl	8000cb8 <_ZN7devices10scs_servos10set_enableEb>

   for (const auto id : devices::scs_servos::ids_servos) {
 8001284:	4b20      	ldr	r3, [pc, #128]	@ (8001308 <main+0x12c>)
 8001286:	633b      	str	r3, [r7, #48]	@ 0x30
 8001288:	4b1f      	ldr	r3, [pc, #124]	@ (8001308 <main+0x12c>)
 800128a:	637b      	str	r3, [r7, #52]	@ 0x34
 800128c:	4b1f      	ldr	r3, [pc, #124]	@ (800130c <main+0x130>)
 800128e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001290:	e011      	b.n	80012b6 <main+0xda>
 8001292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	   devices::scs_servos::servos.WriteLimitTroque(id, SCSERVOS_TORQUE_LIMIT);
 800129a:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 800129e:	2301      	movs	r3, #1
 80012a0:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 80012a4:	4814      	ldr	r0, [pc, #80]	@ (80012f8 <main+0x11c>)
 80012a6:	f7ff ff0e 	bl	80010c6 <_ZN8SCServos16WriteLimitTroqueEhih>
       HAL_Delay(1);
 80012aa:	2001      	movs	r0, #1
 80012ac:	f000 fbd8 	bl	8001a60 <HAL_Delay>
   for (const auto id : devices::scs_servos::ids_servos) {
 80012b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012b2:	3301      	adds	r3, #1
 80012b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80012b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80012b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d1e9      	bne.n	8001292 <main+0xb6>
   }
   devices::scs_servos::init_successful = true;
 80012be:	4b0f      	ldr	r3, [pc, #60]	@ (80012fc <main+0x120>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	701a      	strb	r2, [r3, #0]

  while (1)
  {

    /* USER CODE END WHILE */
	   devices::scs_servos::set_angle(ID_SERVO_TEST, 100, 100);
 80012c4:	2164      	movs	r1, #100	@ 0x64
 80012c6:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8001310 <main+0x134>
 80012ca:	2007      	movs	r0, #7
 80012cc:	f7ff fd1e 	bl	8000d0c <_ZN7devices10scs_servos9set_angleEhfi>

	   HAL_Delay(1000);
 80012d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012d4:	f000 fbc4 	bl	8001a60 <HAL_Delay>
	   devices::scs_servos::set_angle(ID_SERVO_TEST, 0, 100);
 80012d8:	2164      	movs	r1, #100	@ 0x64
 80012da:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8001314 <main+0x138>
 80012de:	2007      	movs	r0, #7
 80012e0:	f7ff fd14 	bl	8000d0c <_ZN7devices10scs_servos9set_angleEhfi>
	   HAL_Delay(1000);
 80012e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012e8:	f000 fbba 	bl	8001a60 <HAL_Delay>
	   devices::scs_servos::set_angle(ID_SERVO_TEST, 100, 100);
 80012ec:	bf00      	nop
 80012ee:	e7e9      	b.n	80012c4 <main+0xe8>
 80012f0:	200000b8 	.word	0x200000b8
 80012f4:	200000cc 	.word	0x200000cc
 80012f8:	20000090 	.word	0x20000090
 80012fc:	200000b4 	.word	0x200000b4
 8001300:	08004e28 	.word	0x08004e28
 8001304:	08004e2c 	.word	0x08004e2c
 8001308:	20000000 	.word	0x20000000
 800130c:	20000001 	.word	0x20000001
 8001310:	42c80000 	.word	0x42c80000
 8001314:	00000000 	.word	0x00000000

08001318 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b094      	sub	sp, #80	@ 0x50
 800131c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800131e:	f107 0318 	add.w	r3, r7, #24
 8001322:	2238      	movs	r2, #56	@ 0x38
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f002 ff0f 	bl	800414a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800133a:	2000      	movs	r0, #0
 800133c:	f000 fe30 	bl	8001fa0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001340:	2302      	movs	r3, #2
 8001342:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001344:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001348:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800134a:	2340      	movs	r3, #64	@ 0x40
 800134c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800134e:	2302      	movs	r3, #2
 8001350:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001352:	2302      	movs	r3, #2
 8001354:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001356:	2304      	movs	r3, #4
 8001358:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800135a:	2355      	movs	r3, #85	@ 0x55
 800135c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800135e:	2302      	movs	r3, #2
 8001360:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001362:	2302      	movs	r3, #2
 8001364:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001366:	2302      	movs	r3, #2
 8001368:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136a:	f107 0318 	add.w	r3, r7, #24
 800136e:	4618      	mov	r0, r3
 8001370:	f000 feca 	bl	8002108 <HAL_RCC_OscConfig>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	bf14      	ite	ne
 800137a:	2301      	movne	r3, #1
 800137c:	2300      	moveq	r3, #0
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001384:	f000 f81d 	bl	80013c2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001388:	230f      	movs	r3, #15
 800138a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800138c:	2303      	movs	r3, #3
 800138e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	2104      	movs	r1, #4
 80013a0:	4618      	mov	r0, r3
 80013a2:	f001 f9c3 	bl	800272c <HAL_RCC_ClockConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	bf14      	ite	ne
 80013ac:	2301      	movne	r3, #1
 80013ae:	2300      	moveq	r3, #0
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80013b6:	f000 f804 	bl	80013c2 <Error_Handler>
  }
}
 80013ba:	bf00      	nop
 80013bc:	3750      	adds	r7, #80	@ 0x50
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c6:	b672      	cpsid	i
}
 80013c8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ca:	bf00      	nop
 80013cc:	e7fd      	b.n	80013ca <Error_Handler+0x8>
	...

080013d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001414 <HAL_MspInit+0x44>)
 80013d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013da:	4a0e      	ldr	r2, [pc, #56]	@ (8001414 <HAL_MspInit+0x44>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80013e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001414 <HAL_MspInit+0x44>)
 80013e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ee:	4b09      	ldr	r3, [pc, #36]	@ (8001414 <HAL_MspInit+0x44>)
 80013f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f2:	4a08      	ldr	r2, [pc, #32]	@ (8001414 <HAL_MspInit+0x44>)
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80013fa:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <HAL_MspInit+0x44>)
 80013fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001406:	f000 fe6f 	bl	80020e8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40021000 	.word	0x40021000

08001418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <NMI_Handler+0x4>

08001420 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <HardFault_Handler+0x4>

08001428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <MemManage_Handler+0x4>

08001430 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <BusFault_Handler+0x4>

08001438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <UsageFault_Handler+0x4>

08001440 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800146e:	f000 fad9 	bl	8001a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}

08001476 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	60f8      	str	r0, [r7, #12]
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	e00a      	b.n	800149e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001488:	f3af 8000 	nop.w
 800148c:	4601      	mov	r1, r0
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	1c5a      	adds	r2, r3, #1
 8001492:	60ba      	str	r2, [r7, #8]
 8001494:	b2ca      	uxtb	r2, r1
 8001496:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	3301      	adds	r3, #1
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	dbf0      	blt.n	8001488 <_read+0x12>
  }

  return len;
 80014a6:	687b      	ldr	r3, [r7, #4]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	e009      	b.n	80014d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	1c5a      	adds	r2, r3, #1
 80014c6:	60ba      	str	r2, [r7, #8]
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 f9f0 	bl	80018b0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	3301      	adds	r3, #1
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	429a      	cmp	r2, r3
 80014dc:	dbf1      	blt.n	80014c2 <_write+0x12>
  }
  return len;
 80014de:	687b      	ldr	r3, [r7, #4]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <_close>:

int _close(int file)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001510:	605a      	str	r2, [r3, #4]
  return 0;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <_isatty>:

int _isatty(int file)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001528:	2301      	movs	r3, #1
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001536:	b480      	push	{r7}
 8001538:	b085      	sub	sp, #20
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001558:	4a14      	ldr	r2, [pc, #80]	@ (80015ac <_sbrk+0x5c>)
 800155a:	4b15      	ldr	r3, [pc, #84]	@ (80015b0 <_sbrk+0x60>)
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001564:	4b13      	ldr	r3, [pc, #76]	@ (80015b4 <_sbrk+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d102      	bne.n	8001572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800156c:	4b11      	ldr	r3, [pc, #68]	@ (80015b4 <_sbrk+0x64>)
 800156e:	4a12      	ldr	r2, [pc, #72]	@ (80015b8 <_sbrk+0x68>)
 8001570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001572:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <_sbrk+0x64>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	429a      	cmp	r2, r3
 800157e:	d207      	bcs.n	8001590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001580:	f002 fe32 	bl	80041e8 <__errno>
 8001584:	4603      	mov	r3, r0
 8001586:	220c      	movs	r2, #12
 8001588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800158a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800158e:	e009      	b.n	80015a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001590:	4b08      	ldr	r3, [pc, #32]	@ (80015b4 <_sbrk+0x64>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001596:	4b07      	ldr	r3, [pc, #28]	@ (80015b4 <_sbrk+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	4a05      	ldr	r2, [pc, #20]	@ (80015b4 <_sbrk+0x64>)
 80015a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015a2:	68fb      	ldr	r3, [r7, #12]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20008000 	.word	0x20008000
 80015b0:	00000400 	.word	0x00000400
 80015b4:	200000c8 	.word	0x200000c8
 80015b8:	20000348 	.word	0x20000348

080015bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015c0:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <SystemInit+0x20>)
 80015c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015c6:	4a05      	ldr	r2, [pc, #20]	@ (80015dc <SystemInit+0x20>)
 80015c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015e4:	4b22      	ldr	r3, [pc, #136]	@ (8001670 <MX_USART1_UART_Init+0x90>)
 80015e6:	4a23      	ldr	r2, [pc, #140]	@ (8001674 <MX_USART1_UART_Init+0x94>)
 80015e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 80015ea:	4b21      	ldr	r3, [pc, #132]	@ (8001670 <MX_USART1_UART_Init+0x90>)
 80015ec:	4a22      	ldr	r2, [pc, #136]	@ (8001678 <MX_USART1_UART_Init+0x98>)
 80015ee:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001670 <MX_USART1_UART_Init+0x90>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001670 <MX_USART1_UART_Init+0x90>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001670 <MX_USART1_UART_Init+0x90>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001602:	4b1b      	ldr	r3, [pc, #108]	@ (8001670 <MX_USART1_UART_Init+0x90>)
 8001604:	220c      	movs	r2, #12
 8001606:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001608:	4b19      	ldr	r3, [pc, #100]	@ (8001670 <MX_USART1_UART_Init+0x90>)
 800160a:	2200      	movs	r2, #0
 800160c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800160e:	4b18      	ldr	r3, [pc, #96]	@ (8001670 <MX_USART1_UART_Init+0x90>)
 8001610:	2200      	movs	r2, #0
 8001612:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001614:	4b16      	ldr	r3, [pc, #88]	@ (8001670 <MX_USART1_UART_Init+0x90>)
 8001616:	2200      	movs	r2, #0
 8001618:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800161a:	4b15      	ldr	r3, [pc, #84]	@ (8001670 <MX_USART1_UART_Init+0x90>)
 800161c:	2200      	movs	r2, #0
 800161e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001620:	4b13      	ldr	r3, [pc, #76]	@ (8001670 <MX_USART1_UART_Init+0x90>)
 8001622:	2200      	movs	r2, #0
 8001624:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001626:	4812      	ldr	r0, [pc, #72]	@ (8001670 <MX_USART1_UART_Init+0x90>)
 8001628:	f001 fcdc 	bl	8002fe4 <HAL_HalfDuplex_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8001632:	f7ff fec6 	bl	80013c2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001636:	2100      	movs	r1, #0
 8001638:	480d      	ldr	r0, [pc, #52]	@ (8001670 <MX_USART1_UART_Init+0x90>)
 800163a:	f002 fba5 	bl	8003d88 <HAL_UARTEx_SetTxFifoThreshold>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8001644:	f7ff febd 	bl	80013c2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001648:	2100      	movs	r1, #0
 800164a:	4809      	ldr	r0, [pc, #36]	@ (8001670 <MX_USART1_UART_Init+0x90>)
 800164c:	f002 fbda 	bl	8003e04 <HAL_UARTEx_SetRxFifoThreshold>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8001656:	f7ff feb4 	bl	80013c2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800165a:	4805      	ldr	r0, [pc, #20]	@ (8001670 <MX_USART1_UART_Init+0x90>)
 800165c:	f002 fb5b 	bl	8003d16 <HAL_UARTEx_DisableFifoMode>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8001666:	f7ff feac 	bl	80013c2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200000cc 	.word	0x200000cc
 8001674:	40013800 	.word	0x40013800
 8001678:	000186a0 	.word	0x000186a0

0800167c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b09a      	sub	sp, #104	@ 0x68
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001694:	f107 0310 	add.w	r3, r7, #16
 8001698:	2244      	movs	r2, #68	@ 0x44
 800169a:	2100      	movs	r1, #0
 800169c:	4618      	mov	r0, r3
 800169e:	f002 fd54 	bl	800414a <memset>
  if(uartHandle->Instance==USART1)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001724 <HAL_UART_MspInit+0xa8>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d137      	bne.n	800171c <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80016ac:	2301      	movs	r3, #1
 80016ae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b4:	f107 0310 	add.w	r3, r7, #16
 80016b8:	4618      	mov	r0, r3
 80016ba:	f001 fa53 	bl	8002b64 <HAL_RCCEx_PeriphCLKConfig>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016c4:	f7ff fe7d 	bl	80013c2 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016c8:	4b17      	ldr	r3, [pc, #92]	@ (8001728 <HAL_UART_MspInit+0xac>)
 80016ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016cc:	4a16      	ldr	r2, [pc, #88]	@ (8001728 <HAL_UART_MspInit+0xac>)
 80016ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80016d4:	4b14      	ldr	r3, [pc, #80]	@ (8001728 <HAL_UART_MspInit+0xac>)
 80016d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e0:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <HAL_UART_MspInit+0xac>)
 80016e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e4:	4a10      	ldr	r2, [pc, #64]	@ (8001728 <HAL_UART_MspInit+0xac>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001728 <HAL_UART_MspInit+0xac>)
 80016ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016fc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016fe:	2312      	movs	r3, #18
 8001700:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001706:	2303      	movs	r3, #3
 8001708:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800170a:	2307      	movs	r3, #7
 800170c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001712:	4619      	mov	r1, r3
 8001714:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001718:	f000 faa8 	bl	8001c6c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800171c:	bf00      	nop
 800171e:	3768      	adds	r7, #104	@ 0x68
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40013800 	.word	0x40013800
 8001728:	40021000 	.word	0x40021000

0800172c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800172c:	480d      	ldr	r0, [pc, #52]	@ (8001764 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800172e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001730:	f7ff ff44 	bl	80015bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001734:	480c      	ldr	r0, [pc, #48]	@ (8001768 <LoopForever+0x6>)
  ldr r1, =_edata
 8001736:	490d      	ldr	r1, [pc, #52]	@ (800176c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001738:	4a0d      	ldr	r2, [pc, #52]	@ (8001770 <LoopForever+0xe>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800173c:	e002      	b.n	8001744 <LoopCopyDataInit>

0800173e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001742:	3304      	adds	r3, #4

08001744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001748:	d3f9      	bcc.n	800173e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800174a:	4a0a      	ldr	r2, [pc, #40]	@ (8001774 <LoopForever+0x12>)
  ldr r4, =_ebss
 800174c:	4c0a      	ldr	r4, [pc, #40]	@ (8001778 <LoopForever+0x16>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001750:	e001      	b.n	8001756 <LoopFillZerobss>

08001752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001754:	3204      	adds	r2, #4

08001756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001758:	d3fb      	bcc.n	8001752 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800175a:	f002 fd4b 	bl	80041f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800175e:	f7ff fd3d 	bl	80011dc <main>

08001762 <LoopForever>:

LoopForever:
    b LoopForever
 8001762:	e7fe      	b.n	8001762 <LoopForever>
  ldr   r0, =_estack
 8001764:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800176c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001770:	08004ee8 	.word	0x08004ee8
  ldr r2, =_sbss
 8001774:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001778:	20000348 	.word	0x20000348

0800177c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800177c:	e7fe      	b.n	800177c <ADC1_2_IRQHandler>
	...

08001780 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 800178a:	4b16      	ldr	r3, [pc, #88]	@ (80017e4 <BSP_LED_Init+0x64>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178e:	4a15      	ldr	r2, [pc, #84]	@ (80017e4 <BSP_LED_Init+0x64>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001796:	4b13      	ldr	r3, [pc, #76]	@ (80017e4 <BSP_LED_Init+0x64>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 80017a2:	2320      	movs	r3, #32
 80017a4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80017a6:	2301      	movs	r3, #1
 80017a8:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ae:	2303      	movs	r3, #3
 80017b0:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	4a0c      	ldr	r2, [pc, #48]	@ (80017e8 <BSP_LED_Init+0x68>)
 80017b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ba:	f107 020c 	add.w	r2, r7, #12
 80017be:	4611      	mov	r1, r2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f000 fa53 	bl	8001c6c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	4a07      	ldr	r2, [pc, #28]	@ (80017e8 <BSP_LED_Init+0x68>)
 80017ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ce:	2120      	movs	r1, #32
 80017d0:	2200      	movs	r2, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 fbcc 	bl	8001f70 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3720      	adds	r7, #32
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40021000 	.word	0x40021000
 80017e8:	20000008 	.word	0x20000008

080017ec <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	6039      	str	r1, [r7, #0]
 80017f6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d903      	bls.n	800180a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001802:	f06f 0301 	mvn.w	r3, #1
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	e018      	b.n	800183c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	2294      	movs	r2, #148	@ 0x94
 800180e:	fb02 f303 	mul.w	r3, r2, r3
 8001812:	4a0d      	ldr	r2, [pc, #52]	@ (8001848 <BSP_COM_Init+0x5c>)
 8001814:	4413      	add	r3, r2
 8001816:	4618      	mov	r0, r3
 8001818:	f000 f866 	bl	80018e8 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	2294      	movs	r2, #148	@ 0x94
 8001820:	fb02 f303 	mul.w	r3, r2, r3
 8001824:	4a08      	ldr	r2, [pc, #32]	@ (8001848 <BSP_COM_Init+0x5c>)
 8001826:	4413      	add	r3, r2
 8001828:	6839      	ldr	r1, [r7, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f80e 	bl	800184c <MX_LPUART1_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d002      	beq.n	800183c <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8001836:	f06f 0303 	mvn.w	r3, #3
 800183a:	e000      	b.n	800183e <BSP_COM_Init+0x52>
    }
  }

  return ret;
 800183c:	68fb      	ldr	r3, [r7, #12]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000160 	.word	0x20000160

0800184c <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001856:	4b15      	ldr	r3, [pc, #84]	@ (80018ac <MX_LPUART1_Init+0x60>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	220c      	movs	r2, #12
 800186a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	895b      	ldrh	r3, [r3, #10]
 8001870:	461a      	mov	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	891b      	ldrh	r3, [r3, #8]
 8001882:	461a      	mov	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	899b      	ldrh	r3, [r3, #12]
 800188c:	461a      	mov	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001898:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f001 fb52 	bl	8002f44 <HAL_UART_Init>
 80018a0:	4603      	mov	r3, r0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	2000000c 	.word	0x2000000c

080018b0 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80018b8:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <__io_putchar+0x30>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	2394      	movs	r3, #148	@ 0x94
 80018c0:	fb02 f303 	mul.w	r3, r2, r3
 80018c4:	4a07      	ldr	r2, [pc, #28]	@ (80018e4 <__io_putchar+0x34>)
 80018c6:	1898      	adds	r0, r3, r2
 80018c8:	1d39      	adds	r1, r7, #4
 80018ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018ce:	2201      	movs	r2, #1
 80018d0:	f001 fbe0 	bl	8003094 <HAL_UART_Transmit>
  return ch;
 80018d4:	687b      	ldr	r3, [r7, #4]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200001f4 	.word	0x200001f4
 80018e4:	20000160 	.word	0x20000160

080018e8 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	@ 0x28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80018f0:	4b22      	ldr	r3, [pc, #136]	@ (800197c <COM1_MspInit+0x94>)
 80018f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f4:	4a21      	ldr	r2, [pc, #132]	@ (800197c <COM1_MspInit+0x94>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018fc:	4b1f      	ldr	r3, [pc, #124]	@ (800197c <COM1_MspInit+0x94>)
 80018fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001908:	4b1c      	ldr	r3, [pc, #112]	@ (800197c <COM1_MspInit+0x94>)
 800190a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800190c:	4a1b      	ldr	r2, [pc, #108]	@ (800197c <COM1_MspInit+0x94>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001914:	4b19      	ldr	r3, [pc, #100]	@ (800197c <COM1_MspInit+0x94>)
 8001916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001920:	4b16      	ldr	r3, [pc, #88]	@ (800197c <COM1_MspInit+0x94>)
 8001922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001924:	4a15      	ldr	r2, [pc, #84]	@ (800197c <COM1_MspInit+0x94>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800192c:	4b13      	ldr	r3, [pc, #76]	@ (800197c <COM1_MspInit+0x94>)
 800192e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001938:	2304      	movs	r3, #4
 800193a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001940:	2302      	movs	r3, #2
 8001942:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001944:	2301      	movs	r3, #1
 8001946:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001948:	230c      	movs	r3, #12
 800194a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	4619      	mov	r1, r3
 8001952:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001956:	f000 f989 	bl	8001c6c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800195a:	2308      	movs	r3, #8
 800195c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800195e:	2302      	movs	r3, #2
 8001960:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001962:	230c      	movs	r3, #12
 8001964:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001966:	f107 0314 	add.w	r3, r7, #20
 800196a:	4619      	mov	r1, r3
 800196c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001970:	f000 f97c 	bl	8001c6c <HAL_GPIO_Init>
}
 8001974:	bf00      	nop
 8001976:	3728      	adds	r7, #40	@ 0x28
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40021000 	.word	0x40021000

08001980 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001986:	2300      	movs	r3, #0
 8001988:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800198a:	2003      	movs	r0, #3
 800198c:	f000 f93c 	bl	8001c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001990:	2000      	movs	r0, #0
 8001992:	f000 f80d 	bl	80019b0 <HAL_InitTick>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d002      	beq.n	80019a2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	71fb      	strb	r3, [r7, #7]
 80019a0:	e001      	b.n	80019a6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019a2:	f7ff fd15 	bl	80013d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019a6:	79fb      	ldrb	r3, [r7, #7]

}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80019bc:	4b16      	ldr	r3, [pc, #88]	@ (8001a18 <HAL_InitTick+0x68>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d022      	beq.n	8001a0a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80019c4:	4b15      	ldr	r3, [pc, #84]	@ (8001a1c <HAL_InitTick+0x6c>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b13      	ldr	r3, [pc, #76]	@ (8001a18 <HAL_InitTick+0x68>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80019d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80019d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d8:	4618      	mov	r0, r3
 80019da:	f000 f93a 	bl	8001c52 <HAL_SYSTICK_Config>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d10f      	bne.n	8001a04 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b0f      	cmp	r3, #15
 80019e8:	d809      	bhi.n	80019fe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ea:	2200      	movs	r2, #0
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019f2:	f000 f914 	bl	8001c1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a20 <HAL_InitTick+0x70>)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	e007      	b.n	8001a0e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	73fb      	strb	r3, [r7, #15]
 8001a02:	e004      	b.n	8001a0e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	73fb      	strb	r3, [r7, #15]
 8001a08:	e001      	b.n	8001a0e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000014 	.word	0x20000014
 8001a1c:	20000004 	.word	0x20000004
 8001a20:	20000010 	.word	0x20000010

08001a24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a28:	4b05      	ldr	r3, [pc, #20]	@ (8001a40 <HAL_IncTick+0x1c>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <HAL_IncTick+0x20>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4413      	add	r3, r2
 8001a32:	4a03      	ldr	r2, [pc, #12]	@ (8001a40 <HAL_IncTick+0x1c>)
 8001a34:	6013      	str	r3, [r2, #0]
}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	200001f8 	.word	0x200001f8
 8001a44:	20000014 	.word	0x20000014

08001a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a4c:	4b03      	ldr	r3, [pc, #12]	@ (8001a5c <HAL_GetTick+0x14>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	200001f8 	.word	0x200001f8

08001a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a68:	f7ff ffee 	bl	8001a48 <HAL_GetTick>
 8001a6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a78:	d004      	beq.n	8001a84 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a7a:	4b09      	ldr	r3, [pc, #36]	@ (8001aa0 <HAL_Delay+0x40>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	4413      	add	r3, r2
 8001a82:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a84:	bf00      	nop
 8001a86:	f7ff ffdf 	bl	8001a48 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d8f7      	bhi.n	8001a86 <HAL_Delay+0x26>
  {
  }
}
 8001a96:	bf00      	nop
 8001a98:	bf00      	nop
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000014 	.word	0x20000014

08001aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001acc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ad0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ad6:	4a04      	ldr	r2, [pc, #16]	@ (8001ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	60d3      	str	r3, [r2, #12]
}
 8001adc:	bf00      	nop
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af0:	4b04      	ldr	r3, [pc, #16]	@ (8001b04 <__NVIC_GetPriorityGrouping+0x18>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	0a1b      	lsrs	r3, r3, #8
 8001af6:	f003 0307 	and.w	r3, r3, #7
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	6039      	str	r1, [r7, #0]
 8001b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	db0a      	blt.n	8001b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	490c      	ldr	r1, [pc, #48]	@ (8001b54 <__NVIC_SetPriority+0x4c>)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	0112      	lsls	r2, r2, #4
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b30:	e00a      	b.n	8001b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4908      	ldr	r1, [pc, #32]	@ (8001b58 <__NVIC_SetPriority+0x50>)
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	3b04      	subs	r3, #4
 8001b40:	0112      	lsls	r2, r2, #4
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	440b      	add	r3, r1
 8001b46:	761a      	strb	r2, [r3, #24]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000e100 	.word	0xe000e100
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b089      	sub	sp, #36	@ 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f1c3 0307 	rsb	r3, r3, #7
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	bf28      	it	cs
 8001b7a:	2304      	movcs	r3, #4
 8001b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3304      	adds	r3, #4
 8001b82:	2b06      	cmp	r3, #6
 8001b84:	d902      	bls.n	8001b8c <NVIC_EncodePriority+0x30>
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3b03      	subs	r3, #3
 8001b8a:	e000      	b.n	8001b8e <NVIC_EncodePriority+0x32>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	43d9      	mvns	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	4313      	orrs	r3, r2
         );
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3724      	adds	r7, #36	@ 0x24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bd4:	d301      	bcc.n	8001bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00f      	b.n	8001bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bda:	4a0a      	ldr	r2, [pc, #40]	@ (8001c04 <SysTick_Config+0x40>)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be2:	210f      	movs	r1, #15
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001be8:	f7ff ff8e 	bl	8001b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bec:	4b05      	ldr	r3, [pc, #20]	@ (8001c04 <SysTick_Config+0x40>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf2:	4b04      	ldr	r3, [pc, #16]	@ (8001c04 <SysTick_Config+0x40>)
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	e000e010 	.word	0xe000e010

08001c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff ff47 	bl	8001aa4 <__NVIC_SetPriorityGrouping>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b086      	sub	sp, #24
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	4603      	mov	r3, r0
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	607a      	str	r2, [r7, #4]
 8001c2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c2c:	f7ff ff5e 	bl	8001aec <__NVIC_GetPriorityGrouping>
 8001c30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	68b9      	ldr	r1, [r7, #8]
 8001c36:	6978      	ldr	r0, [r7, #20]
 8001c38:	f7ff ff90 	bl	8001b5c <NVIC_EncodePriority>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c42:	4611      	mov	r1, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff5f 	bl	8001b08 <__NVIC_SetPriority>
}
 8001c4a:	bf00      	nop
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff ffb2 	bl	8001bc4 <SysTick_Config>
 8001c60:	4603      	mov	r3, r0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c7a:	e15a      	b.n	8001f32 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	2101      	movs	r1, #1
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	fa01 f303 	lsl.w	r3, r1, r3
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 814c 	beq.w	8001f2c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d005      	beq.n	8001cac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d130      	bne.n	8001d0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	2203      	movs	r2, #3
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	68da      	ldr	r2, [r3, #12]
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	091b      	lsrs	r3, r3, #4
 8001cf8:	f003 0201 	and.w	r2, r3, #1
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	d017      	beq.n	8001d4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	2203      	movs	r2, #3
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d123      	bne.n	8001d9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	08da      	lsrs	r2, r3, #3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3208      	adds	r2, #8
 8001d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	220f      	movs	r2, #15
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	4013      	ands	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	691a      	ldr	r2, [r3, #16]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	08da      	lsrs	r2, r3, #3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3208      	adds	r2, #8
 8001d98:	6939      	ldr	r1, [r7, #16]
 8001d9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	2203      	movs	r2, #3
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4013      	ands	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 0203 	and.w	r2, r3, #3
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 80a6 	beq.w	8001f2c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de0:	4b5b      	ldr	r3, [pc, #364]	@ (8001f50 <HAL_GPIO_Init+0x2e4>)
 8001de2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001de4:	4a5a      	ldr	r2, [pc, #360]	@ (8001f50 <HAL_GPIO_Init+0x2e4>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dec:	4b58      	ldr	r3, [pc, #352]	@ (8001f50 <HAL_GPIO_Init+0x2e4>)
 8001dee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001df8:	4a56      	ldr	r2, [pc, #344]	@ (8001f54 <HAL_GPIO_Init+0x2e8>)
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	089b      	lsrs	r3, r3, #2
 8001dfe:	3302      	adds	r3, #2
 8001e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	220f      	movs	r2, #15
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e22:	d01f      	beq.n	8001e64 <HAL_GPIO_Init+0x1f8>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a4c      	ldr	r2, [pc, #304]	@ (8001f58 <HAL_GPIO_Init+0x2ec>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d019      	beq.n	8001e60 <HAL_GPIO_Init+0x1f4>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a4b      	ldr	r2, [pc, #300]	@ (8001f5c <HAL_GPIO_Init+0x2f0>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d013      	beq.n	8001e5c <HAL_GPIO_Init+0x1f0>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a4a      	ldr	r2, [pc, #296]	@ (8001f60 <HAL_GPIO_Init+0x2f4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d00d      	beq.n	8001e58 <HAL_GPIO_Init+0x1ec>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a49      	ldr	r2, [pc, #292]	@ (8001f64 <HAL_GPIO_Init+0x2f8>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d007      	beq.n	8001e54 <HAL_GPIO_Init+0x1e8>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a48      	ldr	r2, [pc, #288]	@ (8001f68 <HAL_GPIO_Init+0x2fc>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d101      	bne.n	8001e50 <HAL_GPIO_Init+0x1e4>
 8001e4c:	2305      	movs	r3, #5
 8001e4e:	e00a      	b.n	8001e66 <HAL_GPIO_Init+0x1fa>
 8001e50:	2306      	movs	r3, #6
 8001e52:	e008      	b.n	8001e66 <HAL_GPIO_Init+0x1fa>
 8001e54:	2304      	movs	r3, #4
 8001e56:	e006      	b.n	8001e66 <HAL_GPIO_Init+0x1fa>
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e004      	b.n	8001e66 <HAL_GPIO_Init+0x1fa>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e002      	b.n	8001e66 <HAL_GPIO_Init+0x1fa>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <HAL_GPIO_Init+0x1fa>
 8001e64:	2300      	movs	r3, #0
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	f002 0203 	and.w	r2, r2, #3
 8001e6c:	0092      	lsls	r2, r2, #2
 8001e6e:	4093      	lsls	r3, r2
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e76:	4937      	ldr	r1, [pc, #220]	@ (8001f54 <HAL_GPIO_Init+0x2e8>)
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	089b      	lsrs	r3, r3, #2
 8001e7c:	3302      	adds	r3, #2
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e84:	4b39      	ldr	r3, [pc, #228]	@ (8001f6c <HAL_GPIO_Init+0x300>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4013      	ands	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ea8:	4a30      	ldr	r2, [pc, #192]	@ (8001f6c <HAL_GPIO_Init+0x300>)
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001eae:	4b2f      	ldr	r3, [pc, #188]	@ (8001f6c <HAL_GPIO_Init+0x300>)
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ed2:	4a26      	ldr	r2, [pc, #152]	@ (8001f6c <HAL_GPIO_Init+0x300>)
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ed8:	4b24      	ldr	r3, [pc, #144]	@ (8001f6c <HAL_GPIO_Init+0x300>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001efc:	4a1b      	ldr	r2, [pc, #108]	@ (8001f6c <HAL_GPIO_Init+0x300>)
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f02:	4b1a      	ldr	r3, [pc, #104]	@ (8001f6c <HAL_GPIO_Init+0x300>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f26:	4a11      	ldr	r2, [pc, #68]	@ (8001f6c <HAL_GPIO_Init+0x300>)
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f47f ae9d 	bne.w	8001c7c <HAL_GPIO_Init+0x10>
  }
}
 8001f42:	bf00      	nop
 8001f44:	bf00      	nop
 8001f46:	371c      	adds	r7, #28
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40010000 	.word	0x40010000
 8001f58:	48000400 	.word	0x48000400
 8001f5c:	48000800 	.word	0x48000800
 8001f60:	48000c00 	.word	0x48000c00
 8001f64:	48001000 	.word	0x48001000
 8001f68:	48001400 	.word	0x48001400
 8001f6c:	40010400 	.word	0x40010400

08001f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	807b      	strh	r3, [r7, #2]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f80:	787b      	ldrb	r3, [r7, #1]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f86:	887a      	ldrh	r2, [r7, #2]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f8c:	e002      	b.n	8001f94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f8e:	887a      	ldrh	r2, [r7, #2]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d141      	bne.n	8002032 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fae:	4b4b      	ldr	r3, [pc, #300]	@ (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fba:	d131      	bne.n	8002020 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fbc:	4b47      	ldr	r3, [pc, #284]	@ (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fc2:	4a46      	ldr	r2, [pc, #280]	@ (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fc8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fcc:	4b43      	ldr	r3, [pc, #268]	@ (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fd4:	4a41      	ldr	r2, [pc, #260]	@ (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fdc:	4b40      	ldr	r3, [pc, #256]	@ (80020e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2232      	movs	r2, #50	@ 0x32
 8001fe2:	fb02 f303 	mul.w	r3, r2, r3
 8001fe6:	4a3f      	ldr	r2, [pc, #252]	@ (80020e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fec:	0c9b      	lsrs	r3, r3, #18
 8001fee:	3301      	adds	r3, #1
 8001ff0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ff2:	e002      	b.n	8001ffa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ffa:	4b38      	ldr	r3, [pc, #224]	@ (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002006:	d102      	bne.n	800200e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f2      	bne.n	8001ff4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800200e:	4b33      	ldr	r3, [pc, #204]	@ (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002016:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800201a:	d158      	bne.n	80020ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e057      	b.n	80020d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002020:	4b2e      	ldr	r3, [pc, #184]	@ (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002022:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002026:	4a2d      	ldr	r2, [pc, #180]	@ (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002028:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800202c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002030:	e04d      	b.n	80020ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002038:	d141      	bne.n	80020be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800203a:	4b28      	ldr	r3, [pc, #160]	@ (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002042:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002046:	d131      	bne.n	80020ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002048:	4b24      	ldr	r3, [pc, #144]	@ (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800204a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800204e:	4a23      	ldr	r2, [pc, #140]	@ (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002050:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002054:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002058:	4b20      	ldr	r3, [pc, #128]	@ (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002060:	4a1e      	ldr	r2, [pc, #120]	@ (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002062:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002066:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002068:	4b1d      	ldr	r3, [pc, #116]	@ (80020e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2232      	movs	r2, #50	@ 0x32
 800206e:	fb02 f303 	mul.w	r3, r2, r3
 8002072:	4a1c      	ldr	r2, [pc, #112]	@ (80020e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002074:	fba2 2303 	umull	r2, r3, r2, r3
 8002078:	0c9b      	lsrs	r3, r3, #18
 800207a:	3301      	adds	r3, #1
 800207c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800207e:	e002      	b.n	8002086 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	3b01      	subs	r3, #1
 8002084:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002086:	4b15      	ldr	r3, [pc, #84]	@ (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800208e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002092:	d102      	bne.n	800209a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f2      	bne.n	8002080 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800209a:	4b10      	ldr	r3, [pc, #64]	@ (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020a6:	d112      	bne.n	80020ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e011      	b.n	80020d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020ac:	4b0b      	ldr	r3, [pc, #44]	@ (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020b2:	4a0a      	ldr	r2, [pc, #40]	@ (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80020bc:	e007      	b.n	80020ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020be:	4b07      	ldr	r3, [pc, #28]	@ (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020c6:	4a05      	ldr	r2, [pc, #20]	@ (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	40007000 	.word	0x40007000
 80020e0:	20000004 	.word	0x20000004
 80020e4:	431bde83 	.word	0x431bde83

080020e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80020ec:	4b05      	ldr	r3, [pc, #20]	@ (8002104 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	4a04      	ldr	r2, [pc, #16]	@ (8002104 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80020f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020f6:	6093      	str	r3, [r2, #8]
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40007000 	.word	0x40007000

08002108 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b088      	sub	sp, #32
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e2fe      	b.n	8002718 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d075      	beq.n	8002212 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002126:	4b97      	ldr	r3, [pc, #604]	@ (8002384 <HAL_RCC_OscConfig+0x27c>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 030c 	and.w	r3, r3, #12
 800212e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002130:	4b94      	ldr	r3, [pc, #592]	@ (8002384 <HAL_RCC_OscConfig+0x27c>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	2b0c      	cmp	r3, #12
 800213e:	d102      	bne.n	8002146 <HAL_RCC_OscConfig+0x3e>
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	2b03      	cmp	r3, #3
 8002144:	d002      	beq.n	800214c <HAL_RCC_OscConfig+0x44>
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	2b08      	cmp	r3, #8
 800214a:	d10b      	bne.n	8002164 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800214c:	4b8d      	ldr	r3, [pc, #564]	@ (8002384 <HAL_RCC_OscConfig+0x27c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d05b      	beq.n	8002210 <HAL_RCC_OscConfig+0x108>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d157      	bne.n	8002210 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e2d9      	b.n	8002718 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800216c:	d106      	bne.n	800217c <HAL_RCC_OscConfig+0x74>
 800216e:	4b85      	ldr	r3, [pc, #532]	@ (8002384 <HAL_RCC_OscConfig+0x27c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a84      	ldr	r2, [pc, #528]	@ (8002384 <HAL_RCC_OscConfig+0x27c>)
 8002174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	e01d      	b.n	80021b8 <HAL_RCC_OscConfig+0xb0>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002184:	d10c      	bne.n	80021a0 <HAL_RCC_OscConfig+0x98>
 8002186:	4b7f      	ldr	r3, [pc, #508]	@ (8002384 <HAL_RCC_OscConfig+0x27c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a7e      	ldr	r2, [pc, #504]	@ (8002384 <HAL_RCC_OscConfig+0x27c>)
 800218c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	4b7c      	ldr	r3, [pc, #496]	@ (8002384 <HAL_RCC_OscConfig+0x27c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a7b      	ldr	r2, [pc, #492]	@ (8002384 <HAL_RCC_OscConfig+0x27c>)
 8002198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	e00b      	b.n	80021b8 <HAL_RCC_OscConfig+0xb0>
 80021a0:	4b78      	ldr	r3, [pc, #480]	@ (8002384 <HAL_RCC_OscConfig+0x27c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a77      	ldr	r2, [pc, #476]	@ (8002384 <HAL_RCC_OscConfig+0x27c>)
 80021a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	4b75      	ldr	r3, [pc, #468]	@ (8002384 <HAL_RCC_OscConfig+0x27c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a74      	ldr	r2, [pc, #464]	@ (8002384 <HAL_RCC_OscConfig+0x27c>)
 80021b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d013      	beq.n	80021e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c0:	f7ff fc42 	bl	8001a48 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c8:	f7ff fc3e 	bl	8001a48 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b64      	cmp	r3, #100	@ 0x64
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e29e      	b.n	8002718 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021da:	4b6a      	ldr	r3, [pc, #424]	@ (8002384 <HAL_RCC_OscConfig+0x27c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f0      	beq.n	80021c8 <HAL_RCC_OscConfig+0xc0>
 80021e6:	e014      	b.n	8002212 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e8:	f7ff fc2e 	bl	8001a48 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f0:	f7ff fc2a 	bl	8001a48 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b64      	cmp	r3, #100	@ 0x64
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e28a      	b.n	8002718 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002202:	4b60      	ldr	r3, [pc, #384]	@ (8002384 <HAL_RCC_OscConfig+0x27c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0xe8>
 800220e:	e000      	b.n	8002212 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d075      	beq.n	800230a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800221e:	4b59      	ldr	r3, [pc, #356]	@ (8002384 <HAL_RCC_OscConfig+0x27c>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002228:	4b56      	ldr	r3, [pc, #344]	@ (8002384 <HAL_RCC_OscConfig+0x27c>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	2b0c      	cmp	r3, #12
 8002236:	d102      	bne.n	800223e <HAL_RCC_OscConfig+0x136>
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d002      	beq.n	8002244 <HAL_RCC_OscConfig+0x13c>
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	2b04      	cmp	r3, #4
 8002242:	d11f      	bne.n	8002284 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002244:	4b4f      	ldr	r3, [pc, #316]	@ (8002384 <HAL_RCC_OscConfig+0x27c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800224c:	2b00      	cmp	r3, #0
 800224e:	d005      	beq.n	800225c <HAL_RCC_OscConfig+0x154>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e25d      	b.n	8002718 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225c:	4b49      	ldr	r3, [pc, #292]	@ (8002384 <HAL_RCC_OscConfig+0x27c>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	061b      	lsls	r3, r3, #24
 800226a:	4946      	ldr	r1, [pc, #280]	@ (8002384 <HAL_RCC_OscConfig+0x27c>)
 800226c:	4313      	orrs	r3, r2
 800226e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002270:	4b45      	ldr	r3, [pc, #276]	@ (8002388 <HAL_RCC_OscConfig+0x280>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fb9b 	bl	80019b0 <HAL_InitTick>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d043      	beq.n	8002308 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e249      	b.n	8002718 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d023      	beq.n	80022d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800228c:	4b3d      	ldr	r3, [pc, #244]	@ (8002384 <HAL_RCC_OscConfig+0x27c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a3c      	ldr	r2, [pc, #240]	@ (8002384 <HAL_RCC_OscConfig+0x27c>)
 8002292:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002296:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002298:	f7ff fbd6 	bl	8001a48 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a0:	f7ff fbd2 	bl	8001a48 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e232      	b.n	8002718 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022b2:	4b34      	ldr	r3, [pc, #208]	@ (8002384 <HAL_RCC_OscConfig+0x27c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022be:	4b31      	ldr	r3, [pc, #196]	@ (8002384 <HAL_RCC_OscConfig+0x27c>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	061b      	lsls	r3, r3, #24
 80022cc:	492d      	ldr	r1, [pc, #180]	@ (8002384 <HAL_RCC_OscConfig+0x27c>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	604b      	str	r3, [r1, #4]
 80022d2:	e01a      	b.n	800230a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002384 <HAL_RCC_OscConfig+0x27c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a2a      	ldr	r2, [pc, #168]	@ (8002384 <HAL_RCC_OscConfig+0x27c>)
 80022da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e0:	f7ff fbb2 	bl	8001a48 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e8:	f7ff fbae 	bl	8001a48 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e20e      	b.n	8002718 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022fa:	4b22      	ldr	r3, [pc, #136]	@ (8002384 <HAL_RCC_OscConfig+0x27c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f0      	bne.n	80022e8 <HAL_RCC_OscConfig+0x1e0>
 8002306:	e000      	b.n	800230a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002308:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b00      	cmp	r3, #0
 8002314:	d041      	beq.n	800239a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d01c      	beq.n	8002358 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800231e:	4b19      	ldr	r3, [pc, #100]	@ (8002384 <HAL_RCC_OscConfig+0x27c>)
 8002320:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002324:	4a17      	ldr	r2, [pc, #92]	@ (8002384 <HAL_RCC_OscConfig+0x27c>)
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232e:	f7ff fb8b 	bl	8001a48 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002336:	f7ff fb87 	bl	8001a48 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e1e7      	b.n	8002718 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002348:	4b0e      	ldr	r3, [pc, #56]	@ (8002384 <HAL_RCC_OscConfig+0x27c>)
 800234a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0ef      	beq.n	8002336 <HAL_RCC_OscConfig+0x22e>
 8002356:	e020      	b.n	800239a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002358:	4b0a      	ldr	r3, [pc, #40]	@ (8002384 <HAL_RCC_OscConfig+0x27c>)
 800235a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800235e:	4a09      	ldr	r2, [pc, #36]	@ (8002384 <HAL_RCC_OscConfig+0x27c>)
 8002360:	f023 0301 	bic.w	r3, r3, #1
 8002364:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002368:	f7ff fb6e 	bl	8001a48 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800236e:	e00d      	b.n	800238c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002370:	f7ff fb6a 	bl	8001a48 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d906      	bls.n	800238c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e1ca      	b.n	8002718 <HAL_RCC_OscConfig+0x610>
 8002382:	bf00      	nop
 8002384:	40021000 	.word	0x40021000
 8002388:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800238c:	4b8c      	ldr	r3, [pc, #560]	@ (80025c0 <HAL_RCC_OscConfig+0x4b8>)
 800238e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1ea      	bne.n	8002370 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0304 	and.w	r3, r3, #4
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 80a6 	beq.w	80024f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023a8:	2300      	movs	r3, #0
 80023aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023ac:	4b84      	ldr	r3, [pc, #528]	@ (80025c0 <HAL_RCC_OscConfig+0x4b8>)
 80023ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_OscConfig+0x2b4>
 80023b8:	2301      	movs	r3, #1
 80023ba:	e000      	b.n	80023be <HAL_RCC_OscConfig+0x2b6>
 80023bc:	2300      	movs	r3, #0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00d      	beq.n	80023de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023c2:	4b7f      	ldr	r3, [pc, #508]	@ (80025c0 <HAL_RCC_OscConfig+0x4b8>)
 80023c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c6:	4a7e      	ldr	r2, [pc, #504]	@ (80025c0 <HAL_RCC_OscConfig+0x4b8>)
 80023c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80023ce:	4b7c      	ldr	r3, [pc, #496]	@ (80025c0 <HAL_RCC_OscConfig+0x4b8>)
 80023d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023da:	2301      	movs	r3, #1
 80023dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023de:	4b79      	ldr	r3, [pc, #484]	@ (80025c4 <HAL_RCC_OscConfig+0x4bc>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d118      	bne.n	800241c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023ea:	4b76      	ldr	r3, [pc, #472]	@ (80025c4 <HAL_RCC_OscConfig+0x4bc>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a75      	ldr	r2, [pc, #468]	@ (80025c4 <HAL_RCC_OscConfig+0x4bc>)
 80023f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023f6:	f7ff fb27 	bl	8001a48 <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023fe:	f7ff fb23 	bl	8001a48 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e183      	b.n	8002718 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002410:	4b6c      	ldr	r3, [pc, #432]	@ (80025c4 <HAL_RCC_OscConfig+0x4bc>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0f0      	beq.n	80023fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d108      	bne.n	8002436 <HAL_RCC_OscConfig+0x32e>
 8002424:	4b66      	ldr	r3, [pc, #408]	@ (80025c0 <HAL_RCC_OscConfig+0x4b8>)
 8002426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800242a:	4a65      	ldr	r2, [pc, #404]	@ (80025c0 <HAL_RCC_OscConfig+0x4b8>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002434:	e024      	b.n	8002480 <HAL_RCC_OscConfig+0x378>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b05      	cmp	r3, #5
 800243c:	d110      	bne.n	8002460 <HAL_RCC_OscConfig+0x358>
 800243e:	4b60      	ldr	r3, [pc, #384]	@ (80025c0 <HAL_RCC_OscConfig+0x4b8>)
 8002440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002444:	4a5e      	ldr	r2, [pc, #376]	@ (80025c0 <HAL_RCC_OscConfig+0x4b8>)
 8002446:	f043 0304 	orr.w	r3, r3, #4
 800244a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800244e:	4b5c      	ldr	r3, [pc, #368]	@ (80025c0 <HAL_RCC_OscConfig+0x4b8>)
 8002450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002454:	4a5a      	ldr	r2, [pc, #360]	@ (80025c0 <HAL_RCC_OscConfig+0x4b8>)
 8002456:	f043 0301 	orr.w	r3, r3, #1
 800245a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800245e:	e00f      	b.n	8002480 <HAL_RCC_OscConfig+0x378>
 8002460:	4b57      	ldr	r3, [pc, #348]	@ (80025c0 <HAL_RCC_OscConfig+0x4b8>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002466:	4a56      	ldr	r2, [pc, #344]	@ (80025c0 <HAL_RCC_OscConfig+0x4b8>)
 8002468:	f023 0301 	bic.w	r3, r3, #1
 800246c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002470:	4b53      	ldr	r3, [pc, #332]	@ (80025c0 <HAL_RCC_OscConfig+0x4b8>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002476:	4a52      	ldr	r2, [pc, #328]	@ (80025c0 <HAL_RCC_OscConfig+0x4b8>)
 8002478:	f023 0304 	bic.w	r3, r3, #4
 800247c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d016      	beq.n	80024b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002488:	f7ff fade 	bl	8001a48 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800248e:	e00a      	b.n	80024a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002490:	f7ff fada 	bl	8001a48 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800249e:	4293      	cmp	r3, r2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e138      	b.n	8002718 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024a6:	4b46      	ldr	r3, [pc, #280]	@ (80025c0 <HAL_RCC_OscConfig+0x4b8>)
 80024a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0ed      	beq.n	8002490 <HAL_RCC_OscConfig+0x388>
 80024b4:	e015      	b.n	80024e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b6:	f7ff fac7 	bl	8001a48 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024bc:	e00a      	b.n	80024d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024be:	f7ff fac3 	bl	8001a48 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e121      	b.n	8002718 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024d4:	4b3a      	ldr	r3, [pc, #232]	@ (80025c0 <HAL_RCC_OscConfig+0x4b8>)
 80024d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1ed      	bne.n	80024be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024e2:	7ffb      	ldrb	r3, [r7, #31]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d105      	bne.n	80024f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e8:	4b35      	ldr	r3, [pc, #212]	@ (80025c0 <HAL_RCC_OscConfig+0x4b8>)
 80024ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ec:	4a34      	ldr	r2, [pc, #208]	@ (80025c0 <HAL_RCC_OscConfig+0x4b8>)
 80024ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024f2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0320 	and.w	r3, r3, #32
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d03c      	beq.n	800257a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d01c      	beq.n	8002542 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002508:	4b2d      	ldr	r3, [pc, #180]	@ (80025c0 <HAL_RCC_OscConfig+0x4b8>)
 800250a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800250e:	4a2c      	ldr	r2, [pc, #176]	@ (80025c0 <HAL_RCC_OscConfig+0x4b8>)
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002518:	f7ff fa96 	bl	8001a48 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002520:	f7ff fa92 	bl	8001a48 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e0f2      	b.n	8002718 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002532:	4b23      	ldr	r3, [pc, #140]	@ (80025c0 <HAL_RCC_OscConfig+0x4b8>)
 8002534:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0ef      	beq.n	8002520 <HAL_RCC_OscConfig+0x418>
 8002540:	e01b      	b.n	800257a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002542:	4b1f      	ldr	r3, [pc, #124]	@ (80025c0 <HAL_RCC_OscConfig+0x4b8>)
 8002544:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002548:	4a1d      	ldr	r2, [pc, #116]	@ (80025c0 <HAL_RCC_OscConfig+0x4b8>)
 800254a:	f023 0301 	bic.w	r3, r3, #1
 800254e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002552:	f7ff fa79 	bl	8001a48 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800255a:	f7ff fa75 	bl	8001a48 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e0d5      	b.n	8002718 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800256c:	4b14      	ldr	r3, [pc, #80]	@ (80025c0 <HAL_RCC_OscConfig+0x4b8>)
 800256e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1ef      	bne.n	800255a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 80c9 	beq.w	8002716 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002584:	4b0e      	ldr	r3, [pc, #56]	@ (80025c0 <HAL_RCC_OscConfig+0x4b8>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 030c 	and.w	r3, r3, #12
 800258c:	2b0c      	cmp	r3, #12
 800258e:	f000 8083 	beq.w	8002698 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d15e      	bne.n	8002658 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259a:	4b09      	ldr	r3, [pc, #36]	@ (80025c0 <HAL_RCC_OscConfig+0x4b8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a08      	ldr	r2, [pc, #32]	@ (80025c0 <HAL_RCC_OscConfig+0x4b8>)
 80025a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a6:	f7ff fa4f 	bl	8001a48 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025ac:	e00c      	b.n	80025c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ae:	f7ff fa4b 	bl	8001a48 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d905      	bls.n	80025c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e0ab      	b.n	8002718 <HAL_RCC_OscConfig+0x610>
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025c8:	4b55      	ldr	r3, [pc, #340]	@ (8002720 <HAL_RCC_OscConfig+0x618>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1ec      	bne.n	80025ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025d4:	4b52      	ldr	r3, [pc, #328]	@ (8002720 <HAL_RCC_OscConfig+0x618>)
 80025d6:	68da      	ldr	r2, [r3, #12]
 80025d8:	4b52      	ldr	r3, [pc, #328]	@ (8002724 <HAL_RCC_OscConfig+0x61c>)
 80025da:	4013      	ands	r3, r2
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6a11      	ldr	r1, [r2, #32]
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025e4:	3a01      	subs	r2, #1
 80025e6:	0112      	lsls	r2, r2, #4
 80025e8:	4311      	orrs	r1, r2
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80025ee:	0212      	lsls	r2, r2, #8
 80025f0:	4311      	orrs	r1, r2
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80025f6:	0852      	lsrs	r2, r2, #1
 80025f8:	3a01      	subs	r2, #1
 80025fa:	0552      	lsls	r2, r2, #21
 80025fc:	4311      	orrs	r1, r2
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002602:	0852      	lsrs	r2, r2, #1
 8002604:	3a01      	subs	r2, #1
 8002606:	0652      	lsls	r2, r2, #25
 8002608:	4311      	orrs	r1, r2
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800260e:	06d2      	lsls	r2, r2, #27
 8002610:	430a      	orrs	r2, r1
 8002612:	4943      	ldr	r1, [pc, #268]	@ (8002720 <HAL_RCC_OscConfig+0x618>)
 8002614:	4313      	orrs	r3, r2
 8002616:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002618:	4b41      	ldr	r3, [pc, #260]	@ (8002720 <HAL_RCC_OscConfig+0x618>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a40      	ldr	r2, [pc, #256]	@ (8002720 <HAL_RCC_OscConfig+0x618>)
 800261e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002622:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002624:	4b3e      	ldr	r3, [pc, #248]	@ (8002720 <HAL_RCC_OscConfig+0x618>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	4a3d      	ldr	r2, [pc, #244]	@ (8002720 <HAL_RCC_OscConfig+0x618>)
 800262a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800262e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002630:	f7ff fa0a 	bl	8001a48 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002638:	f7ff fa06 	bl	8001a48 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e066      	b.n	8002718 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800264a:	4b35      	ldr	r3, [pc, #212]	@ (8002720 <HAL_RCC_OscConfig+0x618>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f0      	beq.n	8002638 <HAL_RCC_OscConfig+0x530>
 8002656:	e05e      	b.n	8002716 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002658:	4b31      	ldr	r3, [pc, #196]	@ (8002720 <HAL_RCC_OscConfig+0x618>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a30      	ldr	r2, [pc, #192]	@ (8002720 <HAL_RCC_OscConfig+0x618>)
 800265e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002662:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002664:	f7ff f9f0 	bl	8001a48 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266c:	f7ff f9ec 	bl	8001a48 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e04c      	b.n	8002718 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800267e:	4b28      	ldr	r3, [pc, #160]	@ (8002720 <HAL_RCC_OscConfig+0x618>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f0      	bne.n	800266c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800268a:	4b25      	ldr	r3, [pc, #148]	@ (8002720 <HAL_RCC_OscConfig+0x618>)
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	4924      	ldr	r1, [pc, #144]	@ (8002720 <HAL_RCC_OscConfig+0x618>)
 8002690:	4b25      	ldr	r3, [pc, #148]	@ (8002728 <HAL_RCC_OscConfig+0x620>)
 8002692:	4013      	ands	r3, r2
 8002694:	60cb      	str	r3, [r1, #12]
 8002696:	e03e      	b.n	8002716 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e039      	b.n	8002718 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80026a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002720 <HAL_RCC_OscConfig+0x618>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f003 0203 	and.w	r2, r3, #3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d12c      	bne.n	8002712 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c2:	3b01      	subs	r3, #1
 80026c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d123      	bne.n	8002712 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d11b      	bne.n	8002712 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d113      	bne.n	8002712 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f4:	085b      	lsrs	r3, r3, #1
 80026f6:	3b01      	subs	r3, #1
 80026f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d109      	bne.n	8002712 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002708:	085b      	lsrs	r3, r3, #1
 800270a:	3b01      	subs	r3, #1
 800270c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800270e:	429a      	cmp	r2, r3
 8002710:	d001      	beq.n	8002716 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3720      	adds	r7, #32
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40021000 	.word	0x40021000
 8002724:	019f800c 	.word	0x019f800c
 8002728:	feeefffc 	.word	0xfeeefffc

0800272c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e11e      	b.n	8002982 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002744:	4b91      	ldr	r3, [pc, #580]	@ (800298c <HAL_RCC_ClockConfig+0x260>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 030f 	and.w	r3, r3, #15
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	d910      	bls.n	8002774 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002752:	4b8e      	ldr	r3, [pc, #568]	@ (800298c <HAL_RCC_ClockConfig+0x260>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 020f 	bic.w	r2, r3, #15
 800275a:	498c      	ldr	r1, [pc, #560]	@ (800298c <HAL_RCC_ClockConfig+0x260>)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	4313      	orrs	r3, r2
 8002760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002762:	4b8a      	ldr	r3, [pc, #552]	@ (800298c <HAL_RCC_ClockConfig+0x260>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	429a      	cmp	r2, r3
 800276e:	d001      	beq.n	8002774 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e106      	b.n	8002982 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	d073      	beq.n	8002868 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b03      	cmp	r3, #3
 8002786:	d129      	bne.n	80027dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002788:	4b81      	ldr	r3, [pc, #516]	@ (8002990 <HAL_RCC_ClockConfig+0x264>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e0f4      	b.n	8002982 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002798:	f000 f99e 	bl	8002ad8 <RCC_GetSysClockFreqFromPLLSource>
 800279c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4a7c      	ldr	r2, [pc, #496]	@ (8002994 <HAL_RCC_ClockConfig+0x268>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d93f      	bls.n	8002826 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80027a6:	4b7a      	ldr	r3, [pc, #488]	@ (8002990 <HAL_RCC_ClockConfig+0x264>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d009      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d033      	beq.n	8002826 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d12f      	bne.n	8002826 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027c6:	4b72      	ldr	r3, [pc, #456]	@ (8002990 <HAL_RCC_ClockConfig+0x264>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027ce:	4a70      	ldr	r2, [pc, #448]	@ (8002990 <HAL_RCC_ClockConfig+0x264>)
 80027d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80027d6:	2380      	movs	r3, #128	@ 0x80
 80027d8:	617b      	str	r3, [r7, #20]
 80027da:	e024      	b.n	8002826 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d107      	bne.n	80027f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027e4:	4b6a      	ldr	r3, [pc, #424]	@ (8002990 <HAL_RCC_ClockConfig+0x264>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d109      	bne.n	8002804 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0c6      	b.n	8002982 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027f4:	4b66      	ldr	r3, [pc, #408]	@ (8002990 <HAL_RCC_ClockConfig+0x264>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0be      	b.n	8002982 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002804:	f000 f8ce 	bl	80029a4 <HAL_RCC_GetSysClockFreq>
 8002808:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4a61      	ldr	r2, [pc, #388]	@ (8002994 <HAL_RCC_ClockConfig+0x268>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d909      	bls.n	8002826 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002812:	4b5f      	ldr	r3, [pc, #380]	@ (8002990 <HAL_RCC_ClockConfig+0x264>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800281a:	4a5d      	ldr	r2, [pc, #372]	@ (8002990 <HAL_RCC_ClockConfig+0x264>)
 800281c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002820:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002822:	2380      	movs	r3, #128	@ 0x80
 8002824:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002826:	4b5a      	ldr	r3, [pc, #360]	@ (8002990 <HAL_RCC_ClockConfig+0x264>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f023 0203 	bic.w	r2, r3, #3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	4957      	ldr	r1, [pc, #348]	@ (8002990 <HAL_RCC_ClockConfig+0x264>)
 8002834:	4313      	orrs	r3, r2
 8002836:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002838:	f7ff f906 	bl	8001a48 <HAL_GetTick>
 800283c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283e:	e00a      	b.n	8002856 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002840:	f7ff f902 	bl	8001a48 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e095      	b.n	8002982 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002856:	4b4e      	ldr	r3, [pc, #312]	@ (8002990 <HAL_RCC_ClockConfig+0x264>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 020c 	and.w	r2, r3, #12
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	429a      	cmp	r2, r3
 8002866:	d1eb      	bne.n	8002840 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d023      	beq.n	80028bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	d005      	beq.n	800288c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002880:	4b43      	ldr	r3, [pc, #268]	@ (8002990 <HAL_RCC_ClockConfig+0x264>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	4a42      	ldr	r2, [pc, #264]	@ (8002990 <HAL_RCC_ClockConfig+0x264>)
 8002886:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800288a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0308 	and.w	r3, r3, #8
 8002894:	2b00      	cmp	r3, #0
 8002896:	d007      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002898:	4b3d      	ldr	r3, [pc, #244]	@ (8002990 <HAL_RCC_ClockConfig+0x264>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80028a0:	4a3b      	ldr	r2, [pc, #236]	@ (8002990 <HAL_RCC_ClockConfig+0x264>)
 80028a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80028a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a8:	4b39      	ldr	r3, [pc, #228]	@ (8002990 <HAL_RCC_ClockConfig+0x264>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	4936      	ldr	r1, [pc, #216]	@ (8002990 <HAL_RCC_ClockConfig+0x264>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	608b      	str	r3, [r1, #8]
 80028ba:	e008      	b.n	80028ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	2b80      	cmp	r3, #128	@ 0x80
 80028c0:	d105      	bne.n	80028ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80028c2:	4b33      	ldr	r3, [pc, #204]	@ (8002990 <HAL_RCC_ClockConfig+0x264>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	4a32      	ldr	r2, [pc, #200]	@ (8002990 <HAL_RCC_ClockConfig+0x264>)
 80028c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028ce:	4b2f      	ldr	r3, [pc, #188]	@ (800298c <HAL_RCC_ClockConfig+0x260>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d21d      	bcs.n	8002918 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028dc:	4b2b      	ldr	r3, [pc, #172]	@ (800298c <HAL_RCC_ClockConfig+0x260>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f023 020f 	bic.w	r2, r3, #15
 80028e4:	4929      	ldr	r1, [pc, #164]	@ (800298c <HAL_RCC_ClockConfig+0x260>)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028ec:	f7ff f8ac 	bl	8001a48 <HAL_GetTick>
 80028f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f2:	e00a      	b.n	800290a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f4:	f7ff f8a8 	bl	8001a48 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002902:	4293      	cmp	r3, r2
 8002904:	d901      	bls.n	800290a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e03b      	b.n	8002982 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800290a:	4b20      	ldr	r3, [pc, #128]	@ (800298c <HAL_RCC_ClockConfig+0x260>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d1ed      	bne.n	80028f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002924:	4b1a      	ldr	r3, [pc, #104]	@ (8002990 <HAL_RCC_ClockConfig+0x264>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4917      	ldr	r1, [pc, #92]	@ (8002990 <HAL_RCC_ClockConfig+0x264>)
 8002932:	4313      	orrs	r3, r2
 8002934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d009      	beq.n	8002956 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002942:	4b13      	ldr	r3, [pc, #76]	@ (8002990 <HAL_RCC_ClockConfig+0x264>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	490f      	ldr	r1, [pc, #60]	@ (8002990 <HAL_RCC_ClockConfig+0x264>)
 8002952:	4313      	orrs	r3, r2
 8002954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002956:	f000 f825 	bl	80029a4 <HAL_RCC_GetSysClockFreq>
 800295a:	4602      	mov	r2, r0
 800295c:	4b0c      	ldr	r3, [pc, #48]	@ (8002990 <HAL_RCC_ClockConfig+0x264>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	091b      	lsrs	r3, r3, #4
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	490c      	ldr	r1, [pc, #48]	@ (8002998 <HAL_RCC_ClockConfig+0x26c>)
 8002968:	5ccb      	ldrb	r3, [r1, r3]
 800296a:	f003 031f 	and.w	r3, r3, #31
 800296e:	fa22 f303 	lsr.w	r3, r2, r3
 8002972:	4a0a      	ldr	r2, [pc, #40]	@ (800299c <HAL_RCC_ClockConfig+0x270>)
 8002974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002976:	4b0a      	ldr	r3, [pc, #40]	@ (80029a0 <HAL_RCC_ClockConfig+0x274>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff f818 	bl	80019b0 <HAL_InitTick>
 8002980:	4603      	mov	r3, r0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3718      	adds	r7, #24
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40022000 	.word	0x40022000
 8002990:	40021000 	.word	0x40021000
 8002994:	04c4b400 	.word	0x04c4b400
 8002998:	08004e60 	.word	0x08004e60
 800299c:	20000004 	.word	0x20000004
 80029a0:	20000010 	.word	0x20000010

080029a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80029aa:	4b2c      	ldr	r3, [pc, #176]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0xb8>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d102      	bne.n	80029bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002a60 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	e047      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80029bc:	4b27      	ldr	r3, [pc, #156]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0xb8>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 030c 	and.w	r3, r3, #12
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	d102      	bne.n	80029ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029c8:	4b26      	ldr	r3, [pc, #152]	@ (8002a64 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	e03e      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80029ce:	4b23      	ldr	r3, [pc, #140]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0xb8>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 030c 	and.w	r3, r3, #12
 80029d6:	2b0c      	cmp	r3, #12
 80029d8:	d136      	bne.n	8002a48 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029da:	4b20      	ldr	r3, [pc, #128]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0xb8>)
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029e4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0xb8>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	091b      	lsrs	r3, r3, #4
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	3301      	adds	r3, #1
 80029f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d10c      	bne.n	8002a12 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029f8:	4a1a      	ldr	r2, [pc, #104]	@ (8002a64 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a00:	4a16      	ldr	r2, [pc, #88]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a02:	68d2      	ldr	r2, [r2, #12]
 8002a04:	0a12      	lsrs	r2, r2, #8
 8002a06:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a0a:	fb02 f303 	mul.w	r3, r2, r3
 8002a0e:	617b      	str	r3, [r7, #20]
      break;
 8002a10:	e00c      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a12:	4a13      	ldr	r2, [pc, #76]	@ (8002a60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1a:	4a10      	ldr	r2, [pc, #64]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a1c:	68d2      	ldr	r2, [r2, #12]
 8002a1e:	0a12      	lsrs	r2, r2, #8
 8002a20:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a24:	fb02 f303 	mul.w	r3, r2, r3
 8002a28:	617b      	str	r3, [r7, #20]
      break;
 8002a2a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	0e5b      	lsrs	r3, r3, #25
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	3301      	adds	r3, #1
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	e001      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a4c:	693b      	ldr	r3, [r7, #16]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	371c      	adds	r7, #28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	00f42400 	.word	0x00f42400
 8002a64:	007a1200 	.word	0x007a1200

08002a68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a6c:	4b03      	ldr	r3, [pc, #12]	@ (8002a7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	20000004 	.word	0x20000004

08002a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a84:	f7ff fff0 	bl	8002a68 <HAL_RCC_GetHCLKFreq>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	4b06      	ldr	r3, [pc, #24]	@ (8002aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	0a1b      	lsrs	r3, r3, #8
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	4904      	ldr	r1, [pc, #16]	@ (8002aa8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a96:	5ccb      	ldrb	r3, [r1, r3]
 8002a98:	f003 031f 	and.w	r3, r3, #31
 8002a9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	08004e70 	.word	0x08004e70

08002aac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ab0:	f7ff ffda 	bl	8002a68 <HAL_RCC_GetHCLKFreq>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	4b06      	ldr	r3, [pc, #24]	@ (8002ad0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	0adb      	lsrs	r3, r3, #11
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	4904      	ldr	r1, [pc, #16]	@ (8002ad4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ac2:	5ccb      	ldrb	r3, [r1, r3]
 8002ac4:	f003 031f 	and.w	r3, r3, #31
 8002ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	08004e70 	.word	0x08004e70

08002ad8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b087      	sub	sp, #28
 8002adc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ade:	4b1e      	ldr	r3, [pc, #120]	@ (8002b58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	3301      	adds	r3, #1
 8002af4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d10c      	bne.n	8002b16 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002afc:	4a17      	ldr	r2, [pc, #92]	@ (8002b5c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b04:	4a14      	ldr	r2, [pc, #80]	@ (8002b58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b06:	68d2      	ldr	r2, [r2, #12]
 8002b08:	0a12      	lsrs	r2, r2, #8
 8002b0a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b0e:	fb02 f303 	mul.w	r3, r2, r3
 8002b12:	617b      	str	r3, [r7, #20]
    break;
 8002b14:	e00c      	b.n	8002b30 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b16:	4a12      	ldr	r2, [pc, #72]	@ (8002b60 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1e:	4a0e      	ldr	r2, [pc, #56]	@ (8002b58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b20:	68d2      	ldr	r2, [r2, #12]
 8002b22:	0a12      	lsrs	r2, r2, #8
 8002b24:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b28:	fb02 f303 	mul.w	r3, r2, r3
 8002b2c:	617b      	str	r3, [r7, #20]
    break;
 8002b2e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b30:	4b09      	ldr	r3, [pc, #36]	@ (8002b58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	0e5b      	lsrs	r3, r3, #25
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b48:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002b4a:	687b      	ldr	r3, [r7, #4]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	371c      	adds	r7, #28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	007a1200 	.word	0x007a1200
 8002b60:	00f42400 	.word	0x00f42400

08002b64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b70:	2300      	movs	r3, #0
 8002b72:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 8098 	beq.w	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b82:	2300      	movs	r3, #0
 8002b84:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b86:	4b43      	ldr	r3, [pc, #268]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10d      	bne.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b92:	4b40      	ldr	r3, [pc, #256]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b96:	4a3f      	ldr	r2, [pc, #252]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b9e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ba6:	60bb      	str	r3, [r7, #8]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002baa:	2301      	movs	r3, #1
 8002bac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bae:	4b3a      	ldr	r3, [pc, #232]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a39      	ldr	r2, [pc, #228]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002bb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bb8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bba:	f7fe ff45 	bl	8001a48 <HAL_GetTick>
 8002bbe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bc0:	e009      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc2:	f7fe ff41 	bl	8001a48 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d902      	bls.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	74fb      	strb	r3, [r7, #19]
        break;
 8002bd4:	e005      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bd6:	4b30      	ldr	r3, [pc, #192]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0ef      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002be2:	7cfb      	ldrb	r3, [r7, #19]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d159      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002be8:	4b2a      	ldr	r3, [pc, #168]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bf2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d01e      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d019      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c04:	4b23      	ldr	r3, [pc, #140]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c10:	4b20      	ldr	r3, [pc, #128]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c16:	4a1f      	ldr	r2, [pc, #124]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c20:	4b1c      	ldr	r3, [pc, #112]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c26:	4a1b      	ldr	r2, [pc, #108]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c30:	4a18      	ldr	r2, [pc, #96]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d016      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c42:	f7fe ff01 	bl	8001a48 <HAL_GetTick>
 8002c46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c48:	e00b      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c4a:	f7fe fefd 	bl	8001a48 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d902      	bls.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	74fb      	strb	r3, [r7, #19]
            break;
 8002c60:	e006      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c62:	4b0c      	ldr	r3, [pc, #48]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0ec      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002c70:	7cfb      	ldrb	r3, [r7, #19]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10b      	bne.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c76:	4b07      	ldr	r3, [pc, #28]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c84:	4903      	ldr	r1, [pc, #12]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c8e:	7cfb      	ldrb	r3, [r7, #19]
 8002c90:	74bb      	strb	r3, [r7, #18]
 8002c92:	e005      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002c94:	40021000 	.word	0x40021000
 8002c98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c9c:	7cfb      	ldrb	r3, [r7, #19]
 8002c9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ca0:	7c7b      	ldrb	r3, [r7, #17]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d105      	bne.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ca6:	4ba6      	ldr	r3, [pc, #664]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002caa:	4aa5      	ldr	r2, [pc, #660]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cb0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00a      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cbe:	4ba0      	ldr	r3, [pc, #640]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc4:	f023 0203 	bic.w	r2, r3, #3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	499c      	ldr	r1, [pc, #624]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00a      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ce0:	4b97      	ldr	r3, [pc, #604]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ce6:	f023 020c 	bic.w	r2, r3, #12
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	4994      	ldr	r1, [pc, #592]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00a      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d02:	4b8f      	ldr	r3, [pc, #572]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d08:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	498b      	ldr	r1, [pc, #556]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0308 	and.w	r3, r3, #8
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00a      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d24:	4b86      	ldr	r3, [pc, #536]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	4983      	ldr	r1, [pc, #524]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0320 	and.w	r3, r3, #32
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00a      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d46:	4b7e      	ldr	r3, [pc, #504]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d4c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	497a      	ldr	r1, [pc, #488]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00a      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d68:	4b75      	ldr	r3, [pc, #468]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d6e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	4972      	ldr	r1, [pc, #456]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00a      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d8a:	4b6d      	ldr	r3, [pc, #436]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d90:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	4969      	ldr	r1, [pc, #420]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00a      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002dac:	4b64      	ldr	r3, [pc, #400]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	4961      	ldr	r1, [pc, #388]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00a      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dce:	4b5c      	ldr	r3, [pc, #368]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ddc:	4958      	ldr	r1, [pc, #352]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d015      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002df0:	4b53      	ldr	r3, [pc, #332]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dfe:	4950      	ldr	r1, [pc, #320]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e0e:	d105      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e10:	4b4b      	ldr	r3, [pc, #300]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	4a4a      	ldr	r2, [pc, #296]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e1a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d015      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e28:	4b45      	ldr	r3, [pc, #276]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e2e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e36:	4942      	ldr	r1, [pc, #264]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e46:	d105      	bne.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e48:	4b3d      	ldr	r3, [pc, #244]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	4a3c      	ldr	r2, [pc, #240]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e52:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d015      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e60:	4b37      	ldr	r3, [pc, #220]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e66:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6e:	4934      	ldr	r1, [pc, #208]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e7e:	d105      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e80:	4b2f      	ldr	r3, [pc, #188]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	4a2e      	ldr	r2, [pc, #184]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e8a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d015      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e98:	4b29      	ldr	r3, [pc, #164]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e9e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ea6:	4926      	ldr	r1, [pc, #152]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002eb6:	d105      	bne.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002eb8:	4b21      	ldr	r3, [pc, #132]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	4a20      	ldr	r2, [pc, #128]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ebe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ec2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d015      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ede:	4918      	ldr	r1, [pc, #96]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002eee:	d105      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ef0:	4b13      	ldr	r3, [pc, #76]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	4a12      	ldr	r2, [pc, #72]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ef6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002efa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d015      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f08:	4b0d      	ldr	r3, [pc, #52]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f16:	490a      	ldr	r1, [pc, #40]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f26:	d105      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f28:	4b05      	ldr	r3, [pc, #20]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	4a04      	ldr	r2, [pc, #16]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f32:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002f34:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40021000 	.word	0x40021000

08002f44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e042      	b.n	8002fdc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d106      	bne.n	8002f6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7fe fb87 	bl	800167c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2224      	movs	r2, #36	@ 0x24
 8002f72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0201 	bic.w	r2, r2, #1
 8002f84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 fca2 	bl	80038d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f9d3 	bl	8003340 <UART_SetConfig>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e01b      	b.n	8002fdc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002fb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002fc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 fd21 	bl	8003a1c <UART_CheckIdleState>
 8002fda:	4603      	mov	r3, r0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e04a      	b.n	800308c <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d106      	bne.n	800300e <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7fe fb37 	bl	800167c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2224      	movs	r2, #36	@ 0x24
 8003012:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0201 	bic.w	r2, r2, #1
 8003024:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fc52 	bl	80038d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 f983 	bl	8003340 <UART_SetConfig>
 800303a:	4603      	mov	r3, r0
 800303c:	2b01      	cmp	r3, #1
 800303e:	d101      	bne.n	8003044 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e023      	b.n	800308c <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003052:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8003062:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0208 	orr.w	r2, r2, #8
 8003072:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0201 	orr.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 fcc9 	bl	8003a1c <UART_CheckIdleState>
 800308a:	4603      	mov	r3, r0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b08a      	sub	sp, #40	@ 0x28
 8003098:	af02      	add	r7, sp, #8
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	603b      	str	r3, [r7, #0]
 80030a0:	4613      	mov	r3, r2
 80030a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030aa:	2b20      	cmp	r3, #32
 80030ac:	d17b      	bne.n	80031a6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <HAL_UART_Transmit+0x26>
 80030b4:	88fb      	ldrh	r3, [r7, #6]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e074      	b.n	80031a8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2221      	movs	r2, #33	@ 0x21
 80030ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030ce:	f7fe fcbb 	bl	8001a48 <HAL_GetTick>
 80030d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	88fa      	ldrh	r2, [r7, #6]
 80030d8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	88fa      	ldrh	r2, [r7, #6]
 80030e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030ec:	d108      	bne.n	8003100 <HAL_UART_Transmit+0x6c>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d104      	bne.n	8003100 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80030f6:	2300      	movs	r3, #0
 80030f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	61bb      	str	r3, [r7, #24]
 80030fe:	e003      	b.n	8003108 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003104:	2300      	movs	r3, #0
 8003106:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003108:	e030      	b.n	800316c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2200      	movs	r2, #0
 8003112:	2180      	movs	r1, #128	@ 0x80
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 fd2b 	bl	8003b70 <UART_WaitOnFlagUntilTimeout>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d005      	beq.n	800312c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2220      	movs	r2, #32
 8003124:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e03d      	b.n	80031a8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10b      	bne.n	800314a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	461a      	mov	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003140:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	3302      	adds	r3, #2
 8003146:	61bb      	str	r3, [r7, #24]
 8003148:	e007      	b.n	800315a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	781a      	ldrb	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	3301      	adds	r3, #1
 8003158:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003160:	b29b      	uxth	r3, r3
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003172:	b29b      	uxth	r3, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1c8      	bne.n	800310a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	2200      	movs	r2, #0
 8003180:	2140      	movs	r1, #64	@ 0x40
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 fcf4 	bl	8003b70 <UART_WaitOnFlagUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d005      	beq.n	800319a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2220      	movs	r2, #32
 8003192:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e006      	b.n	80031a8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2220      	movs	r2, #32
 800319e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80031a2:	2300      	movs	r3, #0
 80031a4:	e000      	b.n	80031a8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80031a6:	2302      	movs	r3, #2
  }
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3720      	adds	r7, #32
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b08a      	sub	sp, #40	@ 0x28
 80031b4:	af02      	add	r7, sp, #8
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	4613      	mov	r3, r2
 80031be:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031c6:	2b20      	cmp	r3, #32
 80031c8:	f040 80b5 	bne.w	8003336 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d002      	beq.n	80031d8 <HAL_UART_Receive+0x28>
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0ad      	b.n	8003338 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2222      	movs	r2, #34	@ 0x22
 80031e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031f2:	f7fe fc29 	bl	8001a48 <HAL_GetTick>
 80031f6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	88fa      	ldrh	r2, [r7, #6]
 80031fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	88fa      	ldrh	r2, [r7, #6]
 8003204:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003210:	d10e      	bne.n	8003230 <HAL_UART_Receive+0x80>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d105      	bne.n	8003226 <HAL_UART_Receive+0x76>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003220:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003224:	e02d      	b.n	8003282 <HAL_UART_Receive+0xd2>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	22ff      	movs	r2, #255	@ 0xff
 800322a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800322e:	e028      	b.n	8003282 <HAL_UART_Receive+0xd2>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10d      	bne.n	8003254 <HAL_UART_Receive+0xa4>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d104      	bne.n	800324a <HAL_UART_Receive+0x9a>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	22ff      	movs	r2, #255	@ 0xff
 8003244:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003248:	e01b      	b.n	8003282 <HAL_UART_Receive+0xd2>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	227f      	movs	r2, #127	@ 0x7f
 800324e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003252:	e016      	b.n	8003282 <HAL_UART_Receive+0xd2>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800325c:	d10d      	bne.n	800327a <HAL_UART_Receive+0xca>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d104      	bne.n	8003270 <HAL_UART_Receive+0xc0>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	227f      	movs	r2, #127	@ 0x7f
 800326a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800326e:	e008      	b.n	8003282 <HAL_UART_Receive+0xd2>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	223f      	movs	r2, #63	@ 0x3f
 8003274:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003278:	e003      	b.n	8003282 <HAL_UART_Receive+0xd2>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003288:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003292:	d108      	bne.n	80032a6 <HAL_UART_Receive+0xf6>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d104      	bne.n	80032a6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800329c:	2300      	movs	r3, #0
 800329e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	61bb      	str	r3, [r7, #24]
 80032a4:	e003      	b.n	80032ae <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032aa:	2300      	movs	r3, #0
 80032ac:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80032ae:	e036      	b.n	800331e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	2200      	movs	r2, #0
 80032b8:	2120      	movs	r1, #32
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 fc58 	bl	8003b70 <UART_WaitOnFlagUntilTimeout>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d005      	beq.n	80032d2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e032      	b.n	8003338 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10c      	bne.n	80032f2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032de:	b29a      	uxth	r2, r3
 80032e0:	8a7b      	ldrh	r3, [r7, #18]
 80032e2:	4013      	ands	r3, r2
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	3302      	adds	r3, #2
 80032ee:	61bb      	str	r3, [r7, #24]
 80032f0:	e00c      	b.n	800330c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	8a7b      	ldrh	r3, [r7, #18]
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	4013      	ands	r3, r2
 8003300:	b2da      	uxtb	r2, r3
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	3301      	adds	r3, #1
 800330a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003312:	b29b      	uxth	r3, r3
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003324:	b29b      	uxth	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1c2      	bne.n	80032b0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2220      	movs	r2, #32
 800332e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	e000      	b.n	8003338 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8003336:	2302      	movs	r3, #2
  }
}
 8003338:	4618      	mov	r0, r3
 800333a:	3720      	adds	r7, #32
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003344:	b08c      	sub	sp, #48	@ 0x30
 8003346:	af00      	add	r7, sp, #0
 8003348:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	431a      	orrs	r2, r3
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	431a      	orrs	r2, r3
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	4313      	orrs	r3, r2
 8003366:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	4bab      	ldr	r3, [pc, #684]	@ (800361c <UART_SetConfig+0x2dc>)
 8003370:	4013      	ands	r3, r2
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	6812      	ldr	r2, [r2, #0]
 8003376:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003378:	430b      	orrs	r3, r1
 800337a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4aa0      	ldr	r2, [pc, #640]	@ (8003620 <UART_SetConfig+0x2e0>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d004      	beq.n	80033ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033a8:	4313      	orrs	r3, r2
 80033aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80033b6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	6812      	ldr	r2, [r2, #0]
 80033be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033c0:	430b      	orrs	r3, r1
 80033c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ca:	f023 010f 	bic.w	r1, r3, #15
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a91      	ldr	r2, [pc, #580]	@ (8003624 <UART_SetConfig+0x2e4>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d125      	bne.n	8003430 <UART_SetConfig+0xf0>
 80033e4:	4b90      	ldr	r3, [pc, #576]	@ (8003628 <UART_SetConfig+0x2e8>)
 80033e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	2b03      	cmp	r3, #3
 80033f0:	d81a      	bhi.n	8003428 <UART_SetConfig+0xe8>
 80033f2:	a201      	add	r2, pc, #4	@ (adr r2, 80033f8 <UART_SetConfig+0xb8>)
 80033f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f8:	08003409 	.word	0x08003409
 80033fc:	08003419 	.word	0x08003419
 8003400:	08003411 	.word	0x08003411
 8003404:	08003421 	.word	0x08003421
 8003408:	2301      	movs	r3, #1
 800340a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800340e:	e0d6      	b.n	80035be <UART_SetConfig+0x27e>
 8003410:	2302      	movs	r3, #2
 8003412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003416:	e0d2      	b.n	80035be <UART_SetConfig+0x27e>
 8003418:	2304      	movs	r3, #4
 800341a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800341e:	e0ce      	b.n	80035be <UART_SetConfig+0x27e>
 8003420:	2308      	movs	r3, #8
 8003422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003426:	e0ca      	b.n	80035be <UART_SetConfig+0x27e>
 8003428:	2310      	movs	r3, #16
 800342a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800342e:	e0c6      	b.n	80035be <UART_SetConfig+0x27e>
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a7d      	ldr	r2, [pc, #500]	@ (800362c <UART_SetConfig+0x2ec>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d138      	bne.n	80034ac <UART_SetConfig+0x16c>
 800343a:	4b7b      	ldr	r3, [pc, #492]	@ (8003628 <UART_SetConfig+0x2e8>)
 800343c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003440:	f003 030c 	and.w	r3, r3, #12
 8003444:	2b0c      	cmp	r3, #12
 8003446:	d82d      	bhi.n	80034a4 <UART_SetConfig+0x164>
 8003448:	a201      	add	r2, pc, #4	@ (adr r2, 8003450 <UART_SetConfig+0x110>)
 800344a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800344e:	bf00      	nop
 8003450:	08003485 	.word	0x08003485
 8003454:	080034a5 	.word	0x080034a5
 8003458:	080034a5 	.word	0x080034a5
 800345c:	080034a5 	.word	0x080034a5
 8003460:	08003495 	.word	0x08003495
 8003464:	080034a5 	.word	0x080034a5
 8003468:	080034a5 	.word	0x080034a5
 800346c:	080034a5 	.word	0x080034a5
 8003470:	0800348d 	.word	0x0800348d
 8003474:	080034a5 	.word	0x080034a5
 8003478:	080034a5 	.word	0x080034a5
 800347c:	080034a5 	.word	0x080034a5
 8003480:	0800349d 	.word	0x0800349d
 8003484:	2300      	movs	r3, #0
 8003486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800348a:	e098      	b.n	80035be <UART_SetConfig+0x27e>
 800348c:	2302      	movs	r3, #2
 800348e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003492:	e094      	b.n	80035be <UART_SetConfig+0x27e>
 8003494:	2304      	movs	r3, #4
 8003496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800349a:	e090      	b.n	80035be <UART_SetConfig+0x27e>
 800349c:	2308      	movs	r3, #8
 800349e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034a2:	e08c      	b.n	80035be <UART_SetConfig+0x27e>
 80034a4:	2310      	movs	r3, #16
 80034a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034aa:	e088      	b.n	80035be <UART_SetConfig+0x27e>
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a5f      	ldr	r2, [pc, #380]	@ (8003630 <UART_SetConfig+0x2f0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d125      	bne.n	8003502 <UART_SetConfig+0x1c2>
 80034b6:	4b5c      	ldr	r3, [pc, #368]	@ (8003628 <UART_SetConfig+0x2e8>)
 80034b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80034c0:	2b30      	cmp	r3, #48	@ 0x30
 80034c2:	d016      	beq.n	80034f2 <UART_SetConfig+0x1b2>
 80034c4:	2b30      	cmp	r3, #48	@ 0x30
 80034c6:	d818      	bhi.n	80034fa <UART_SetConfig+0x1ba>
 80034c8:	2b20      	cmp	r3, #32
 80034ca:	d00a      	beq.n	80034e2 <UART_SetConfig+0x1a2>
 80034cc:	2b20      	cmp	r3, #32
 80034ce:	d814      	bhi.n	80034fa <UART_SetConfig+0x1ba>
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d002      	beq.n	80034da <UART_SetConfig+0x19a>
 80034d4:	2b10      	cmp	r3, #16
 80034d6:	d008      	beq.n	80034ea <UART_SetConfig+0x1aa>
 80034d8:	e00f      	b.n	80034fa <UART_SetConfig+0x1ba>
 80034da:	2300      	movs	r3, #0
 80034dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034e0:	e06d      	b.n	80035be <UART_SetConfig+0x27e>
 80034e2:	2302      	movs	r3, #2
 80034e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034e8:	e069      	b.n	80035be <UART_SetConfig+0x27e>
 80034ea:	2304      	movs	r3, #4
 80034ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034f0:	e065      	b.n	80035be <UART_SetConfig+0x27e>
 80034f2:	2308      	movs	r3, #8
 80034f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034f8:	e061      	b.n	80035be <UART_SetConfig+0x27e>
 80034fa:	2310      	movs	r3, #16
 80034fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003500:	e05d      	b.n	80035be <UART_SetConfig+0x27e>
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a4b      	ldr	r2, [pc, #300]	@ (8003634 <UART_SetConfig+0x2f4>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d125      	bne.n	8003558 <UART_SetConfig+0x218>
 800350c:	4b46      	ldr	r3, [pc, #280]	@ (8003628 <UART_SetConfig+0x2e8>)
 800350e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003512:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003516:	2bc0      	cmp	r3, #192	@ 0xc0
 8003518:	d016      	beq.n	8003548 <UART_SetConfig+0x208>
 800351a:	2bc0      	cmp	r3, #192	@ 0xc0
 800351c:	d818      	bhi.n	8003550 <UART_SetConfig+0x210>
 800351e:	2b80      	cmp	r3, #128	@ 0x80
 8003520:	d00a      	beq.n	8003538 <UART_SetConfig+0x1f8>
 8003522:	2b80      	cmp	r3, #128	@ 0x80
 8003524:	d814      	bhi.n	8003550 <UART_SetConfig+0x210>
 8003526:	2b00      	cmp	r3, #0
 8003528:	d002      	beq.n	8003530 <UART_SetConfig+0x1f0>
 800352a:	2b40      	cmp	r3, #64	@ 0x40
 800352c:	d008      	beq.n	8003540 <UART_SetConfig+0x200>
 800352e:	e00f      	b.n	8003550 <UART_SetConfig+0x210>
 8003530:	2300      	movs	r3, #0
 8003532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003536:	e042      	b.n	80035be <UART_SetConfig+0x27e>
 8003538:	2302      	movs	r3, #2
 800353a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800353e:	e03e      	b.n	80035be <UART_SetConfig+0x27e>
 8003540:	2304      	movs	r3, #4
 8003542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003546:	e03a      	b.n	80035be <UART_SetConfig+0x27e>
 8003548:	2308      	movs	r3, #8
 800354a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800354e:	e036      	b.n	80035be <UART_SetConfig+0x27e>
 8003550:	2310      	movs	r3, #16
 8003552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003556:	e032      	b.n	80035be <UART_SetConfig+0x27e>
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a30      	ldr	r2, [pc, #192]	@ (8003620 <UART_SetConfig+0x2e0>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d12a      	bne.n	80035b8 <UART_SetConfig+0x278>
 8003562:	4b31      	ldr	r3, [pc, #196]	@ (8003628 <UART_SetConfig+0x2e8>)
 8003564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003568:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800356c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003570:	d01a      	beq.n	80035a8 <UART_SetConfig+0x268>
 8003572:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003576:	d81b      	bhi.n	80035b0 <UART_SetConfig+0x270>
 8003578:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800357c:	d00c      	beq.n	8003598 <UART_SetConfig+0x258>
 800357e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003582:	d815      	bhi.n	80035b0 <UART_SetConfig+0x270>
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <UART_SetConfig+0x250>
 8003588:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800358c:	d008      	beq.n	80035a0 <UART_SetConfig+0x260>
 800358e:	e00f      	b.n	80035b0 <UART_SetConfig+0x270>
 8003590:	2300      	movs	r3, #0
 8003592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003596:	e012      	b.n	80035be <UART_SetConfig+0x27e>
 8003598:	2302      	movs	r3, #2
 800359a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800359e:	e00e      	b.n	80035be <UART_SetConfig+0x27e>
 80035a0:	2304      	movs	r3, #4
 80035a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035a6:	e00a      	b.n	80035be <UART_SetConfig+0x27e>
 80035a8:	2308      	movs	r3, #8
 80035aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035ae:	e006      	b.n	80035be <UART_SetConfig+0x27e>
 80035b0:	2310      	movs	r3, #16
 80035b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035b6:	e002      	b.n	80035be <UART_SetConfig+0x27e>
 80035b8:	2310      	movs	r3, #16
 80035ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a17      	ldr	r2, [pc, #92]	@ (8003620 <UART_SetConfig+0x2e0>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	f040 80a8 	bne.w	800371a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035ca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d834      	bhi.n	800363c <UART_SetConfig+0x2fc>
 80035d2:	a201      	add	r2, pc, #4	@ (adr r2, 80035d8 <UART_SetConfig+0x298>)
 80035d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d8:	080035fd 	.word	0x080035fd
 80035dc:	0800363d 	.word	0x0800363d
 80035e0:	08003605 	.word	0x08003605
 80035e4:	0800363d 	.word	0x0800363d
 80035e8:	0800360b 	.word	0x0800360b
 80035ec:	0800363d 	.word	0x0800363d
 80035f0:	0800363d 	.word	0x0800363d
 80035f4:	0800363d 	.word	0x0800363d
 80035f8:	08003613 	.word	0x08003613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035fc:	f7ff fa40 	bl	8002a80 <HAL_RCC_GetPCLK1Freq>
 8003600:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003602:	e021      	b.n	8003648 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003604:	4b0c      	ldr	r3, [pc, #48]	@ (8003638 <UART_SetConfig+0x2f8>)
 8003606:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003608:	e01e      	b.n	8003648 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800360a:	f7ff f9cb 	bl	80029a4 <HAL_RCC_GetSysClockFreq>
 800360e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003610:	e01a      	b.n	8003648 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003612:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003616:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003618:	e016      	b.n	8003648 <UART_SetConfig+0x308>
 800361a:	bf00      	nop
 800361c:	cfff69f3 	.word	0xcfff69f3
 8003620:	40008000 	.word	0x40008000
 8003624:	40013800 	.word	0x40013800
 8003628:	40021000 	.word	0x40021000
 800362c:	40004400 	.word	0x40004400
 8003630:	40004800 	.word	0x40004800
 8003634:	40004c00 	.word	0x40004c00
 8003638:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800363c:	2300      	movs	r3, #0
 800363e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003646:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 812a 	beq.w	80038a4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003654:	4a9e      	ldr	r2, [pc, #632]	@ (80038d0 <UART_SetConfig+0x590>)
 8003656:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800365a:	461a      	mov	r2, r3
 800365c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003662:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	4613      	mov	r3, r2
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	4413      	add	r3, r2
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	429a      	cmp	r2, r3
 8003672:	d305      	bcc.n	8003680 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	429a      	cmp	r2, r3
 800367e:	d903      	bls.n	8003688 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003686:	e10d      	b.n	80038a4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368a:	2200      	movs	r2, #0
 800368c:	60bb      	str	r3, [r7, #8]
 800368e:	60fa      	str	r2, [r7, #12]
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003694:	4a8e      	ldr	r2, [pc, #568]	@ (80038d0 <UART_SetConfig+0x590>)
 8003696:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800369a:	b29b      	uxth	r3, r3
 800369c:	2200      	movs	r2, #0
 800369e:	603b      	str	r3, [r7, #0]
 80036a0:	607a      	str	r2, [r7, #4]
 80036a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036aa:	f7fd f917 	bl	80008dc <__aeabi_uldivmod>
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
 80036b2:	4610      	mov	r0, r2
 80036b4:	4619      	mov	r1, r3
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	020b      	lsls	r3, r1, #8
 80036c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80036c4:	0202      	lsls	r2, r0, #8
 80036c6:	6979      	ldr	r1, [r7, #20]
 80036c8:	6849      	ldr	r1, [r1, #4]
 80036ca:	0849      	lsrs	r1, r1, #1
 80036cc:	2000      	movs	r0, #0
 80036ce:	460c      	mov	r4, r1
 80036d0:	4605      	mov	r5, r0
 80036d2:	eb12 0804 	adds.w	r8, r2, r4
 80036d6:	eb43 0905 	adc.w	r9, r3, r5
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	469a      	mov	sl, r3
 80036e2:	4693      	mov	fp, r2
 80036e4:	4652      	mov	r2, sl
 80036e6:	465b      	mov	r3, fp
 80036e8:	4640      	mov	r0, r8
 80036ea:	4649      	mov	r1, r9
 80036ec:	f7fd f8f6 	bl	80008dc <__aeabi_uldivmod>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4613      	mov	r3, r2
 80036f6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036fe:	d308      	bcc.n	8003712 <UART_SetConfig+0x3d2>
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003706:	d204      	bcs.n	8003712 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6a3a      	ldr	r2, [r7, #32]
 800370e:	60da      	str	r2, [r3, #12]
 8003710:	e0c8      	b.n	80038a4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003718:	e0c4      	b.n	80038a4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003722:	d167      	bne.n	80037f4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003724:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003728:	2b08      	cmp	r3, #8
 800372a:	d828      	bhi.n	800377e <UART_SetConfig+0x43e>
 800372c:	a201      	add	r2, pc, #4	@ (adr r2, 8003734 <UART_SetConfig+0x3f4>)
 800372e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003732:	bf00      	nop
 8003734:	08003759 	.word	0x08003759
 8003738:	08003761 	.word	0x08003761
 800373c:	08003769 	.word	0x08003769
 8003740:	0800377f 	.word	0x0800377f
 8003744:	0800376f 	.word	0x0800376f
 8003748:	0800377f 	.word	0x0800377f
 800374c:	0800377f 	.word	0x0800377f
 8003750:	0800377f 	.word	0x0800377f
 8003754:	08003777 	.word	0x08003777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003758:	f7ff f992 	bl	8002a80 <HAL_RCC_GetPCLK1Freq>
 800375c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800375e:	e014      	b.n	800378a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003760:	f7ff f9a4 	bl	8002aac <HAL_RCC_GetPCLK2Freq>
 8003764:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003766:	e010      	b.n	800378a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003768:	4b5a      	ldr	r3, [pc, #360]	@ (80038d4 <UART_SetConfig+0x594>)
 800376a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800376c:	e00d      	b.n	800378a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800376e:	f7ff f919 	bl	80029a4 <HAL_RCC_GetSysClockFreq>
 8003772:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003774:	e009      	b.n	800378a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003776:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800377a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800377c:	e005      	b.n	800378a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003788:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800378a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 8089 	beq.w	80038a4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003796:	4a4e      	ldr	r2, [pc, #312]	@ (80038d0 <UART_SetConfig+0x590>)
 8003798:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800379c:	461a      	mov	r2, r3
 800379e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80037a4:	005a      	lsls	r2, r3, #1
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	085b      	lsrs	r3, r3, #1
 80037ac:	441a      	add	r2, r3
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	2b0f      	cmp	r3, #15
 80037bc:	d916      	bls.n	80037ec <UART_SetConfig+0x4ac>
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037c4:	d212      	bcs.n	80037ec <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	f023 030f 	bic.w	r3, r3, #15
 80037ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	085b      	lsrs	r3, r3, #1
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	b29a      	uxth	r2, r3
 80037dc:	8bfb      	ldrh	r3, [r7, #30]
 80037de:	4313      	orrs	r3, r2
 80037e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	8bfa      	ldrh	r2, [r7, #30]
 80037e8:	60da      	str	r2, [r3, #12]
 80037ea:	e05b      	b.n	80038a4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80037f2:	e057      	b.n	80038a4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d828      	bhi.n	800384e <UART_SetConfig+0x50e>
 80037fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003804 <UART_SetConfig+0x4c4>)
 80037fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003802:	bf00      	nop
 8003804:	08003829 	.word	0x08003829
 8003808:	08003831 	.word	0x08003831
 800380c:	08003839 	.word	0x08003839
 8003810:	0800384f 	.word	0x0800384f
 8003814:	0800383f 	.word	0x0800383f
 8003818:	0800384f 	.word	0x0800384f
 800381c:	0800384f 	.word	0x0800384f
 8003820:	0800384f 	.word	0x0800384f
 8003824:	08003847 	.word	0x08003847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003828:	f7ff f92a 	bl	8002a80 <HAL_RCC_GetPCLK1Freq>
 800382c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800382e:	e014      	b.n	800385a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003830:	f7ff f93c 	bl	8002aac <HAL_RCC_GetPCLK2Freq>
 8003834:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003836:	e010      	b.n	800385a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003838:	4b26      	ldr	r3, [pc, #152]	@ (80038d4 <UART_SetConfig+0x594>)
 800383a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800383c:	e00d      	b.n	800385a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800383e:	f7ff f8b1 	bl	80029a4 <HAL_RCC_GetSysClockFreq>
 8003842:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003844:	e009      	b.n	800385a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003846:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800384a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800384c:	e005      	b.n	800385a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003858:	bf00      	nop
    }

    if (pclk != 0U)
 800385a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385c:	2b00      	cmp	r3, #0
 800385e:	d021      	beq.n	80038a4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003864:	4a1a      	ldr	r2, [pc, #104]	@ (80038d0 <UART_SetConfig+0x590>)
 8003866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800386a:	461a      	mov	r2, r3
 800386c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	085b      	lsrs	r3, r3, #1
 8003878:	441a      	add	r2, r3
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003882:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	2b0f      	cmp	r3, #15
 8003888:	d909      	bls.n	800389e <UART_SetConfig+0x55e>
 800388a:	6a3b      	ldr	r3, [r7, #32]
 800388c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003890:	d205      	bcs.n	800389e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	b29a      	uxth	r2, r3
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	60da      	str	r2, [r3, #12]
 800389c:	e002      	b.n	80038a4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	2200      	movs	r2, #0
 80038b8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2200      	movs	r2, #0
 80038be:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80038c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3730      	adds	r7, #48	@ 0x30
 80038c8:	46bd      	mov	sp, r7
 80038ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ce:	bf00      	nop
 80038d0:	08004e78 	.word	0x08004e78
 80038d4:	00f42400 	.word	0x00f42400

080038d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e4:	f003 0308 	and.w	r3, r3, #8
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00a      	beq.n	8003902 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00a      	beq.n	8003946 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394a:	f003 0304 	and.w	r3, r3, #4
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800396c:	f003 0310 	and.w	r3, r3, #16
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00a      	beq.n	800398a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800398e:	f003 0320 	and.w	r3, r3, #32
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00a      	beq.n	80039ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d01a      	beq.n	80039ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039d6:	d10a      	bne.n	80039ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	605a      	str	r2, [r3, #4]
  }
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b098      	sub	sp, #96	@ 0x60
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a2c:	f7fe f80c 	bl	8001a48 <HAL_GetTick>
 8003a30:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0308 	and.w	r3, r3, #8
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d12f      	bne.n	8003aa0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f88e 	bl	8003b70 <UART_WaitOnFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d022      	beq.n	8003aa0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a62:	e853 3f00 	ldrex	r3, [r3]
 8003a66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	461a      	mov	r2, r3
 8003a76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a78:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a7a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a80:	e841 2300 	strex	r3, r2, [r1]
 8003a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1e6      	bne.n	8003a5a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e063      	b.n	8003b68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0304 	and.w	r3, r3, #4
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d149      	bne.n	8003b42 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f857 	bl	8003b70 <UART_WaitOnFlagUntilTimeout>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d03c      	beq.n	8003b42 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad0:	e853 3f00 	ldrex	r3, [r3]
 8003ad4:	623b      	str	r3, [r7, #32]
   return(result);
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
 8003ad8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003adc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ae6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ae8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003aec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003aee:	e841 2300 	strex	r3, r2, [r1]
 8003af2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1e6      	bne.n	8003ac8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	3308      	adds	r3, #8
 8003b00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	e853 3f00 	ldrex	r3, [r3]
 8003b08:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f023 0301 	bic.w	r3, r3, #1
 8003b10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	3308      	adds	r3, #8
 8003b18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b1a:	61fa      	str	r2, [r7, #28]
 8003b1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1e:	69b9      	ldr	r1, [r7, #24]
 8003b20:	69fa      	ldr	r2, [r7, #28]
 8003b22:	e841 2300 	strex	r3, r2, [r1]
 8003b26:	617b      	str	r3, [r7, #20]
   return(result);
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1e5      	bne.n	8003afa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2220      	movs	r2, #32
 8003b32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e012      	b.n	8003b68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3758      	adds	r7, #88	@ 0x58
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	603b      	str	r3, [r7, #0]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b80:	e04f      	b.n	8003c22 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b88:	d04b      	beq.n	8003c22 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b8a:	f7fd ff5d 	bl	8001a48 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d302      	bcc.n	8003ba0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e04e      	b.n	8003c42 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d037      	beq.n	8003c22 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	2b80      	cmp	r3, #128	@ 0x80
 8003bb6:	d034      	beq.n	8003c22 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2b40      	cmp	r3, #64	@ 0x40
 8003bbc:	d031      	beq.n	8003c22 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	f003 0308 	and.w	r3, r3, #8
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d110      	bne.n	8003bee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2208      	movs	r2, #8
 8003bd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 f838 	bl	8003c4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2208      	movs	r2, #8
 8003bde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e029      	b.n	8003c42 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bfc:	d111      	bne.n	8003c22 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f000 f81e 	bl	8003c4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e00f      	b.n	8003c42 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	69da      	ldr	r2, [r3, #28]
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	bf0c      	ite	eq
 8003c32:	2301      	moveq	r3, #1
 8003c34:	2300      	movne	r3, #0
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	461a      	mov	r2, r3
 8003c3a:	79fb      	ldrb	r3, [r7, #7]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d0a0      	beq.n	8003b82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b095      	sub	sp, #84	@ 0x54
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c5a:	e853 3f00 	ldrex	r3, [r3]
 8003c5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c70:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c72:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c78:	e841 2300 	strex	r3, r2, [r1]
 8003c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1e6      	bne.n	8003c52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3308      	adds	r3, #8
 8003c8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8c:	6a3b      	ldr	r3, [r7, #32]
 8003c8e:	e853 3f00 	ldrex	r3, [r3]
 8003c92:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c9a:	f023 0301 	bic.w	r3, r3, #1
 8003c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3308      	adds	r3, #8
 8003ca6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ca8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003caa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cb0:	e841 2300 	strex	r3, r2, [r1]
 8003cb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1e3      	bne.n	8003c84 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d118      	bne.n	8003cf6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	e853 3f00 	ldrex	r3, [r3]
 8003cd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	f023 0310 	bic.w	r3, r3, #16
 8003cd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ce2:	61bb      	str	r3, [r7, #24]
 8003ce4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce6:	6979      	ldr	r1, [r7, #20]
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	e841 2300 	strex	r3, r2, [r1]
 8003cee:	613b      	str	r3, [r7, #16]
   return(result);
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1e6      	bne.n	8003cc4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003d0a:	bf00      	nop
 8003d0c:	3754      	adds	r7, #84	@ 0x54
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b085      	sub	sp, #20
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d101      	bne.n	8003d2c <HAL_UARTEx_DisableFifoMode+0x16>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	e027      	b.n	8003d7c <HAL_UARTEx_DisableFifoMode+0x66>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2224      	movs	r2, #36	@ 0x24
 8003d38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0201 	bic.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003d5a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e02d      	b.n	8003dfc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2224      	movs	r2, #36	@ 0x24
 8003dac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0201 	bic.w	r2, r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f84f 	bl	8003e80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d101      	bne.n	8003e1c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	e02d      	b.n	8003e78 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2224      	movs	r2, #36	@ 0x24
 8003e28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0201 	bic.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f811 	bl	8003e80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d108      	bne.n	8003ea2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003ea0:	e031      	b.n	8003f06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003ea2:	2308      	movs	r3, #8
 8003ea4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003ea6:	2308      	movs	r3, #8
 8003ea8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	0e5b      	lsrs	r3, r3, #25
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	0f5b      	lsrs	r3, r3, #29
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003eca:	7bbb      	ldrb	r3, [r7, #14]
 8003ecc:	7b3a      	ldrb	r2, [r7, #12]
 8003ece:	4911      	ldr	r1, [pc, #68]	@ (8003f14 <UARTEx_SetNbDataToProcess+0x94>)
 8003ed0:	5c8a      	ldrb	r2, [r1, r2]
 8003ed2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003ed6:	7b3a      	ldrb	r2, [r7, #12]
 8003ed8:	490f      	ldr	r1, [pc, #60]	@ (8003f18 <UARTEx_SetNbDataToProcess+0x98>)
 8003eda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003edc:	fb93 f3f2 	sdiv	r3, r3, r2
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003ee8:	7bfb      	ldrb	r3, [r7, #15]
 8003eea:	7b7a      	ldrb	r2, [r7, #13]
 8003eec:	4909      	ldr	r1, [pc, #36]	@ (8003f14 <UARTEx_SetNbDataToProcess+0x94>)
 8003eee:	5c8a      	ldrb	r2, [r1, r2]
 8003ef0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003ef4:	7b7a      	ldrb	r2, [r7, #13]
 8003ef6:	4908      	ldr	r1, [pc, #32]	@ (8003f18 <UARTEx_SetNbDataToProcess+0x98>)
 8003ef8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003efa:	fb93 f3f2 	sdiv	r3, r3, r2
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003f06:	bf00      	nop
 8003f08:	3714      	adds	r7, #20
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	08004e90 	.word	0x08004e90
 8003f18:	08004e98 	.word	0x08004e98

08003f1c <std>:
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	b510      	push	{r4, lr}
 8003f20:	4604      	mov	r4, r0
 8003f22:	e9c0 3300 	strd	r3, r3, [r0]
 8003f26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f2a:	6083      	str	r3, [r0, #8]
 8003f2c:	8181      	strh	r1, [r0, #12]
 8003f2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003f30:	81c2      	strh	r2, [r0, #14]
 8003f32:	6183      	str	r3, [r0, #24]
 8003f34:	4619      	mov	r1, r3
 8003f36:	2208      	movs	r2, #8
 8003f38:	305c      	adds	r0, #92	@ 0x5c
 8003f3a:	f000 f906 	bl	800414a <memset>
 8003f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f74 <std+0x58>)
 8003f40:	6263      	str	r3, [r4, #36]	@ 0x24
 8003f42:	4b0d      	ldr	r3, [pc, #52]	@ (8003f78 <std+0x5c>)
 8003f44:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003f46:	4b0d      	ldr	r3, [pc, #52]	@ (8003f7c <std+0x60>)
 8003f48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f80 <std+0x64>)
 8003f4c:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f84 <std+0x68>)
 8003f50:	6224      	str	r4, [r4, #32]
 8003f52:	429c      	cmp	r4, r3
 8003f54:	d006      	beq.n	8003f64 <std+0x48>
 8003f56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003f5a:	4294      	cmp	r4, r2
 8003f5c:	d002      	beq.n	8003f64 <std+0x48>
 8003f5e:	33d0      	adds	r3, #208	@ 0xd0
 8003f60:	429c      	cmp	r4, r3
 8003f62:	d105      	bne.n	8003f70 <std+0x54>
 8003f64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f6c:	f000 b966 	b.w	800423c <__retarget_lock_init_recursive>
 8003f70:	bd10      	pop	{r4, pc}
 8003f72:	bf00      	nop
 8003f74:	080040c5 	.word	0x080040c5
 8003f78:	080040e7 	.word	0x080040e7
 8003f7c:	0800411f 	.word	0x0800411f
 8003f80:	08004143 	.word	0x08004143
 8003f84:	200001fc 	.word	0x200001fc

08003f88 <stdio_exit_handler>:
 8003f88:	4a02      	ldr	r2, [pc, #8]	@ (8003f94 <stdio_exit_handler+0xc>)
 8003f8a:	4903      	ldr	r1, [pc, #12]	@ (8003f98 <stdio_exit_handler+0x10>)
 8003f8c:	4803      	ldr	r0, [pc, #12]	@ (8003f9c <stdio_exit_handler+0x14>)
 8003f8e:	f000 b869 	b.w	8004064 <_fwalk_sglue>
 8003f92:	bf00      	nop
 8003f94:	20000018 	.word	0x20000018
 8003f98:	08004ad9 	.word	0x08004ad9
 8003f9c:	20000028 	.word	0x20000028

08003fa0 <cleanup_stdio>:
 8003fa0:	6841      	ldr	r1, [r0, #4]
 8003fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd4 <cleanup_stdio+0x34>)
 8003fa4:	4299      	cmp	r1, r3
 8003fa6:	b510      	push	{r4, lr}
 8003fa8:	4604      	mov	r4, r0
 8003faa:	d001      	beq.n	8003fb0 <cleanup_stdio+0x10>
 8003fac:	f000 fd94 	bl	8004ad8 <_fflush_r>
 8003fb0:	68a1      	ldr	r1, [r4, #8]
 8003fb2:	4b09      	ldr	r3, [pc, #36]	@ (8003fd8 <cleanup_stdio+0x38>)
 8003fb4:	4299      	cmp	r1, r3
 8003fb6:	d002      	beq.n	8003fbe <cleanup_stdio+0x1e>
 8003fb8:	4620      	mov	r0, r4
 8003fba:	f000 fd8d 	bl	8004ad8 <_fflush_r>
 8003fbe:	68e1      	ldr	r1, [r4, #12]
 8003fc0:	4b06      	ldr	r3, [pc, #24]	@ (8003fdc <cleanup_stdio+0x3c>)
 8003fc2:	4299      	cmp	r1, r3
 8003fc4:	d004      	beq.n	8003fd0 <cleanup_stdio+0x30>
 8003fc6:	4620      	mov	r0, r4
 8003fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fcc:	f000 bd84 	b.w	8004ad8 <_fflush_r>
 8003fd0:	bd10      	pop	{r4, pc}
 8003fd2:	bf00      	nop
 8003fd4:	200001fc 	.word	0x200001fc
 8003fd8:	20000264 	.word	0x20000264
 8003fdc:	200002cc 	.word	0x200002cc

08003fe0 <global_stdio_init.part.0>:
 8003fe0:	b510      	push	{r4, lr}
 8003fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8004010 <global_stdio_init.part.0+0x30>)
 8003fe4:	4c0b      	ldr	r4, [pc, #44]	@ (8004014 <global_stdio_init.part.0+0x34>)
 8003fe6:	4a0c      	ldr	r2, [pc, #48]	@ (8004018 <global_stdio_init.part.0+0x38>)
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	4620      	mov	r0, r4
 8003fec:	2200      	movs	r2, #0
 8003fee:	2104      	movs	r1, #4
 8003ff0:	f7ff ff94 	bl	8003f1c <std>
 8003ff4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	2109      	movs	r1, #9
 8003ffc:	f7ff ff8e 	bl	8003f1c <std>
 8004000:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004004:	2202      	movs	r2, #2
 8004006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800400a:	2112      	movs	r1, #18
 800400c:	f7ff bf86 	b.w	8003f1c <std>
 8004010:	20000334 	.word	0x20000334
 8004014:	200001fc 	.word	0x200001fc
 8004018:	08003f89 	.word	0x08003f89

0800401c <__sfp_lock_acquire>:
 800401c:	4801      	ldr	r0, [pc, #4]	@ (8004024 <__sfp_lock_acquire+0x8>)
 800401e:	f000 b90e 	b.w	800423e <__retarget_lock_acquire_recursive>
 8004022:	bf00      	nop
 8004024:	2000033d 	.word	0x2000033d

08004028 <__sfp_lock_release>:
 8004028:	4801      	ldr	r0, [pc, #4]	@ (8004030 <__sfp_lock_release+0x8>)
 800402a:	f000 b909 	b.w	8004240 <__retarget_lock_release_recursive>
 800402e:	bf00      	nop
 8004030:	2000033d 	.word	0x2000033d

08004034 <__sinit>:
 8004034:	b510      	push	{r4, lr}
 8004036:	4604      	mov	r4, r0
 8004038:	f7ff fff0 	bl	800401c <__sfp_lock_acquire>
 800403c:	6a23      	ldr	r3, [r4, #32]
 800403e:	b11b      	cbz	r3, 8004048 <__sinit+0x14>
 8004040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004044:	f7ff bff0 	b.w	8004028 <__sfp_lock_release>
 8004048:	4b04      	ldr	r3, [pc, #16]	@ (800405c <__sinit+0x28>)
 800404a:	6223      	str	r3, [r4, #32]
 800404c:	4b04      	ldr	r3, [pc, #16]	@ (8004060 <__sinit+0x2c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1f5      	bne.n	8004040 <__sinit+0xc>
 8004054:	f7ff ffc4 	bl	8003fe0 <global_stdio_init.part.0>
 8004058:	e7f2      	b.n	8004040 <__sinit+0xc>
 800405a:	bf00      	nop
 800405c:	08003fa1 	.word	0x08003fa1
 8004060:	20000334 	.word	0x20000334

08004064 <_fwalk_sglue>:
 8004064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004068:	4607      	mov	r7, r0
 800406a:	4688      	mov	r8, r1
 800406c:	4614      	mov	r4, r2
 800406e:	2600      	movs	r6, #0
 8004070:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004074:	f1b9 0901 	subs.w	r9, r9, #1
 8004078:	d505      	bpl.n	8004086 <_fwalk_sglue+0x22>
 800407a:	6824      	ldr	r4, [r4, #0]
 800407c:	2c00      	cmp	r4, #0
 800407e:	d1f7      	bne.n	8004070 <_fwalk_sglue+0xc>
 8004080:	4630      	mov	r0, r6
 8004082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004086:	89ab      	ldrh	r3, [r5, #12]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d907      	bls.n	800409c <_fwalk_sglue+0x38>
 800408c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004090:	3301      	adds	r3, #1
 8004092:	d003      	beq.n	800409c <_fwalk_sglue+0x38>
 8004094:	4629      	mov	r1, r5
 8004096:	4638      	mov	r0, r7
 8004098:	47c0      	blx	r8
 800409a:	4306      	orrs	r6, r0
 800409c:	3568      	adds	r5, #104	@ 0x68
 800409e:	e7e9      	b.n	8004074 <_fwalk_sglue+0x10>

080040a0 <iprintf>:
 80040a0:	b40f      	push	{r0, r1, r2, r3}
 80040a2:	b507      	push	{r0, r1, r2, lr}
 80040a4:	4906      	ldr	r1, [pc, #24]	@ (80040c0 <iprintf+0x20>)
 80040a6:	ab04      	add	r3, sp, #16
 80040a8:	6808      	ldr	r0, [r1, #0]
 80040aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80040ae:	6881      	ldr	r1, [r0, #8]
 80040b0:	9301      	str	r3, [sp, #4]
 80040b2:	f000 f9e9 	bl	8004488 <_vfiprintf_r>
 80040b6:	b003      	add	sp, #12
 80040b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80040bc:	b004      	add	sp, #16
 80040be:	4770      	bx	lr
 80040c0:	20000024 	.word	0x20000024

080040c4 <__sread>:
 80040c4:	b510      	push	{r4, lr}
 80040c6:	460c      	mov	r4, r1
 80040c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040cc:	f000 f868 	bl	80041a0 <_read_r>
 80040d0:	2800      	cmp	r0, #0
 80040d2:	bfab      	itete	ge
 80040d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80040d6:	89a3      	ldrhlt	r3, [r4, #12]
 80040d8:	181b      	addge	r3, r3, r0
 80040da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80040de:	bfac      	ite	ge
 80040e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80040e2:	81a3      	strhlt	r3, [r4, #12]
 80040e4:	bd10      	pop	{r4, pc}

080040e6 <__swrite>:
 80040e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040ea:	461f      	mov	r7, r3
 80040ec:	898b      	ldrh	r3, [r1, #12]
 80040ee:	05db      	lsls	r3, r3, #23
 80040f0:	4605      	mov	r5, r0
 80040f2:	460c      	mov	r4, r1
 80040f4:	4616      	mov	r6, r2
 80040f6:	d505      	bpl.n	8004104 <__swrite+0x1e>
 80040f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040fc:	2302      	movs	r3, #2
 80040fe:	2200      	movs	r2, #0
 8004100:	f000 f83c 	bl	800417c <_lseek_r>
 8004104:	89a3      	ldrh	r3, [r4, #12]
 8004106:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800410a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800410e:	81a3      	strh	r3, [r4, #12]
 8004110:	4632      	mov	r2, r6
 8004112:	463b      	mov	r3, r7
 8004114:	4628      	mov	r0, r5
 8004116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800411a:	f000 b853 	b.w	80041c4 <_write_r>

0800411e <__sseek>:
 800411e:	b510      	push	{r4, lr}
 8004120:	460c      	mov	r4, r1
 8004122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004126:	f000 f829 	bl	800417c <_lseek_r>
 800412a:	1c43      	adds	r3, r0, #1
 800412c:	89a3      	ldrh	r3, [r4, #12]
 800412e:	bf15      	itete	ne
 8004130:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004132:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004136:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800413a:	81a3      	strheq	r3, [r4, #12]
 800413c:	bf18      	it	ne
 800413e:	81a3      	strhne	r3, [r4, #12]
 8004140:	bd10      	pop	{r4, pc}

08004142 <__sclose>:
 8004142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004146:	f000 b809 	b.w	800415c <_close_r>

0800414a <memset>:
 800414a:	4402      	add	r2, r0
 800414c:	4603      	mov	r3, r0
 800414e:	4293      	cmp	r3, r2
 8004150:	d100      	bne.n	8004154 <memset+0xa>
 8004152:	4770      	bx	lr
 8004154:	f803 1b01 	strb.w	r1, [r3], #1
 8004158:	e7f9      	b.n	800414e <memset+0x4>
	...

0800415c <_close_r>:
 800415c:	b538      	push	{r3, r4, r5, lr}
 800415e:	4d06      	ldr	r5, [pc, #24]	@ (8004178 <_close_r+0x1c>)
 8004160:	2300      	movs	r3, #0
 8004162:	4604      	mov	r4, r0
 8004164:	4608      	mov	r0, r1
 8004166:	602b      	str	r3, [r5, #0]
 8004168:	f7fd f9be 	bl	80014e8 <_close>
 800416c:	1c43      	adds	r3, r0, #1
 800416e:	d102      	bne.n	8004176 <_close_r+0x1a>
 8004170:	682b      	ldr	r3, [r5, #0]
 8004172:	b103      	cbz	r3, 8004176 <_close_r+0x1a>
 8004174:	6023      	str	r3, [r4, #0]
 8004176:	bd38      	pop	{r3, r4, r5, pc}
 8004178:	20000338 	.word	0x20000338

0800417c <_lseek_r>:
 800417c:	b538      	push	{r3, r4, r5, lr}
 800417e:	4d07      	ldr	r5, [pc, #28]	@ (800419c <_lseek_r+0x20>)
 8004180:	4604      	mov	r4, r0
 8004182:	4608      	mov	r0, r1
 8004184:	4611      	mov	r1, r2
 8004186:	2200      	movs	r2, #0
 8004188:	602a      	str	r2, [r5, #0]
 800418a:	461a      	mov	r2, r3
 800418c:	f7fd f9d3 	bl	8001536 <_lseek>
 8004190:	1c43      	adds	r3, r0, #1
 8004192:	d102      	bne.n	800419a <_lseek_r+0x1e>
 8004194:	682b      	ldr	r3, [r5, #0]
 8004196:	b103      	cbz	r3, 800419a <_lseek_r+0x1e>
 8004198:	6023      	str	r3, [r4, #0]
 800419a:	bd38      	pop	{r3, r4, r5, pc}
 800419c:	20000338 	.word	0x20000338

080041a0 <_read_r>:
 80041a0:	b538      	push	{r3, r4, r5, lr}
 80041a2:	4d07      	ldr	r5, [pc, #28]	@ (80041c0 <_read_r+0x20>)
 80041a4:	4604      	mov	r4, r0
 80041a6:	4608      	mov	r0, r1
 80041a8:	4611      	mov	r1, r2
 80041aa:	2200      	movs	r2, #0
 80041ac:	602a      	str	r2, [r5, #0]
 80041ae:	461a      	mov	r2, r3
 80041b0:	f7fd f961 	bl	8001476 <_read>
 80041b4:	1c43      	adds	r3, r0, #1
 80041b6:	d102      	bne.n	80041be <_read_r+0x1e>
 80041b8:	682b      	ldr	r3, [r5, #0]
 80041ba:	b103      	cbz	r3, 80041be <_read_r+0x1e>
 80041bc:	6023      	str	r3, [r4, #0]
 80041be:	bd38      	pop	{r3, r4, r5, pc}
 80041c0:	20000338 	.word	0x20000338

080041c4 <_write_r>:
 80041c4:	b538      	push	{r3, r4, r5, lr}
 80041c6:	4d07      	ldr	r5, [pc, #28]	@ (80041e4 <_write_r+0x20>)
 80041c8:	4604      	mov	r4, r0
 80041ca:	4608      	mov	r0, r1
 80041cc:	4611      	mov	r1, r2
 80041ce:	2200      	movs	r2, #0
 80041d0:	602a      	str	r2, [r5, #0]
 80041d2:	461a      	mov	r2, r3
 80041d4:	f7fd f96c 	bl	80014b0 <_write>
 80041d8:	1c43      	adds	r3, r0, #1
 80041da:	d102      	bne.n	80041e2 <_write_r+0x1e>
 80041dc:	682b      	ldr	r3, [r5, #0]
 80041de:	b103      	cbz	r3, 80041e2 <_write_r+0x1e>
 80041e0:	6023      	str	r3, [r4, #0]
 80041e2:	bd38      	pop	{r3, r4, r5, pc}
 80041e4:	20000338 	.word	0x20000338

080041e8 <__errno>:
 80041e8:	4b01      	ldr	r3, [pc, #4]	@ (80041f0 <__errno+0x8>)
 80041ea:	6818      	ldr	r0, [r3, #0]
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	20000024 	.word	0x20000024

080041f4 <__libc_init_array>:
 80041f4:	b570      	push	{r4, r5, r6, lr}
 80041f6:	4d0d      	ldr	r5, [pc, #52]	@ (800422c <__libc_init_array+0x38>)
 80041f8:	4c0d      	ldr	r4, [pc, #52]	@ (8004230 <__libc_init_array+0x3c>)
 80041fa:	1b64      	subs	r4, r4, r5
 80041fc:	10a4      	asrs	r4, r4, #2
 80041fe:	2600      	movs	r6, #0
 8004200:	42a6      	cmp	r6, r4
 8004202:	d109      	bne.n	8004218 <__libc_init_array+0x24>
 8004204:	4d0b      	ldr	r5, [pc, #44]	@ (8004234 <__libc_init_array+0x40>)
 8004206:	4c0c      	ldr	r4, [pc, #48]	@ (8004238 <__libc_init_array+0x44>)
 8004208:	f000 fdb6 	bl	8004d78 <_init>
 800420c:	1b64      	subs	r4, r4, r5
 800420e:	10a4      	asrs	r4, r4, #2
 8004210:	2600      	movs	r6, #0
 8004212:	42a6      	cmp	r6, r4
 8004214:	d105      	bne.n	8004222 <__libc_init_array+0x2e>
 8004216:	bd70      	pop	{r4, r5, r6, pc}
 8004218:	f855 3b04 	ldr.w	r3, [r5], #4
 800421c:	4798      	blx	r3
 800421e:	3601      	adds	r6, #1
 8004220:	e7ee      	b.n	8004200 <__libc_init_array+0xc>
 8004222:	f855 3b04 	ldr.w	r3, [r5], #4
 8004226:	4798      	blx	r3
 8004228:	3601      	adds	r6, #1
 800422a:	e7f2      	b.n	8004212 <__libc_init_array+0x1e>
 800422c:	08004edc 	.word	0x08004edc
 8004230:	08004edc 	.word	0x08004edc
 8004234:	08004edc 	.word	0x08004edc
 8004238:	08004ee4 	.word	0x08004ee4

0800423c <__retarget_lock_init_recursive>:
 800423c:	4770      	bx	lr

0800423e <__retarget_lock_acquire_recursive>:
 800423e:	4770      	bx	lr

08004240 <__retarget_lock_release_recursive>:
 8004240:	4770      	bx	lr
	...

08004244 <_free_r>:
 8004244:	b538      	push	{r3, r4, r5, lr}
 8004246:	4605      	mov	r5, r0
 8004248:	2900      	cmp	r1, #0
 800424a:	d041      	beq.n	80042d0 <_free_r+0x8c>
 800424c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004250:	1f0c      	subs	r4, r1, #4
 8004252:	2b00      	cmp	r3, #0
 8004254:	bfb8      	it	lt
 8004256:	18e4      	addlt	r4, r4, r3
 8004258:	f000 f8e0 	bl	800441c <__malloc_lock>
 800425c:	4a1d      	ldr	r2, [pc, #116]	@ (80042d4 <_free_r+0x90>)
 800425e:	6813      	ldr	r3, [r2, #0]
 8004260:	b933      	cbnz	r3, 8004270 <_free_r+0x2c>
 8004262:	6063      	str	r3, [r4, #4]
 8004264:	6014      	str	r4, [r2, #0]
 8004266:	4628      	mov	r0, r5
 8004268:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800426c:	f000 b8dc 	b.w	8004428 <__malloc_unlock>
 8004270:	42a3      	cmp	r3, r4
 8004272:	d908      	bls.n	8004286 <_free_r+0x42>
 8004274:	6820      	ldr	r0, [r4, #0]
 8004276:	1821      	adds	r1, r4, r0
 8004278:	428b      	cmp	r3, r1
 800427a:	bf01      	itttt	eq
 800427c:	6819      	ldreq	r1, [r3, #0]
 800427e:	685b      	ldreq	r3, [r3, #4]
 8004280:	1809      	addeq	r1, r1, r0
 8004282:	6021      	streq	r1, [r4, #0]
 8004284:	e7ed      	b.n	8004262 <_free_r+0x1e>
 8004286:	461a      	mov	r2, r3
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	b10b      	cbz	r3, 8004290 <_free_r+0x4c>
 800428c:	42a3      	cmp	r3, r4
 800428e:	d9fa      	bls.n	8004286 <_free_r+0x42>
 8004290:	6811      	ldr	r1, [r2, #0]
 8004292:	1850      	adds	r0, r2, r1
 8004294:	42a0      	cmp	r0, r4
 8004296:	d10b      	bne.n	80042b0 <_free_r+0x6c>
 8004298:	6820      	ldr	r0, [r4, #0]
 800429a:	4401      	add	r1, r0
 800429c:	1850      	adds	r0, r2, r1
 800429e:	4283      	cmp	r3, r0
 80042a0:	6011      	str	r1, [r2, #0]
 80042a2:	d1e0      	bne.n	8004266 <_free_r+0x22>
 80042a4:	6818      	ldr	r0, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	6053      	str	r3, [r2, #4]
 80042aa:	4408      	add	r0, r1
 80042ac:	6010      	str	r0, [r2, #0]
 80042ae:	e7da      	b.n	8004266 <_free_r+0x22>
 80042b0:	d902      	bls.n	80042b8 <_free_r+0x74>
 80042b2:	230c      	movs	r3, #12
 80042b4:	602b      	str	r3, [r5, #0]
 80042b6:	e7d6      	b.n	8004266 <_free_r+0x22>
 80042b8:	6820      	ldr	r0, [r4, #0]
 80042ba:	1821      	adds	r1, r4, r0
 80042bc:	428b      	cmp	r3, r1
 80042be:	bf04      	itt	eq
 80042c0:	6819      	ldreq	r1, [r3, #0]
 80042c2:	685b      	ldreq	r3, [r3, #4]
 80042c4:	6063      	str	r3, [r4, #4]
 80042c6:	bf04      	itt	eq
 80042c8:	1809      	addeq	r1, r1, r0
 80042ca:	6021      	streq	r1, [r4, #0]
 80042cc:	6054      	str	r4, [r2, #4]
 80042ce:	e7ca      	b.n	8004266 <_free_r+0x22>
 80042d0:	bd38      	pop	{r3, r4, r5, pc}
 80042d2:	bf00      	nop
 80042d4:	20000344 	.word	0x20000344

080042d8 <sbrk_aligned>:
 80042d8:	b570      	push	{r4, r5, r6, lr}
 80042da:	4e0f      	ldr	r6, [pc, #60]	@ (8004318 <sbrk_aligned+0x40>)
 80042dc:	460c      	mov	r4, r1
 80042de:	6831      	ldr	r1, [r6, #0]
 80042e0:	4605      	mov	r5, r0
 80042e2:	b911      	cbnz	r1, 80042ea <sbrk_aligned+0x12>
 80042e4:	f000 fcb4 	bl	8004c50 <_sbrk_r>
 80042e8:	6030      	str	r0, [r6, #0]
 80042ea:	4621      	mov	r1, r4
 80042ec:	4628      	mov	r0, r5
 80042ee:	f000 fcaf 	bl	8004c50 <_sbrk_r>
 80042f2:	1c43      	adds	r3, r0, #1
 80042f4:	d103      	bne.n	80042fe <sbrk_aligned+0x26>
 80042f6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80042fa:	4620      	mov	r0, r4
 80042fc:	bd70      	pop	{r4, r5, r6, pc}
 80042fe:	1cc4      	adds	r4, r0, #3
 8004300:	f024 0403 	bic.w	r4, r4, #3
 8004304:	42a0      	cmp	r0, r4
 8004306:	d0f8      	beq.n	80042fa <sbrk_aligned+0x22>
 8004308:	1a21      	subs	r1, r4, r0
 800430a:	4628      	mov	r0, r5
 800430c:	f000 fca0 	bl	8004c50 <_sbrk_r>
 8004310:	3001      	adds	r0, #1
 8004312:	d1f2      	bne.n	80042fa <sbrk_aligned+0x22>
 8004314:	e7ef      	b.n	80042f6 <sbrk_aligned+0x1e>
 8004316:	bf00      	nop
 8004318:	20000340 	.word	0x20000340

0800431c <_malloc_r>:
 800431c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004320:	1ccd      	adds	r5, r1, #3
 8004322:	f025 0503 	bic.w	r5, r5, #3
 8004326:	3508      	adds	r5, #8
 8004328:	2d0c      	cmp	r5, #12
 800432a:	bf38      	it	cc
 800432c:	250c      	movcc	r5, #12
 800432e:	2d00      	cmp	r5, #0
 8004330:	4606      	mov	r6, r0
 8004332:	db01      	blt.n	8004338 <_malloc_r+0x1c>
 8004334:	42a9      	cmp	r1, r5
 8004336:	d904      	bls.n	8004342 <_malloc_r+0x26>
 8004338:	230c      	movs	r3, #12
 800433a:	6033      	str	r3, [r6, #0]
 800433c:	2000      	movs	r0, #0
 800433e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004342:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004418 <_malloc_r+0xfc>
 8004346:	f000 f869 	bl	800441c <__malloc_lock>
 800434a:	f8d8 3000 	ldr.w	r3, [r8]
 800434e:	461c      	mov	r4, r3
 8004350:	bb44      	cbnz	r4, 80043a4 <_malloc_r+0x88>
 8004352:	4629      	mov	r1, r5
 8004354:	4630      	mov	r0, r6
 8004356:	f7ff ffbf 	bl	80042d8 <sbrk_aligned>
 800435a:	1c43      	adds	r3, r0, #1
 800435c:	4604      	mov	r4, r0
 800435e:	d158      	bne.n	8004412 <_malloc_r+0xf6>
 8004360:	f8d8 4000 	ldr.w	r4, [r8]
 8004364:	4627      	mov	r7, r4
 8004366:	2f00      	cmp	r7, #0
 8004368:	d143      	bne.n	80043f2 <_malloc_r+0xd6>
 800436a:	2c00      	cmp	r4, #0
 800436c:	d04b      	beq.n	8004406 <_malloc_r+0xea>
 800436e:	6823      	ldr	r3, [r4, #0]
 8004370:	4639      	mov	r1, r7
 8004372:	4630      	mov	r0, r6
 8004374:	eb04 0903 	add.w	r9, r4, r3
 8004378:	f000 fc6a 	bl	8004c50 <_sbrk_r>
 800437c:	4581      	cmp	r9, r0
 800437e:	d142      	bne.n	8004406 <_malloc_r+0xea>
 8004380:	6821      	ldr	r1, [r4, #0]
 8004382:	1a6d      	subs	r5, r5, r1
 8004384:	4629      	mov	r1, r5
 8004386:	4630      	mov	r0, r6
 8004388:	f7ff ffa6 	bl	80042d8 <sbrk_aligned>
 800438c:	3001      	adds	r0, #1
 800438e:	d03a      	beq.n	8004406 <_malloc_r+0xea>
 8004390:	6823      	ldr	r3, [r4, #0]
 8004392:	442b      	add	r3, r5
 8004394:	6023      	str	r3, [r4, #0]
 8004396:	f8d8 3000 	ldr.w	r3, [r8]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	bb62      	cbnz	r2, 80043f8 <_malloc_r+0xdc>
 800439e:	f8c8 7000 	str.w	r7, [r8]
 80043a2:	e00f      	b.n	80043c4 <_malloc_r+0xa8>
 80043a4:	6822      	ldr	r2, [r4, #0]
 80043a6:	1b52      	subs	r2, r2, r5
 80043a8:	d420      	bmi.n	80043ec <_malloc_r+0xd0>
 80043aa:	2a0b      	cmp	r2, #11
 80043ac:	d917      	bls.n	80043de <_malloc_r+0xc2>
 80043ae:	1961      	adds	r1, r4, r5
 80043b0:	42a3      	cmp	r3, r4
 80043b2:	6025      	str	r5, [r4, #0]
 80043b4:	bf18      	it	ne
 80043b6:	6059      	strne	r1, [r3, #4]
 80043b8:	6863      	ldr	r3, [r4, #4]
 80043ba:	bf08      	it	eq
 80043bc:	f8c8 1000 	streq.w	r1, [r8]
 80043c0:	5162      	str	r2, [r4, r5]
 80043c2:	604b      	str	r3, [r1, #4]
 80043c4:	4630      	mov	r0, r6
 80043c6:	f000 f82f 	bl	8004428 <__malloc_unlock>
 80043ca:	f104 000b 	add.w	r0, r4, #11
 80043ce:	1d23      	adds	r3, r4, #4
 80043d0:	f020 0007 	bic.w	r0, r0, #7
 80043d4:	1ac2      	subs	r2, r0, r3
 80043d6:	bf1c      	itt	ne
 80043d8:	1a1b      	subne	r3, r3, r0
 80043da:	50a3      	strne	r3, [r4, r2]
 80043dc:	e7af      	b.n	800433e <_malloc_r+0x22>
 80043de:	6862      	ldr	r2, [r4, #4]
 80043e0:	42a3      	cmp	r3, r4
 80043e2:	bf0c      	ite	eq
 80043e4:	f8c8 2000 	streq.w	r2, [r8]
 80043e8:	605a      	strne	r2, [r3, #4]
 80043ea:	e7eb      	b.n	80043c4 <_malloc_r+0xa8>
 80043ec:	4623      	mov	r3, r4
 80043ee:	6864      	ldr	r4, [r4, #4]
 80043f0:	e7ae      	b.n	8004350 <_malloc_r+0x34>
 80043f2:	463c      	mov	r4, r7
 80043f4:	687f      	ldr	r7, [r7, #4]
 80043f6:	e7b6      	b.n	8004366 <_malloc_r+0x4a>
 80043f8:	461a      	mov	r2, r3
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	42a3      	cmp	r3, r4
 80043fe:	d1fb      	bne.n	80043f8 <_malloc_r+0xdc>
 8004400:	2300      	movs	r3, #0
 8004402:	6053      	str	r3, [r2, #4]
 8004404:	e7de      	b.n	80043c4 <_malloc_r+0xa8>
 8004406:	230c      	movs	r3, #12
 8004408:	6033      	str	r3, [r6, #0]
 800440a:	4630      	mov	r0, r6
 800440c:	f000 f80c 	bl	8004428 <__malloc_unlock>
 8004410:	e794      	b.n	800433c <_malloc_r+0x20>
 8004412:	6005      	str	r5, [r0, #0]
 8004414:	e7d6      	b.n	80043c4 <_malloc_r+0xa8>
 8004416:	bf00      	nop
 8004418:	20000344 	.word	0x20000344

0800441c <__malloc_lock>:
 800441c:	4801      	ldr	r0, [pc, #4]	@ (8004424 <__malloc_lock+0x8>)
 800441e:	f7ff bf0e 	b.w	800423e <__retarget_lock_acquire_recursive>
 8004422:	bf00      	nop
 8004424:	2000033c 	.word	0x2000033c

08004428 <__malloc_unlock>:
 8004428:	4801      	ldr	r0, [pc, #4]	@ (8004430 <__malloc_unlock+0x8>)
 800442a:	f7ff bf09 	b.w	8004240 <__retarget_lock_release_recursive>
 800442e:	bf00      	nop
 8004430:	2000033c 	.word	0x2000033c

08004434 <__sfputc_r>:
 8004434:	6893      	ldr	r3, [r2, #8]
 8004436:	3b01      	subs	r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	b410      	push	{r4}
 800443c:	6093      	str	r3, [r2, #8]
 800443e:	da08      	bge.n	8004452 <__sfputc_r+0x1e>
 8004440:	6994      	ldr	r4, [r2, #24]
 8004442:	42a3      	cmp	r3, r4
 8004444:	db01      	blt.n	800444a <__sfputc_r+0x16>
 8004446:	290a      	cmp	r1, #10
 8004448:	d103      	bne.n	8004452 <__sfputc_r+0x1e>
 800444a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800444e:	f000 bb6b 	b.w	8004b28 <__swbuf_r>
 8004452:	6813      	ldr	r3, [r2, #0]
 8004454:	1c58      	adds	r0, r3, #1
 8004456:	6010      	str	r0, [r2, #0]
 8004458:	7019      	strb	r1, [r3, #0]
 800445a:	4608      	mov	r0, r1
 800445c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004460:	4770      	bx	lr

08004462 <__sfputs_r>:
 8004462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004464:	4606      	mov	r6, r0
 8004466:	460f      	mov	r7, r1
 8004468:	4614      	mov	r4, r2
 800446a:	18d5      	adds	r5, r2, r3
 800446c:	42ac      	cmp	r4, r5
 800446e:	d101      	bne.n	8004474 <__sfputs_r+0x12>
 8004470:	2000      	movs	r0, #0
 8004472:	e007      	b.n	8004484 <__sfputs_r+0x22>
 8004474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004478:	463a      	mov	r2, r7
 800447a:	4630      	mov	r0, r6
 800447c:	f7ff ffda 	bl	8004434 <__sfputc_r>
 8004480:	1c43      	adds	r3, r0, #1
 8004482:	d1f3      	bne.n	800446c <__sfputs_r+0xa>
 8004484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004488 <_vfiprintf_r>:
 8004488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800448c:	460d      	mov	r5, r1
 800448e:	b09d      	sub	sp, #116	@ 0x74
 8004490:	4614      	mov	r4, r2
 8004492:	4698      	mov	r8, r3
 8004494:	4606      	mov	r6, r0
 8004496:	b118      	cbz	r0, 80044a0 <_vfiprintf_r+0x18>
 8004498:	6a03      	ldr	r3, [r0, #32]
 800449a:	b90b      	cbnz	r3, 80044a0 <_vfiprintf_r+0x18>
 800449c:	f7ff fdca 	bl	8004034 <__sinit>
 80044a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80044a2:	07d9      	lsls	r1, r3, #31
 80044a4:	d405      	bmi.n	80044b2 <_vfiprintf_r+0x2a>
 80044a6:	89ab      	ldrh	r3, [r5, #12]
 80044a8:	059a      	lsls	r2, r3, #22
 80044aa:	d402      	bmi.n	80044b2 <_vfiprintf_r+0x2a>
 80044ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044ae:	f7ff fec6 	bl	800423e <__retarget_lock_acquire_recursive>
 80044b2:	89ab      	ldrh	r3, [r5, #12]
 80044b4:	071b      	lsls	r3, r3, #28
 80044b6:	d501      	bpl.n	80044bc <_vfiprintf_r+0x34>
 80044b8:	692b      	ldr	r3, [r5, #16]
 80044ba:	b99b      	cbnz	r3, 80044e4 <_vfiprintf_r+0x5c>
 80044bc:	4629      	mov	r1, r5
 80044be:	4630      	mov	r0, r6
 80044c0:	f000 fb70 	bl	8004ba4 <__swsetup_r>
 80044c4:	b170      	cbz	r0, 80044e4 <_vfiprintf_r+0x5c>
 80044c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80044c8:	07dc      	lsls	r4, r3, #31
 80044ca:	d504      	bpl.n	80044d6 <_vfiprintf_r+0x4e>
 80044cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80044d0:	b01d      	add	sp, #116	@ 0x74
 80044d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044d6:	89ab      	ldrh	r3, [r5, #12]
 80044d8:	0598      	lsls	r0, r3, #22
 80044da:	d4f7      	bmi.n	80044cc <_vfiprintf_r+0x44>
 80044dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044de:	f7ff feaf 	bl	8004240 <__retarget_lock_release_recursive>
 80044e2:	e7f3      	b.n	80044cc <_vfiprintf_r+0x44>
 80044e4:	2300      	movs	r3, #0
 80044e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80044e8:	2320      	movs	r3, #32
 80044ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80044ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80044f2:	2330      	movs	r3, #48	@ 0x30
 80044f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80046a4 <_vfiprintf_r+0x21c>
 80044f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80044fc:	f04f 0901 	mov.w	r9, #1
 8004500:	4623      	mov	r3, r4
 8004502:	469a      	mov	sl, r3
 8004504:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004508:	b10a      	cbz	r2, 800450e <_vfiprintf_r+0x86>
 800450a:	2a25      	cmp	r2, #37	@ 0x25
 800450c:	d1f9      	bne.n	8004502 <_vfiprintf_r+0x7a>
 800450e:	ebba 0b04 	subs.w	fp, sl, r4
 8004512:	d00b      	beq.n	800452c <_vfiprintf_r+0xa4>
 8004514:	465b      	mov	r3, fp
 8004516:	4622      	mov	r2, r4
 8004518:	4629      	mov	r1, r5
 800451a:	4630      	mov	r0, r6
 800451c:	f7ff ffa1 	bl	8004462 <__sfputs_r>
 8004520:	3001      	adds	r0, #1
 8004522:	f000 80a7 	beq.w	8004674 <_vfiprintf_r+0x1ec>
 8004526:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004528:	445a      	add	r2, fp
 800452a:	9209      	str	r2, [sp, #36]	@ 0x24
 800452c:	f89a 3000 	ldrb.w	r3, [sl]
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 809f 	beq.w	8004674 <_vfiprintf_r+0x1ec>
 8004536:	2300      	movs	r3, #0
 8004538:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800453c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004540:	f10a 0a01 	add.w	sl, sl, #1
 8004544:	9304      	str	r3, [sp, #16]
 8004546:	9307      	str	r3, [sp, #28]
 8004548:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800454c:	931a      	str	r3, [sp, #104]	@ 0x68
 800454e:	4654      	mov	r4, sl
 8004550:	2205      	movs	r2, #5
 8004552:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004556:	4853      	ldr	r0, [pc, #332]	@ (80046a4 <_vfiprintf_r+0x21c>)
 8004558:	f7fb fe62 	bl	8000220 <memchr>
 800455c:	9a04      	ldr	r2, [sp, #16]
 800455e:	b9d8      	cbnz	r0, 8004598 <_vfiprintf_r+0x110>
 8004560:	06d1      	lsls	r1, r2, #27
 8004562:	bf44      	itt	mi
 8004564:	2320      	movmi	r3, #32
 8004566:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800456a:	0713      	lsls	r3, r2, #28
 800456c:	bf44      	itt	mi
 800456e:	232b      	movmi	r3, #43	@ 0x2b
 8004570:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004574:	f89a 3000 	ldrb.w	r3, [sl]
 8004578:	2b2a      	cmp	r3, #42	@ 0x2a
 800457a:	d015      	beq.n	80045a8 <_vfiprintf_r+0x120>
 800457c:	9a07      	ldr	r2, [sp, #28]
 800457e:	4654      	mov	r4, sl
 8004580:	2000      	movs	r0, #0
 8004582:	f04f 0c0a 	mov.w	ip, #10
 8004586:	4621      	mov	r1, r4
 8004588:	f811 3b01 	ldrb.w	r3, [r1], #1
 800458c:	3b30      	subs	r3, #48	@ 0x30
 800458e:	2b09      	cmp	r3, #9
 8004590:	d94b      	bls.n	800462a <_vfiprintf_r+0x1a2>
 8004592:	b1b0      	cbz	r0, 80045c2 <_vfiprintf_r+0x13a>
 8004594:	9207      	str	r2, [sp, #28]
 8004596:	e014      	b.n	80045c2 <_vfiprintf_r+0x13a>
 8004598:	eba0 0308 	sub.w	r3, r0, r8
 800459c:	fa09 f303 	lsl.w	r3, r9, r3
 80045a0:	4313      	orrs	r3, r2
 80045a2:	9304      	str	r3, [sp, #16]
 80045a4:	46a2      	mov	sl, r4
 80045a6:	e7d2      	b.n	800454e <_vfiprintf_r+0xc6>
 80045a8:	9b03      	ldr	r3, [sp, #12]
 80045aa:	1d19      	adds	r1, r3, #4
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	9103      	str	r1, [sp, #12]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	bfbb      	ittet	lt
 80045b4:	425b      	neglt	r3, r3
 80045b6:	f042 0202 	orrlt.w	r2, r2, #2
 80045ba:	9307      	strge	r3, [sp, #28]
 80045bc:	9307      	strlt	r3, [sp, #28]
 80045be:	bfb8      	it	lt
 80045c0:	9204      	strlt	r2, [sp, #16]
 80045c2:	7823      	ldrb	r3, [r4, #0]
 80045c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80045c6:	d10a      	bne.n	80045de <_vfiprintf_r+0x156>
 80045c8:	7863      	ldrb	r3, [r4, #1]
 80045ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80045cc:	d132      	bne.n	8004634 <_vfiprintf_r+0x1ac>
 80045ce:	9b03      	ldr	r3, [sp, #12]
 80045d0:	1d1a      	adds	r2, r3, #4
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	9203      	str	r2, [sp, #12]
 80045d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80045da:	3402      	adds	r4, #2
 80045dc:	9305      	str	r3, [sp, #20]
 80045de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80046b4 <_vfiprintf_r+0x22c>
 80045e2:	7821      	ldrb	r1, [r4, #0]
 80045e4:	2203      	movs	r2, #3
 80045e6:	4650      	mov	r0, sl
 80045e8:	f7fb fe1a 	bl	8000220 <memchr>
 80045ec:	b138      	cbz	r0, 80045fe <_vfiprintf_r+0x176>
 80045ee:	9b04      	ldr	r3, [sp, #16]
 80045f0:	eba0 000a 	sub.w	r0, r0, sl
 80045f4:	2240      	movs	r2, #64	@ 0x40
 80045f6:	4082      	lsls	r2, r0
 80045f8:	4313      	orrs	r3, r2
 80045fa:	3401      	adds	r4, #1
 80045fc:	9304      	str	r3, [sp, #16]
 80045fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004602:	4829      	ldr	r0, [pc, #164]	@ (80046a8 <_vfiprintf_r+0x220>)
 8004604:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004608:	2206      	movs	r2, #6
 800460a:	f7fb fe09 	bl	8000220 <memchr>
 800460e:	2800      	cmp	r0, #0
 8004610:	d03f      	beq.n	8004692 <_vfiprintf_r+0x20a>
 8004612:	4b26      	ldr	r3, [pc, #152]	@ (80046ac <_vfiprintf_r+0x224>)
 8004614:	bb1b      	cbnz	r3, 800465e <_vfiprintf_r+0x1d6>
 8004616:	9b03      	ldr	r3, [sp, #12]
 8004618:	3307      	adds	r3, #7
 800461a:	f023 0307 	bic.w	r3, r3, #7
 800461e:	3308      	adds	r3, #8
 8004620:	9303      	str	r3, [sp, #12]
 8004622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004624:	443b      	add	r3, r7
 8004626:	9309      	str	r3, [sp, #36]	@ 0x24
 8004628:	e76a      	b.n	8004500 <_vfiprintf_r+0x78>
 800462a:	fb0c 3202 	mla	r2, ip, r2, r3
 800462e:	460c      	mov	r4, r1
 8004630:	2001      	movs	r0, #1
 8004632:	e7a8      	b.n	8004586 <_vfiprintf_r+0xfe>
 8004634:	2300      	movs	r3, #0
 8004636:	3401      	adds	r4, #1
 8004638:	9305      	str	r3, [sp, #20]
 800463a:	4619      	mov	r1, r3
 800463c:	f04f 0c0a 	mov.w	ip, #10
 8004640:	4620      	mov	r0, r4
 8004642:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004646:	3a30      	subs	r2, #48	@ 0x30
 8004648:	2a09      	cmp	r2, #9
 800464a:	d903      	bls.n	8004654 <_vfiprintf_r+0x1cc>
 800464c:	2b00      	cmp	r3, #0
 800464e:	d0c6      	beq.n	80045de <_vfiprintf_r+0x156>
 8004650:	9105      	str	r1, [sp, #20]
 8004652:	e7c4      	b.n	80045de <_vfiprintf_r+0x156>
 8004654:	fb0c 2101 	mla	r1, ip, r1, r2
 8004658:	4604      	mov	r4, r0
 800465a:	2301      	movs	r3, #1
 800465c:	e7f0      	b.n	8004640 <_vfiprintf_r+0x1b8>
 800465e:	ab03      	add	r3, sp, #12
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	462a      	mov	r2, r5
 8004664:	4b12      	ldr	r3, [pc, #72]	@ (80046b0 <_vfiprintf_r+0x228>)
 8004666:	a904      	add	r1, sp, #16
 8004668:	4630      	mov	r0, r6
 800466a:	f3af 8000 	nop.w
 800466e:	4607      	mov	r7, r0
 8004670:	1c78      	adds	r0, r7, #1
 8004672:	d1d6      	bne.n	8004622 <_vfiprintf_r+0x19a>
 8004674:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004676:	07d9      	lsls	r1, r3, #31
 8004678:	d405      	bmi.n	8004686 <_vfiprintf_r+0x1fe>
 800467a:	89ab      	ldrh	r3, [r5, #12]
 800467c:	059a      	lsls	r2, r3, #22
 800467e:	d402      	bmi.n	8004686 <_vfiprintf_r+0x1fe>
 8004680:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004682:	f7ff fddd 	bl	8004240 <__retarget_lock_release_recursive>
 8004686:	89ab      	ldrh	r3, [r5, #12]
 8004688:	065b      	lsls	r3, r3, #25
 800468a:	f53f af1f 	bmi.w	80044cc <_vfiprintf_r+0x44>
 800468e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004690:	e71e      	b.n	80044d0 <_vfiprintf_r+0x48>
 8004692:	ab03      	add	r3, sp, #12
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	462a      	mov	r2, r5
 8004698:	4b05      	ldr	r3, [pc, #20]	@ (80046b0 <_vfiprintf_r+0x228>)
 800469a:	a904      	add	r1, sp, #16
 800469c:	4630      	mov	r0, r6
 800469e:	f000 f879 	bl	8004794 <_printf_i>
 80046a2:	e7e4      	b.n	800466e <_vfiprintf_r+0x1e6>
 80046a4:	08004ea0 	.word	0x08004ea0
 80046a8:	08004eaa 	.word	0x08004eaa
 80046ac:	00000000 	.word	0x00000000
 80046b0:	08004463 	.word	0x08004463
 80046b4:	08004ea6 	.word	0x08004ea6

080046b8 <_printf_common>:
 80046b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046bc:	4616      	mov	r6, r2
 80046be:	4698      	mov	r8, r3
 80046c0:	688a      	ldr	r2, [r1, #8]
 80046c2:	690b      	ldr	r3, [r1, #16]
 80046c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046c8:	4293      	cmp	r3, r2
 80046ca:	bfb8      	it	lt
 80046cc:	4613      	movlt	r3, r2
 80046ce:	6033      	str	r3, [r6, #0]
 80046d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80046d4:	4607      	mov	r7, r0
 80046d6:	460c      	mov	r4, r1
 80046d8:	b10a      	cbz	r2, 80046de <_printf_common+0x26>
 80046da:	3301      	adds	r3, #1
 80046dc:	6033      	str	r3, [r6, #0]
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	0699      	lsls	r1, r3, #26
 80046e2:	bf42      	ittt	mi
 80046e4:	6833      	ldrmi	r3, [r6, #0]
 80046e6:	3302      	addmi	r3, #2
 80046e8:	6033      	strmi	r3, [r6, #0]
 80046ea:	6825      	ldr	r5, [r4, #0]
 80046ec:	f015 0506 	ands.w	r5, r5, #6
 80046f0:	d106      	bne.n	8004700 <_printf_common+0x48>
 80046f2:	f104 0a19 	add.w	sl, r4, #25
 80046f6:	68e3      	ldr	r3, [r4, #12]
 80046f8:	6832      	ldr	r2, [r6, #0]
 80046fa:	1a9b      	subs	r3, r3, r2
 80046fc:	42ab      	cmp	r3, r5
 80046fe:	dc26      	bgt.n	800474e <_printf_common+0x96>
 8004700:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004704:	6822      	ldr	r2, [r4, #0]
 8004706:	3b00      	subs	r3, #0
 8004708:	bf18      	it	ne
 800470a:	2301      	movne	r3, #1
 800470c:	0692      	lsls	r2, r2, #26
 800470e:	d42b      	bmi.n	8004768 <_printf_common+0xb0>
 8004710:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004714:	4641      	mov	r1, r8
 8004716:	4638      	mov	r0, r7
 8004718:	47c8      	blx	r9
 800471a:	3001      	adds	r0, #1
 800471c:	d01e      	beq.n	800475c <_printf_common+0xa4>
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	6922      	ldr	r2, [r4, #16]
 8004722:	f003 0306 	and.w	r3, r3, #6
 8004726:	2b04      	cmp	r3, #4
 8004728:	bf02      	ittt	eq
 800472a:	68e5      	ldreq	r5, [r4, #12]
 800472c:	6833      	ldreq	r3, [r6, #0]
 800472e:	1aed      	subeq	r5, r5, r3
 8004730:	68a3      	ldr	r3, [r4, #8]
 8004732:	bf0c      	ite	eq
 8004734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004738:	2500      	movne	r5, #0
 800473a:	4293      	cmp	r3, r2
 800473c:	bfc4      	itt	gt
 800473e:	1a9b      	subgt	r3, r3, r2
 8004740:	18ed      	addgt	r5, r5, r3
 8004742:	2600      	movs	r6, #0
 8004744:	341a      	adds	r4, #26
 8004746:	42b5      	cmp	r5, r6
 8004748:	d11a      	bne.n	8004780 <_printf_common+0xc8>
 800474a:	2000      	movs	r0, #0
 800474c:	e008      	b.n	8004760 <_printf_common+0xa8>
 800474e:	2301      	movs	r3, #1
 8004750:	4652      	mov	r2, sl
 8004752:	4641      	mov	r1, r8
 8004754:	4638      	mov	r0, r7
 8004756:	47c8      	blx	r9
 8004758:	3001      	adds	r0, #1
 800475a:	d103      	bne.n	8004764 <_printf_common+0xac>
 800475c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004764:	3501      	adds	r5, #1
 8004766:	e7c6      	b.n	80046f6 <_printf_common+0x3e>
 8004768:	18e1      	adds	r1, r4, r3
 800476a:	1c5a      	adds	r2, r3, #1
 800476c:	2030      	movs	r0, #48	@ 0x30
 800476e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004772:	4422      	add	r2, r4
 8004774:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004778:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800477c:	3302      	adds	r3, #2
 800477e:	e7c7      	b.n	8004710 <_printf_common+0x58>
 8004780:	2301      	movs	r3, #1
 8004782:	4622      	mov	r2, r4
 8004784:	4641      	mov	r1, r8
 8004786:	4638      	mov	r0, r7
 8004788:	47c8      	blx	r9
 800478a:	3001      	adds	r0, #1
 800478c:	d0e6      	beq.n	800475c <_printf_common+0xa4>
 800478e:	3601      	adds	r6, #1
 8004790:	e7d9      	b.n	8004746 <_printf_common+0x8e>
	...

08004794 <_printf_i>:
 8004794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004798:	7e0f      	ldrb	r7, [r1, #24]
 800479a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800479c:	2f78      	cmp	r7, #120	@ 0x78
 800479e:	4691      	mov	r9, r2
 80047a0:	4680      	mov	r8, r0
 80047a2:	460c      	mov	r4, r1
 80047a4:	469a      	mov	sl, r3
 80047a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80047aa:	d807      	bhi.n	80047bc <_printf_i+0x28>
 80047ac:	2f62      	cmp	r7, #98	@ 0x62
 80047ae:	d80a      	bhi.n	80047c6 <_printf_i+0x32>
 80047b0:	2f00      	cmp	r7, #0
 80047b2:	f000 80d1 	beq.w	8004958 <_printf_i+0x1c4>
 80047b6:	2f58      	cmp	r7, #88	@ 0x58
 80047b8:	f000 80b8 	beq.w	800492c <_printf_i+0x198>
 80047bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80047c4:	e03a      	b.n	800483c <_printf_i+0xa8>
 80047c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80047ca:	2b15      	cmp	r3, #21
 80047cc:	d8f6      	bhi.n	80047bc <_printf_i+0x28>
 80047ce:	a101      	add	r1, pc, #4	@ (adr r1, 80047d4 <_printf_i+0x40>)
 80047d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047d4:	0800482d 	.word	0x0800482d
 80047d8:	08004841 	.word	0x08004841
 80047dc:	080047bd 	.word	0x080047bd
 80047e0:	080047bd 	.word	0x080047bd
 80047e4:	080047bd 	.word	0x080047bd
 80047e8:	080047bd 	.word	0x080047bd
 80047ec:	08004841 	.word	0x08004841
 80047f0:	080047bd 	.word	0x080047bd
 80047f4:	080047bd 	.word	0x080047bd
 80047f8:	080047bd 	.word	0x080047bd
 80047fc:	080047bd 	.word	0x080047bd
 8004800:	0800493f 	.word	0x0800493f
 8004804:	0800486b 	.word	0x0800486b
 8004808:	080048f9 	.word	0x080048f9
 800480c:	080047bd 	.word	0x080047bd
 8004810:	080047bd 	.word	0x080047bd
 8004814:	08004961 	.word	0x08004961
 8004818:	080047bd 	.word	0x080047bd
 800481c:	0800486b 	.word	0x0800486b
 8004820:	080047bd 	.word	0x080047bd
 8004824:	080047bd 	.word	0x080047bd
 8004828:	08004901 	.word	0x08004901
 800482c:	6833      	ldr	r3, [r6, #0]
 800482e:	1d1a      	adds	r2, r3, #4
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6032      	str	r2, [r6, #0]
 8004834:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004838:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800483c:	2301      	movs	r3, #1
 800483e:	e09c      	b.n	800497a <_printf_i+0x1e6>
 8004840:	6833      	ldr	r3, [r6, #0]
 8004842:	6820      	ldr	r0, [r4, #0]
 8004844:	1d19      	adds	r1, r3, #4
 8004846:	6031      	str	r1, [r6, #0]
 8004848:	0606      	lsls	r6, r0, #24
 800484a:	d501      	bpl.n	8004850 <_printf_i+0xbc>
 800484c:	681d      	ldr	r5, [r3, #0]
 800484e:	e003      	b.n	8004858 <_printf_i+0xc4>
 8004850:	0645      	lsls	r5, r0, #25
 8004852:	d5fb      	bpl.n	800484c <_printf_i+0xb8>
 8004854:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004858:	2d00      	cmp	r5, #0
 800485a:	da03      	bge.n	8004864 <_printf_i+0xd0>
 800485c:	232d      	movs	r3, #45	@ 0x2d
 800485e:	426d      	negs	r5, r5
 8004860:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004864:	4858      	ldr	r0, [pc, #352]	@ (80049c8 <_printf_i+0x234>)
 8004866:	230a      	movs	r3, #10
 8004868:	e011      	b.n	800488e <_printf_i+0xfa>
 800486a:	6821      	ldr	r1, [r4, #0]
 800486c:	6833      	ldr	r3, [r6, #0]
 800486e:	0608      	lsls	r0, r1, #24
 8004870:	f853 5b04 	ldr.w	r5, [r3], #4
 8004874:	d402      	bmi.n	800487c <_printf_i+0xe8>
 8004876:	0649      	lsls	r1, r1, #25
 8004878:	bf48      	it	mi
 800487a:	b2ad      	uxthmi	r5, r5
 800487c:	2f6f      	cmp	r7, #111	@ 0x6f
 800487e:	4852      	ldr	r0, [pc, #328]	@ (80049c8 <_printf_i+0x234>)
 8004880:	6033      	str	r3, [r6, #0]
 8004882:	bf14      	ite	ne
 8004884:	230a      	movne	r3, #10
 8004886:	2308      	moveq	r3, #8
 8004888:	2100      	movs	r1, #0
 800488a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800488e:	6866      	ldr	r6, [r4, #4]
 8004890:	60a6      	str	r6, [r4, #8]
 8004892:	2e00      	cmp	r6, #0
 8004894:	db05      	blt.n	80048a2 <_printf_i+0x10e>
 8004896:	6821      	ldr	r1, [r4, #0]
 8004898:	432e      	orrs	r6, r5
 800489a:	f021 0104 	bic.w	r1, r1, #4
 800489e:	6021      	str	r1, [r4, #0]
 80048a0:	d04b      	beq.n	800493a <_printf_i+0x1a6>
 80048a2:	4616      	mov	r6, r2
 80048a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80048a8:	fb03 5711 	mls	r7, r3, r1, r5
 80048ac:	5dc7      	ldrb	r7, [r0, r7]
 80048ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048b2:	462f      	mov	r7, r5
 80048b4:	42bb      	cmp	r3, r7
 80048b6:	460d      	mov	r5, r1
 80048b8:	d9f4      	bls.n	80048a4 <_printf_i+0x110>
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d10b      	bne.n	80048d6 <_printf_i+0x142>
 80048be:	6823      	ldr	r3, [r4, #0]
 80048c0:	07df      	lsls	r7, r3, #31
 80048c2:	d508      	bpl.n	80048d6 <_printf_i+0x142>
 80048c4:	6923      	ldr	r3, [r4, #16]
 80048c6:	6861      	ldr	r1, [r4, #4]
 80048c8:	4299      	cmp	r1, r3
 80048ca:	bfde      	ittt	le
 80048cc:	2330      	movle	r3, #48	@ 0x30
 80048ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048d2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80048d6:	1b92      	subs	r2, r2, r6
 80048d8:	6122      	str	r2, [r4, #16]
 80048da:	f8cd a000 	str.w	sl, [sp]
 80048de:	464b      	mov	r3, r9
 80048e0:	aa03      	add	r2, sp, #12
 80048e2:	4621      	mov	r1, r4
 80048e4:	4640      	mov	r0, r8
 80048e6:	f7ff fee7 	bl	80046b8 <_printf_common>
 80048ea:	3001      	adds	r0, #1
 80048ec:	d14a      	bne.n	8004984 <_printf_i+0x1f0>
 80048ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80048f2:	b004      	add	sp, #16
 80048f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048f8:	6823      	ldr	r3, [r4, #0]
 80048fa:	f043 0320 	orr.w	r3, r3, #32
 80048fe:	6023      	str	r3, [r4, #0]
 8004900:	4832      	ldr	r0, [pc, #200]	@ (80049cc <_printf_i+0x238>)
 8004902:	2778      	movs	r7, #120	@ 0x78
 8004904:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004908:	6823      	ldr	r3, [r4, #0]
 800490a:	6831      	ldr	r1, [r6, #0]
 800490c:	061f      	lsls	r7, r3, #24
 800490e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004912:	d402      	bmi.n	800491a <_printf_i+0x186>
 8004914:	065f      	lsls	r7, r3, #25
 8004916:	bf48      	it	mi
 8004918:	b2ad      	uxthmi	r5, r5
 800491a:	6031      	str	r1, [r6, #0]
 800491c:	07d9      	lsls	r1, r3, #31
 800491e:	bf44      	itt	mi
 8004920:	f043 0320 	orrmi.w	r3, r3, #32
 8004924:	6023      	strmi	r3, [r4, #0]
 8004926:	b11d      	cbz	r5, 8004930 <_printf_i+0x19c>
 8004928:	2310      	movs	r3, #16
 800492a:	e7ad      	b.n	8004888 <_printf_i+0xf4>
 800492c:	4826      	ldr	r0, [pc, #152]	@ (80049c8 <_printf_i+0x234>)
 800492e:	e7e9      	b.n	8004904 <_printf_i+0x170>
 8004930:	6823      	ldr	r3, [r4, #0]
 8004932:	f023 0320 	bic.w	r3, r3, #32
 8004936:	6023      	str	r3, [r4, #0]
 8004938:	e7f6      	b.n	8004928 <_printf_i+0x194>
 800493a:	4616      	mov	r6, r2
 800493c:	e7bd      	b.n	80048ba <_printf_i+0x126>
 800493e:	6833      	ldr	r3, [r6, #0]
 8004940:	6825      	ldr	r5, [r4, #0]
 8004942:	6961      	ldr	r1, [r4, #20]
 8004944:	1d18      	adds	r0, r3, #4
 8004946:	6030      	str	r0, [r6, #0]
 8004948:	062e      	lsls	r6, r5, #24
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	d501      	bpl.n	8004952 <_printf_i+0x1be>
 800494e:	6019      	str	r1, [r3, #0]
 8004950:	e002      	b.n	8004958 <_printf_i+0x1c4>
 8004952:	0668      	lsls	r0, r5, #25
 8004954:	d5fb      	bpl.n	800494e <_printf_i+0x1ba>
 8004956:	8019      	strh	r1, [r3, #0]
 8004958:	2300      	movs	r3, #0
 800495a:	6123      	str	r3, [r4, #16]
 800495c:	4616      	mov	r6, r2
 800495e:	e7bc      	b.n	80048da <_printf_i+0x146>
 8004960:	6833      	ldr	r3, [r6, #0]
 8004962:	1d1a      	adds	r2, r3, #4
 8004964:	6032      	str	r2, [r6, #0]
 8004966:	681e      	ldr	r6, [r3, #0]
 8004968:	6862      	ldr	r2, [r4, #4]
 800496a:	2100      	movs	r1, #0
 800496c:	4630      	mov	r0, r6
 800496e:	f7fb fc57 	bl	8000220 <memchr>
 8004972:	b108      	cbz	r0, 8004978 <_printf_i+0x1e4>
 8004974:	1b80      	subs	r0, r0, r6
 8004976:	6060      	str	r0, [r4, #4]
 8004978:	6863      	ldr	r3, [r4, #4]
 800497a:	6123      	str	r3, [r4, #16]
 800497c:	2300      	movs	r3, #0
 800497e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004982:	e7aa      	b.n	80048da <_printf_i+0x146>
 8004984:	6923      	ldr	r3, [r4, #16]
 8004986:	4632      	mov	r2, r6
 8004988:	4649      	mov	r1, r9
 800498a:	4640      	mov	r0, r8
 800498c:	47d0      	blx	sl
 800498e:	3001      	adds	r0, #1
 8004990:	d0ad      	beq.n	80048ee <_printf_i+0x15a>
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	079b      	lsls	r3, r3, #30
 8004996:	d413      	bmi.n	80049c0 <_printf_i+0x22c>
 8004998:	68e0      	ldr	r0, [r4, #12]
 800499a:	9b03      	ldr	r3, [sp, #12]
 800499c:	4298      	cmp	r0, r3
 800499e:	bfb8      	it	lt
 80049a0:	4618      	movlt	r0, r3
 80049a2:	e7a6      	b.n	80048f2 <_printf_i+0x15e>
 80049a4:	2301      	movs	r3, #1
 80049a6:	4632      	mov	r2, r6
 80049a8:	4649      	mov	r1, r9
 80049aa:	4640      	mov	r0, r8
 80049ac:	47d0      	blx	sl
 80049ae:	3001      	adds	r0, #1
 80049b0:	d09d      	beq.n	80048ee <_printf_i+0x15a>
 80049b2:	3501      	adds	r5, #1
 80049b4:	68e3      	ldr	r3, [r4, #12]
 80049b6:	9903      	ldr	r1, [sp, #12]
 80049b8:	1a5b      	subs	r3, r3, r1
 80049ba:	42ab      	cmp	r3, r5
 80049bc:	dcf2      	bgt.n	80049a4 <_printf_i+0x210>
 80049be:	e7eb      	b.n	8004998 <_printf_i+0x204>
 80049c0:	2500      	movs	r5, #0
 80049c2:	f104 0619 	add.w	r6, r4, #25
 80049c6:	e7f5      	b.n	80049b4 <_printf_i+0x220>
 80049c8:	08004eb1 	.word	0x08004eb1
 80049cc:	08004ec2 	.word	0x08004ec2

080049d0 <__sflush_r>:
 80049d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80049d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049d8:	0716      	lsls	r6, r2, #28
 80049da:	4605      	mov	r5, r0
 80049dc:	460c      	mov	r4, r1
 80049de:	d454      	bmi.n	8004a8a <__sflush_r+0xba>
 80049e0:	684b      	ldr	r3, [r1, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	dc02      	bgt.n	80049ec <__sflush_r+0x1c>
 80049e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	dd48      	ble.n	8004a7e <__sflush_r+0xae>
 80049ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80049ee:	2e00      	cmp	r6, #0
 80049f0:	d045      	beq.n	8004a7e <__sflush_r+0xae>
 80049f2:	2300      	movs	r3, #0
 80049f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80049f8:	682f      	ldr	r7, [r5, #0]
 80049fa:	6a21      	ldr	r1, [r4, #32]
 80049fc:	602b      	str	r3, [r5, #0]
 80049fe:	d030      	beq.n	8004a62 <__sflush_r+0x92>
 8004a00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004a02:	89a3      	ldrh	r3, [r4, #12]
 8004a04:	0759      	lsls	r1, r3, #29
 8004a06:	d505      	bpl.n	8004a14 <__sflush_r+0x44>
 8004a08:	6863      	ldr	r3, [r4, #4]
 8004a0a:	1ad2      	subs	r2, r2, r3
 8004a0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004a0e:	b10b      	cbz	r3, 8004a14 <__sflush_r+0x44>
 8004a10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a12:	1ad2      	subs	r2, r2, r3
 8004a14:	2300      	movs	r3, #0
 8004a16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a18:	6a21      	ldr	r1, [r4, #32]
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	47b0      	blx	r6
 8004a1e:	1c43      	adds	r3, r0, #1
 8004a20:	89a3      	ldrh	r3, [r4, #12]
 8004a22:	d106      	bne.n	8004a32 <__sflush_r+0x62>
 8004a24:	6829      	ldr	r1, [r5, #0]
 8004a26:	291d      	cmp	r1, #29
 8004a28:	d82b      	bhi.n	8004a82 <__sflush_r+0xb2>
 8004a2a:	4a2a      	ldr	r2, [pc, #168]	@ (8004ad4 <__sflush_r+0x104>)
 8004a2c:	40ca      	lsrs	r2, r1
 8004a2e:	07d6      	lsls	r6, r2, #31
 8004a30:	d527      	bpl.n	8004a82 <__sflush_r+0xb2>
 8004a32:	2200      	movs	r2, #0
 8004a34:	6062      	str	r2, [r4, #4]
 8004a36:	04d9      	lsls	r1, r3, #19
 8004a38:	6922      	ldr	r2, [r4, #16]
 8004a3a:	6022      	str	r2, [r4, #0]
 8004a3c:	d504      	bpl.n	8004a48 <__sflush_r+0x78>
 8004a3e:	1c42      	adds	r2, r0, #1
 8004a40:	d101      	bne.n	8004a46 <__sflush_r+0x76>
 8004a42:	682b      	ldr	r3, [r5, #0]
 8004a44:	b903      	cbnz	r3, 8004a48 <__sflush_r+0x78>
 8004a46:	6560      	str	r0, [r4, #84]	@ 0x54
 8004a48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a4a:	602f      	str	r7, [r5, #0]
 8004a4c:	b1b9      	cbz	r1, 8004a7e <__sflush_r+0xae>
 8004a4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a52:	4299      	cmp	r1, r3
 8004a54:	d002      	beq.n	8004a5c <__sflush_r+0x8c>
 8004a56:	4628      	mov	r0, r5
 8004a58:	f7ff fbf4 	bl	8004244 <_free_r>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a60:	e00d      	b.n	8004a7e <__sflush_r+0xae>
 8004a62:	2301      	movs	r3, #1
 8004a64:	4628      	mov	r0, r5
 8004a66:	47b0      	blx	r6
 8004a68:	4602      	mov	r2, r0
 8004a6a:	1c50      	adds	r0, r2, #1
 8004a6c:	d1c9      	bne.n	8004a02 <__sflush_r+0x32>
 8004a6e:	682b      	ldr	r3, [r5, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d0c6      	beq.n	8004a02 <__sflush_r+0x32>
 8004a74:	2b1d      	cmp	r3, #29
 8004a76:	d001      	beq.n	8004a7c <__sflush_r+0xac>
 8004a78:	2b16      	cmp	r3, #22
 8004a7a:	d11e      	bne.n	8004aba <__sflush_r+0xea>
 8004a7c:	602f      	str	r7, [r5, #0]
 8004a7e:	2000      	movs	r0, #0
 8004a80:	e022      	b.n	8004ac8 <__sflush_r+0xf8>
 8004a82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a86:	b21b      	sxth	r3, r3
 8004a88:	e01b      	b.n	8004ac2 <__sflush_r+0xf2>
 8004a8a:	690f      	ldr	r7, [r1, #16]
 8004a8c:	2f00      	cmp	r7, #0
 8004a8e:	d0f6      	beq.n	8004a7e <__sflush_r+0xae>
 8004a90:	0793      	lsls	r3, r2, #30
 8004a92:	680e      	ldr	r6, [r1, #0]
 8004a94:	bf08      	it	eq
 8004a96:	694b      	ldreq	r3, [r1, #20]
 8004a98:	600f      	str	r7, [r1, #0]
 8004a9a:	bf18      	it	ne
 8004a9c:	2300      	movne	r3, #0
 8004a9e:	eba6 0807 	sub.w	r8, r6, r7
 8004aa2:	608b      	str	r3, [r1, #8]
 8004aa4:	f1b8 0f00 	cmp.w	r8, #0
 8004aa8:	dde9      	ble.n	8004a7e <__sflush_r+0xae>
 8004aaa:	6a21      	ldr	r1, [r4, #32]
 8004aac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004aae:	4643      	mov	r3, r8
 8004ab0:	463a      	mov	r2, r7
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	47b0      	blx	r6
 8004ab6:	2800      	cmp	r0, #0
 8004ab8:	dc08      	bgt.n	8004acc <__sflush_r+0xfc>
 8004aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004abe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ac2:	81a3      	strh	r3, [r4, #12]
 8004ac4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004acc:	4407      	add	r7, r0
 8004ace:	eba8 0800 	sub.w	r8, r8, r0
 8004ad2:	e7e7      	b.n	8004aa4 <__sflush_r+0xd4>
 8004ad4:	20400001 	.word	0x20400001

08004ad8 <_fflush_r>:
 8004ad8:	b538      	push	{r3, r4, r5, lr}
 8004ada:	690b      	ldr	r3, [r1, #16]
 8004adc:	4605      	mov	r5, r0
 8004ade:	460c      	mov	r4, r1
 8004ae0:	b913      	cbnz	r3, 8004ae8 <_fflush_r+0x10>
 8004ae2:	2500      	movs	r5, #0
 8004ae4:	4628      	mov	r0, r5
 8004ae6:	bd38      	pop	{r3, r4, r5, pc}
 8004ae8:	b118      	cbz	r0, 8004af2 <_fflush_r+0x1a>
 8004aea:	6a03      	ldr	r3, [r0, #32]
 8004aec:	b90b      	cbnz	r3, 8004af2 <_fflush_r+0x1a>
 8004aee:	f7ff faa1 	bl	8004034 <__sinit>
 8004af2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0f3      	beq.n	8004ae2 <_fflush_r+0xa>
 8004afa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004afc:	07d0      	lsls	r0, r2, #31
 8004afe:	d404      	bmi.n	8004b0a <_fflush_r+0x32>
 8004b00:	0599      	lsls	r1, r3, #22
 8004b02:	d402      	bmi.n	8004b0a <_fflush_r+0x32>
 8004b04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b06:	f7ff fb9a 	bl	800423e <__retarget_lock_acquire_recursive>
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	f7ff ff5f 	bl	80049d0 <__sflush_r>
 8004b12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b14:	07da      	lsls	r2, r3, #31
 8004b16:	4605      	mov	r5, r0
 8004b18:	d4e4      	bmi.n	8004ae4 <_fflush_r+0xc>
 8004b1a:	89a3      	ldrh	r3, [r4, #12]
 8004b1c:	059b      	lsls	r3, r3, #22
 8004b1e:	d4e1      	bmi.n	8004ae4 <_fflush_r+0xc>
 8004b20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b22:	f7ff fb8d 	bl	8004240 <__retarget_lock_release_recursive>
 8004b26:	e7dd      	b.n	8004ae4 <_fflush_r+0xc>

08004b28 <__swbuf_r>:
 8004b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2a:	460e      	mov	r6, r1
 8004b2c:	4614      	mov	r4, r2
 8004b2e:	4605      	mov	r5, r0
 8004b30:	b118      	cbz	r0, 8004b3a <__swbuf_r+0x12>
 8004b32:	6a03      	ldr	r3, [r0, #32]
 8004b34:	b90b      	cbnz	r3, 8004b3a <__swbuf_r+0x12>
 8004b36:	f7ff fa7d 	bl	8004034 <__sinit>
 8004b3a:	69a3      	ldr	r3, [r4, #24]
 8004b3c:	60a3      	str	r3, [r4, #8]
 8004b3e:	89a3      	ldrh	r3, [r4, #12]
 8004b40:	071a      	lsls	r2, r3, #28
 8004b42:	d501      	bpl.n	8004b48 <__swbuf_r+0x20>
 8004b44:	6923      	ldr	r3, [r4, #16]
 8004b46:	b943      	cbnz	r3, 8004b5a <__swbuf_r+0x32>
 8004b48:	4621      	mov	r1, r4
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	f000 f82a 	bl	8004ba4 <__swsetup_r>
 8004b50:	b118      	cbz	r0, 8004b5a <__swbuf_r+0x32>
 8004b52:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004b56:	4638      	mov	r0, r7
 8004b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	6922      	ldr	r2, [r4, #16]
 8004b5e:	1a98      	subs	r0, r3, r2
 8004b60:	6963      	ldr	r3, [r4, #20]
 8004b62:	b2f6      	uxtb	r6, r6
 8004b64:	4283      	cmp	r3, r0
 8004b66:	4637      	mov	r7, r6
 8004b68:	dc05      	bgt.n	8004b76 <__swbuf_r+0x4e>
 8004b6a:	4621      	mov	r1, r4
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	f7ff ffb3 	bl	8004ad8 <_fflush_r>
 8004b72:	2800      	cmp	r0, #0
 8004b74:	d1ed      	bne.n	8004b52 <__swbuf_r+0x2a>
 8004b76:	68a3      	ldr	r3, [r4, #8]
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	60a3      	str	r3, [r4, #8]
 8004b7c:	6823      	ldr	r3, [r4, #0]
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	6022      	str	r2, [r4, #0]
 8004b82:	701e      	strb	r6, [r3, #0]
 8004b84:	6962      	ldr	r2, [r4, #20]
 8004b86:	1c43      	adds	r3, r0, #1
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d004      	beq.n	8004b96 <__swbuf_r+0x6e>
 8004b8c:	89a3      	ldrh	r3, [r4, #12]
 8004b8e:	07db      	lsls	r3, r3, #31
 8004b90:	d5e1      	bpl.n	8004b56 <__swbuf_r+0x2e>
 8004b92:	2e0a      	cmp	r6, #10
 8004b94:	d1df      	bne.n	8004b56 <__swbuf_r+0x2e>
 8004b96:	4621      	mov	r1, r4
 8004b98:	4628      	mov	r0, r5
 8004b9a:	f7ff ff9d 	bl	8004ad8 <_fflush_r>
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	d0d9      	beq.n	8004b56 <__swbuf_r+0x2e>
 8004ba2:	e7d6      	b.n	8004b52 <__swbuf_r+0x2a>

08004ba4 <__swsetup_r>:
 8004ba4:	b538      	push	{r3, r4, r5, lr}
 8004ba6:	4b29      	ldr	r3, [pc, #164]	@ (8004c4c <__swsetup_r+0xa8>)
 8004ba8:	4605      	mov	r5, r0
 8004baa:	6818      	ldr	r0, [r3, #0]
 8004bac:	460c      	mov	r4, r1
 8004bae:	b118      	cbz	r0, 8004bb8 <__swsetup_r+0x14>
 8004bb0:	6a03      	ldr	r3, [r0, #32]
 8004bb2:	b90b      	cbnz	r3, 8004bb8 <__swsetup_r+0x14>
 8004bb4:	f7ff fa3e 	bl	8004034 <__sinit>
 8004bb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bbc:	0719      	lsls	r1, r3, #28
 8004bbe:	d422      	bmi.n	8004c06 <__swsetup_r+0x62>
 8004bc0:	06da      	lsls	r2, r3, #27
 8004bc2:	d407      	bmi.n	8004bd4 <__swsetup_r+0x30>
 8004bc4:	2209      	movs	r2, #9
 8004bc6:	602a      	str	r2, [r5, #0]
 8004bc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bcc:	81a3      	strh	r3, [r4, #12]
 8004bce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004bd2:	e033      	b.n	8004c3c <__swsetup_r+0x98>
 8004bd4:	0758      	lsls	r0, r3, #29
 8004bd6:	d512      	bpl.n	8004bfe <__swsetup_r+0x5a>
 8004bd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004bda:	b141      	cbz	r1, 8004bee <__swsetup_r+0x4a>
 8004bdc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004be0:	4299      	cmp	r1, r3
 8004be2:	d002      	beq.n	8004bea <__swsetup_r+0x46>
 8004be4:	4628      	mov	r0, r5
 8004be6:	f7ff fb2d 	bl	8004244 <_free_r>
 8004bea:	2300      	movs	r3, #0
 8004bec:	6363      	str	r3, [r4, #52]	@ 0x34
 8004bee:	89a3      	ldrh	r3, [r4, #12]
 8004bf0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004bf4:	81a3      	strh	r3, [r4, #12]
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	6063      	str	r3, [r4, #4]
 8004bfa:	6923      	ldr	r3, [r4, #16]
 8004bfc:	6023      	str	r3, [r4, #0]
 8004bfe:	89a3      	ldrh	r3, [r4, #12]
 8004c00:	f043 0308 	orr.w	r3, r3, #8
 8004c04:	81a3      	strh	r3, [r4, #12]
 8004c06:	6923      	ldr	r3, [r4, #16]
 8004c08:	b94b      	cbnz	r3, 8004c1e <__swsetup_r+0x7a>
 8004c0a:	89a3      	ldrh	r3, [r4, #12]
 8004c0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004c10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c14:	d003      	beq.n	8004c1e <__swsetup_r+0x7a>
 8004c16:	4621      	mov	r1, r4
 8004c18:	4628      	mov	r0, r5
 8004c1a:	f000 f84f 	bl	8004cbc <__smakebuf_r>
 8004c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c22:	f013 0201 	ands.w	r2, r3, #1
 8004c26:	d00a      	beq.n	8004c3e <__swsetup_r+0x9a>
 8004c28:	2200      	movs	r2, #0
 8004c2a:	60a2      	str	r2, [r4, #8]
 8004c2c:	6962      	ldr	r2, [r4, #20]
 8004c2e:	4252      	negs	r2, r2
 8004c30:	61a2      	str	r2, [r4, #24]
 8004c32:	6922      	ldr	r2, [r4, #16]
 8004c34:	b942      	cbnz	r2, 8004c48 <__swsetup_r+0xa4>
 8004c36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004c3a:	d1c5      	bne.n	8004bc8 <__swsetup_r+0x24>
 8004c3c:	bd38      	pop	{r3, r4, r5, pc}
 8004c3e:	0799      	lsls	r1, r3, #30
 8004c40:	bf58      	it	pl
 8004c42:	6962      	ldrpl	r2, [r4, #20]
 8004c44:	60a2      	str	r2, [r4, #8]
 8004c46:	e7f4      	b.n	8004c32 <__swsetup_r+0x8e>
 8004c48:	2000      	movs	r0, #0
 8004c4a:	e7f7      	b.n	8004c3c <__swsetup_r+0x98>
 8004c4c:	20000024 	.word	0x20000024

08004c50 <_sbrk_r>:
 8004c50:	b538      	push	{r3, r4, r5, lr}
 8004c52:	4d06      	ldr	r5, [pc, #24]	@ (8004c6c <_sbrk_r+0x1c>)
 8004c54:	2300      	movs	r3, #0
 8004c56:	4604      	mov	r4, r0
 8004c58:	4608      	mov	r0, r1
 8004c5a:	602b      	str	r3, [r5, #0]
 8004c5c:	f7fc fc78 	bl	8001550 <_sbrk>
 8004c60:	1c43      	adds	r3, r0, #1
 8004c62:	d102      	bne.n	8004c6a <_sbrk_r+0x1a>
 8004c64:	682b      	ldr	r3, [r5, #0]
 8004c66:	b103      	cbz	r3, 8004c6a <_sbrk_r+0x1a>
 8004c68:	6023      	str	r3, [r4, #0]
 8004c6a:	bd38      	pop	{r3, r4, r5, pc}
 8004c6c:	20000338 	.word	0x20000338

08004c70 <__swhatbuf_r>:
 8004c70:	b570      	push	{r4, r5, r6, lr}
 8004c72:	460c      	mov	r4, r1
 8004c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c78:	2900      	cmp	r1, #0
 8004c7a:	b096      	sub	sp, #88	@ 0x58
 8004c7c:	4615      	mov	r5, r2
 8004c7e:	461e      	mov	r6, r3
 8004c80:	da0d      	bge.n	8004c9e <__swhatbuf_r+0x2e>
 8004c82:	89a3      	ldrh	r3, [r4, #12]
 8004c84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004c88:	f04f 0100 	mov.w	r1, #0
 8004c8c:	bf14      	ite	ne
 8004c8e:	2340      	movne	r3, #64	@ 0x40
 8004c90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004c94:	2000      	movs	r0, #0
 8004c96:	6031      	str	r1, [r6, #0]
 8004c98:	602b      	str	r3, [r5, #0]
 8004c9a:	b016      	add	sp, #88	@ 0x58
 8004c9c:	bd70      	pop	{r4, r5, r6, pc}
 8004c9e:	466a      	mov	r2, sp
 8004ca0:	f000 f848 	bl	8004d34 <_fstat_r>
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	dbec      	blt.n	8004c82 <__swhatbuf_r+0x12>
 8004ca8:	9901      	ldr	r1, [sp, #4]
 8004caa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004cae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004cb2:	4259      	negs	r1, r3
 8004cb4:	4159      	adcs	r1, r3
 8004cb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004cba:	e7eb      	b.n	8004c94 <__swhatbuf_r+0x24>

08004cbc <__smakebuf_r>:
 8004cbc:	898b      	ldrh	r3, [r1, #12]
 8004cbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cc0:	079d      	lsls	r5, r3, #30
 8004cc2:	4606      	mov	r6, r0
 8004cc4:	460c      	mov	r4, r1
 8004cc6:	d507      	bpl.n	8004cd8 <__smakebuf_r+0x1c>
 8004cc8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004ccc:	6023      	str	r3, [r4, #0]
 8004cce:	6123      	str	r3, [r4, #16]
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	6163      	str	r3, [r4, #20]
 8004cd4:	b003      	add	sp, #12
 8004cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cd8:	ab01      	add	r3, sp, #4
 8004cda:	466a      	mov	r2, sp
 8004cdc:	f7ff ffc8 	bl	8004c70 <__swhatbuf_r>
 8004ce0:	9f00      	ldr	r7, [sp, #0]
 8004ce2:	4605      	mov	r5, r0
 8004ce4:	4639      	mov	r1, r7
 8004ce6:	4630      	mov	r0, r6
 8004ce8:	f7ff fb18 	bl	800431c <_malloc_r>
 8004cec:	b948      	cbnz	r0, 8004d02 <__smakebuf_r+0x46>
 8004cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cf2:	059a      	lsls	r2, r3, #22
 8004cf4:	d4ee      	bmi.n	8004cd4 <__smakebuf_r+0x18>
 8004cf6:	f023 0303 	bic.w	r3, r3, #3
 8004cfa:	f043 0302 	orr.w	r3, r3, #2
 8004cfe:	81a3      	strh	r3, [r4, #12]
 8004d00:	e7e2      	b.n	8004cc8 <__smakebuf_r+0xc>
 8004d02:	89a3      	ldrh	r3, [r4, #12]
 8004d04:	6020      	str	r0, [r4, #0]
 8004d06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d0a:	81a3      	strh	r3, [r4, #12]
 8004d0c:	9b01      	ldr	r3, [sp, #4]
 8004d0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004d12:	b15b      	cbz	r3, 8004d2c <__smakebuf_r+0x70>
 8004d14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d18:	4630      	mov	r0, r6
 8004d1a:	f000 f81d 	bl	8004d58 <_isatty_r>
 8004d1e:	b128      	cbz	r0, 8004d2c <__smakebuf_r+0x70>
 8004d20:	89a3      	ldrh	r3, [r4, #12]
 8004d22:	f023 0303 	bic.w	r3, r3, #3
 8004d26:	f043 0301 	orr.w	r3, r3, #1
 8004d2a:	81a3      	strh	r3, [r4, #12]
 8004d2c:	89a3      	ldrh	r3, [r4, #12]
 8004d2e:	431d      	orrs	r5, r3
 8004d30:	81a5      	strh	r5, [r4, #12]
 8004d32:	e7cf      	b.n	8004cd4 <__smakebuf_r+0x18>

08004d34 <_fstat_r>:
 8004d34:	b538      	push	{r3, r4, r5, lr}
 8004d36:	4d07      	ldr	r5, [pc, #28]	@ (8004d54 <_fstat_r+0x20>)
 8004d38:	2300      	movs	r3, #0
 8004d3a:	4604      	mov	r4, r0
 8004d3c:	4608      	mov	r0, r1
 8004d3e:	4611      	mov	r1, r2
 8004d40:	602b      	str	r3, [r5, #0]
 8004d42:	f7fc fbdd 	bl	8001500 <_fstat>
 8004d46:	1c43      	adds	r3, r0, #1
 8004d48:	d102      	bne.n	8004d50 <_fstat_r+0x1c>
 8004d4a:	682b      	ldr	r3, [r5, #0]
 8004d4c:	b103      	cbz	r3, 8004d50 <_fstat_r+0x1c>
 8004d4e:	6023      	str	r3, [r4, #0]
 8004d50:	bd38      	pop	{r3, r4, r5, pc}
 8004d52:	bf00      	nop
 8004d54:	20000338 	.word	0x20000338

08004d58 <_isatty_r>:
 8004d58:	b538      	push	{r3, r4, r5, lr}
 8004d5a:	4d06      	ldr	r5, [pc, #24]	@ (8004d74 <_isatty_r+0x1c>)
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	4604      	mov	r4, r0
 8004d60:	4608      	mov	r0, r1
 8004d62:	602b      	str	r3, [r5, #0]
 8004d64:	f7fc fbdc 	bl	8001520 <_isatty>
 8004d68:	1c43      	adds	r3, r0, #1
 8004d6a:	d102      	bne.n	8004d72 <_isatty_r+0x1a>
 8004d6c:	682b      	ldr	r3, [r5, #0]
 8004d6e:	b103      	cbz	r3, 8004d72 <_isatty_r+0x1a>
 8004d70:	6023      	str	r3, [r4, #0]
 8004d72:	bd38      	pop	{r3, r4, r5, pc}
 8004d74:	20000338 	.word	0x20000338

08004d78 <_init>:
 8004d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d7a:	bf00      	nop
 8004d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d7e:	bc08      	pop	{r3}
 8004d80:	469e      	mov	lr, r3
 8004d82:	4770      	bx	lr

08004d84 <_fini>:
 8004d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d86:	bf00      	nop
 8004d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d8a:	bc08      	pop	{r3}
 8004d8c:	469e      	mov	lr, r3
 8004d8e:	4770      	bx	lr
