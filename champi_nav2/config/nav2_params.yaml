
bt_navigator:
  ros__parameters:
    use_sim_time: False
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    bt_loop_duration: 10
    default_server_timeout: 20

    # This parameter is set from the launch file
    default_nav_to_pose_bt_xml: ""

    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.

bt_navigator_navigate_to_pose_rclcpp_node:
  ros__parameters:
    use_sim_time: False

controller_server:
  ros__parameters:
    use_sim_time: False
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.001
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0

    # Goal checker parameters # TODO on pourrait mettre un checker précis, et faire un comportement de recovery si le goal n'est pas atteint, auquel cas on utilise un checker moins précis
    #precise_goal_checker:
    #  plugin: "nav2_controller::SimpleGoalChecker"
    #  xy_goal_tolerance: 0.25
    #  yaw_goal_tolerance: 0.25
    #  stateful: True

    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.02
      yaw_goal_tolerance: 0.05

    FollowPath:
      plugin: "nav2_mppi_controller::MPPIController"
      # Default 1. Iteration count in MPPI algorithm. Recommend to keep as 1 and prefer more batches.
      iteration_count: 1
      # Default 1000. Count of randomly sampled candidate trajectories
      batch_size: 2000
      # Default 56. Number of time steps (points) in each sampled trajectory
      time_steps: 56
      # Default 0.05. Time interval (s) between two sampled points in trajectories.
      model_dt: 0.05
      # Sampling standard deviation for VX
      vx_std: 0.2
      # Sampling standard deviation for VY
      vy_std: 0.2
      # Sampling standard deviation for Wz
      wz_std: 0.4
      # Max speeds (m/s or rad/s)
      vx_max: 0.5
      vx_min: -0.5
      vy_max: 0.5
      wz_max: 1.9
      # Default 1.7. Distance to prune the path ahead of the robot.
      prune_distance: 1.7
      # Default 0.1. Time tolerance for data transformations with TF.
      transform_tolerance: 0.1
      # Default 0.3. Selectiveness of trajectories by their costs.
      temperature: 0.3
      # Default 0.015. A trade-off between smoothness (high) and low energy (low).
      gamma: 0.015
      # Default "DiffDrive". Type of motion model [DiffDrive, Omni, Ackermann].
      motion_model: "Omni"
      # Default false. Publish visualization of trajectories, which can slow down the controller significantly. Use only for debugging.
      visualize: true
      # Trajectory Visualizer parameters
      TrajectoryVisualizer:
        # Default 5. The step between trajectories to visualize to downsample candidate trajectory pool.
        trajectory_step: 5
        # Default 3. The step between points on trajectories to visualize to downsample trajectory density.
        time_step: 3

      # Critics (plugins) names
      critics: ["ConstraintCritic", "ObstaclesCritic", "GoalCritic", "GoalAngleCritic", "PathAlignCritic", "PathFollowCritic", "PathAngleCritic", "PreferForwardCritic"]

      ConstraintCritic:
        # Weight to apply to critic term. Default 4.0.
        cost_weight: 4.0
        # Power order to apply to term
        cost_power: 1
        enabled: true

      GoalCritic:
        # Weight to apply to critic term. Default 5.0.
        cost_weight: 5.0
        # Power order to apply to term
        cost_power: 1
        # Minimal distance between robot and goal above which goal cost starts being considered
        threshold_to_consider: 1.4
        enabled: true

      GoalAngleCritic:
        # Weight to apply to critic term. Default 3.0.
        cost_weight: 3.0
        # Power order to apply to term
        cost_power: 1
        # Minimal distance between robot and goal above which angle goal cost considered
        threshold_to_consider: 0.5
        enabled: true

      PreferForwardCritic:
        # Weight to apply to critic term. Default 5.0.
        cost_weight: 5.0
        # Power order to apply to term
        cost_power: 1
        # Distance between robot and goal above which prefer forward cost stops being considered
        threshold_to_consider: 0.5
        enabled: true

      ObstaclesCritic:
        # Weight to apply to critic for near collisions closer than `collision_margin_distance` to prevent near collisions **only** as a method of virtually inflating the footprint. Default 20.0.
        critical_weight: 20.0
        # Weight to apply to critic for generally preferring routes in lower cost space. Default 1.5.
        repulsion_weight: 1.5
        # Power order to apply to term
        cost_power: 1
        # Cost to apply to a true collision in a trajectory. Default 10000.0.
        collision_cost: 10000.0
        # Margin distance from collision to apply severe penalty, similar to footprint inflation. Default 0.1.
        collision_margin_distance: 0.1
        # Distance near goal to stop applying preferential obstacle term to allow robot to smoothly converge to goal pose in close proximity to obstacles. Default 0.5.
        near_goal_distance: 0.5
        # Whether to use point cost (if robot is circular or low compute power) or compute SE2 footprint cost. Default false.
        consider_footprint: false
        enabled: true

      PathAlignCritic:
        # Weight to apply to critic term. Default 14.0.
        cost_weight: 14.0
        # Power order to apply to term
        cost_power: 1
        # Distance between robot and goal above which path align cost stops being considered
        threshold_to_consider: 0.5
        # Checks that the candidate trajectories are sufficiently far along their way tracking the path to apply the alignment critic.
        offset_from_furthest: 20
        # Step of trajectory points to evaluate for path distance to reduce compute time.
        trajectory_point_step: 3
        # Maximum proportion of the path that can be occupied before this critic is not considered to allow the obstacle and path follow critics to avoid obstacles while following the path's intent in presence of dynamic objects in the scene.
        max_path_occupancy_ratio: 0.05
        enabled: true
        # Whether to consider path's orientations in path alignment.
        use_path_orientations: false

      PathFollowCritic:
        # Weight to apply to critic term. Default 5.0.
        cost_weight: 5.0
        # Power order to apply to term
        cost_power: 1
        # Number of path points after furthest one any trajectory achieves to drive path tracking relative to.
        offset_from_furthest: 5
        # Distance between robot and goal above which path follow cost stops being considered
        threshold_to_consider: 1.4
        enabled: true

      PathAngleCritic:
        # Weight to apply to critic term. Default 2.0.
        cost_weight: 2.0
        # Power order to apply to term
        cost_power: 1
        # Distance between robot and goal above which path angle cost stops being considered
        threshold_to_consider: 0.5
        # Number of path points after furthest one any trajectory achieves to compute path angle relative to.
        offset_from_furthest: 4
        # Angular distance between robot and goal above which path angle cost starts being considered
        max_angle_to_furthest: 1.0
        # Whether or not your robot has a preference for which way is forward in motion.
        forward_preference: true
        enabled: true

      # Twirling Critic
      # cost_weight: Default 10.0. Weight to apply to critic term.
      # cost_power: Default 1. Power order to apply to term.
      # enabled: true




local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: False
      rolling_window: true
      width: 3
      height: 3
      resolution: 0.05
      robot_radius: 0.10
      plugins: ["obstacle_layer", "inflation_layer"]
#      plugins: ["inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 10.0
        inflation_radius: 1.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      always_send_full_costmap: True

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: False
      robot_radius: 0.10
      resolution: 0.05
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True # TODO
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 10.0
        inflation_radius: 1.0
      always_send_full_costmap: True

map_server:
  ros__parameters:
    use_sim_time: False
    # Overridden in launch by the "map" launch configuration or provided default value.
    # To use in yaml, remove the default "map" value in the tb3_simulation_launch.py file & provide full path to map below.
    yaml_filename: ""

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    use_sim_time: False
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_theta_star_planner/ThetaStarPlanner"
      how_many_corners: 8
      w_euc_cost: 2.0
      w_traversal_cost: 0.5
      w_heuristic_cost: 1.0

smoother_server:
  ros__parameters:
    use_sim_time: False
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "champi_nav2_plugins::AngleSmoother"
      interpolate: False
#      plugin: "nav2_smoother::SimpleSmoother"
#      tolerance: 1.0e-10
#      max_its: 1000
#      do_refinement: True



behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
#    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
#    spin:
#      plugin: "nav2_behaviors/Spin"
#    backup:
#      plugin: "nav2_behaviors/BackUp"
#    drive_on_heading:
#      plugin: "nav2_behaviors/DriveOnHeading"
#    wait:
#      plugin: "nav2_behaviors/Wait"
#    assisted_teleop:
#      plugin: "nav2_behaviors/AssistedTeleop"
    global_frame: odom
    robot_base_frame: base_link
    transform_tolerance: 0.1
    use_sim_time: False
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2
