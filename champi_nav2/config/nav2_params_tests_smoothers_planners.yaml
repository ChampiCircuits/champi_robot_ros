
bt_navigator:
  ros__parameters:
    use_sim_time: False
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    bt_loop_duration: 10
    default_server_timeout: 20

    default_nav_to_pose_bt_xml: "/home/arusso/dev/coupe/ws_0/src/champi_robot_ros/champi_nav2/config/behavior_trees/navigate_to_pose_smoother.xml"

    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_smooth_path_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_assisted_teleop_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_drive_on_heading_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_globally_updated_goal_condition_bt_node
      - nav2_is_path_valid_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_truncate_path_local_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_path_expiring_timer_condition
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_goal_updated_controller_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node
      - nav2_controller_cancel_bt_node
      - nav2_path_longer_on_approach_bt_node
      - nav2_wait_cancel_bt_node
      - nav2_spin_cancel_bt_node
      - nav2_back_up_cancel_bt_node
      - nav2_assisted_teleop_cancel_bt_node
      - nav2_drive_on_heading_cancel_bt_node
      - nav2_is_battery_charging_condition_bt_node

#bt_navigator_navigate_through_poses_rclcpp_node:
#  ros__parameters:
#    use_sim_time: False

bt_navigator_navigate_to_pose_rclcpp_node:
  ros__parameters:
    use_sim_time: False

controller_server:
  ros__parameters:
    use_sim_time: False
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.001
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    # Goal checker parameters TODO regarder comment switch
    #precise_goal_checker:
    #  plugin: "nav2_controller::SimpleGoalChecker"
    #  xy_goal_tolerance: 0.25
    #  yaw_goal_tolerance: 0.25
    #  stateful: True
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.02
      yaw_goal_tolerance: 0.05
    FollowPath:
      plugin: "nav2_mppi_controller::MPPIController"
      time_steps: 56
      model_dt: 0.05
      batch_size: 2000
      vx_std: 0.1
      vy_std: 0.1
      wz_std: 0.4
      vx_max: 0.5
      vx_min: -0.5
      vy_max: 0.5
      wz_max: 3.14
      iteration_count: 1
      prune_distance: 0.5
      transform_tolerance: 0.1
      temperature: 0.3
      gamma: 0.015
      motion_model: "Omni"
      visualize: true
      TrajectoryVisualizer:
        trajectory_step: 10
        time_step: 5
      # AckermannConstraints:
      #   min_turning_r: 0.2
      critics: ["ConstraintCritic", "ObstaclesCritic", "GoalCritic", "GoalAngleCritic", "PathAlignCritic", "PathFollowCritic", "PreferForwardCritic", "TwirlingCritic"]
      ConstraintCritic:
        enabled: true
        cost_power: 1
        cost_weight: 4.0
      GoalCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        threshold_to_consider: 0.5 # Distance between robot and goal above which path follow cost stops being considered
      GoalAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 3.0
        threshold_to_consider: 1.0
      PreferForwardCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        threshold_to_consider: 0.1
      ObstaclesCritic:
        enabled: true
        cost_power: 1
        repulsion_weight: 0.3
        critical_weight: 20.0
        consider_footprint: false
        collision_cost: 10000.0
        collision_margin_distance: 0.1
        near_goal_distance: 0.5
        cost_scaling_factor: 10.0 # doit etre le meme que dans costmap
      PathAlignCritic:
        enabled: true
        cost_power: 1
        cost_weight: 14.0
        max_path_occupancy_ratio: 0.05
        trajectory_point_step: 3
        threshold_to_consider: 0.1
        offset_from_furthest: 20
        use_path_orientations: false
      PathFollowCritic:
        enabled: true
        cost_power: 1
        cost_weight: 25.0 # Pour résoudre le pb que le robot n'arrive pas à la position
        offset_from_furthest: 5
        threshold_to_consider: 0.1
      PathAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 2.0
        offset_from_furthest: 4
        threshold_to_consider: 0.1
        max_angle_to_furthest: 1.0
        forward_preference: true
      TwirlingCritic:
        enabled: false
        twirling_cost_power: 1
        twirling_cost_weight: 10.0

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: False
      rolling_window: true
      width: 3
      height: 3
      resolution: 0.05
      robot_radius: 0.10
      plugins: ["obstacle_layer", "inflation_layer"]
      #      plugins: ["inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 10.0
        inflation_radius: 1.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      always_send_full_costmap: True

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: False
      robot_radius: 0.10
      resolution: 0.05
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      #      plugins: ["static_layer", "obstacle_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True # TODO
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 10.0
        inflation_radius: 1.0
      always_send_full_costmap: True

map_server:
  ros__parameters:
    use_sim_time: False
    # Overridden in launch by the "map" launch configuration or provided default value.
    # To use in yaml, remove the default "map" value in the tb3_simulation_launch.py file & provide full path to map below.
    yaml_filename: ""

#map_saver:
#  ros__parameters:
#    use_sim_time: False
#    save_map_timeout: 5.0
#    free_thresh_default: 0.25
#    occupied_thresh_default: 0.65
#    map_subscribe_transient_local: True

# planner_server:
#   ros__parameters:
#     expected_planner_frequency: 20.0
#     use_sim_time: False
#     planner_plugins: ["GridBased"]
#     GridBased:
#       plugin: "nav2_navfn_planner/NavfnPlanner"
#       tolerance: 0.5
#       use_astar: true
#       allow_unknown: true

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    use_sim_time: False
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_theta_star_planner/ThetaStarPlanner"
      how_many_corners: 8
      w_euc_cost: 2.0
      w_traversal_cost: 0.5
      w_heuristic_cost: 1.0

#planner_server:
#  ros__parameters:
#    planner_plugins: ["GridBased"]
#    use_sim_time: True
#
#    GridBased:
#      plugin: "nav2_smac_planner/SmacPlannerLattice"
#      allow_unknown: true                 # Allow traveling in unknown space
#      tolerance: 0.25                     # dist-to-goal heuristic cost (distance) for valid tolerance endpoints if exact goal cannot be found.
#      max_iterations: 1000000             # Maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
#      max_on_approach_iterations: 1000    # Maximum number of iterations after within tolerances to continue to try to find exact solution
#      max_planning_time: 5.0              # Max time in s for planner to plan, smooth
#      analytic_expansion_ratio: 3.5       # The ratio to attempt analytic expansions during search for final approach.
#      analytic_expansion_max_length: 3.0  # For Hybrid/Lattice nodes The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting
#      analytic_expansion_max_cost: 200.0  # The maximum single cost for any part of an analytic expansion to contain and be valid, except when necessary on approach to goal
#      analytic_expansion_max_cost_override: false  #  Whether or not to override the maximum cost setting if within critical distance to goal (ie probably required)
#      reverse_penalty: 1.0                # Penalty to apply if motion is reversing, must be => 1
#      change_penalty: 0.05                # Penalty to apply if motion is changing directions (L to R), must be >= 0
#      non_straight_penalty: 1.05          # Penalty to apply if motion is non-straight, must be => 1
#      cost_penalty: 2.0                   # Penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
#      rotation_penalty: 5.0               # Penalty to apply to in-place rotations, if minimum control set contains them
#      retrospective_penalty: 0.015
#      lattice_filepath: "/home/arusso/dev/coupe/ws_0/src/champi_robot_ros/champi_nav2/config/lattice05m.json"                # The filepath to the state lattice graph
#      lookup_table_size: 20.0             # Size of the dubin/reeds-sheep distance window to cache, in meters.
#      cache_obstacle_heuristic: false     # Cache the obstacle map dynamic programming distance expansion heuristic between subsiquent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.
#      allow_reverse_expansion: false      # If true, allows the robot to use the primitives to expand in the mirrored opposite direction of the current robot's orientation (to reverse).
#      smooth_path: True                   # If true, does a simple and quick smoothing post-processing to the path
#      smoother:
#        max_iterations: 1000
#        w_smooth: 0.3
#        w_data: 0.2
#        tolerance: 1.0e-10
#        do_refinement: true
#        refinement_num: 2

smoother_server:
  ros__parameters:
    use_sim_time: False
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "champi_nav2_plugins::AngleSmoother"
      #      plugin: "nav2_smoother::SimpleSmoother"
      interpolate: False
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

#smoother_server:
#  ros__parameters:
#    costmap_topic: global_costmap/costmap_raw
#    footprint_topic: global_costmap/published_footprint
#    robot_base_frame: base_link
#    transform_timeout: 0.1
#    smoother_plugins: ["savitzky_golay_smoother"]
#    savitzky_golay_smoother:
#      plugin: "nav2_smoother::SavitzkyGolaySmoother"
#      do_refinement: True
#      refinement_num: 2


#smoother_server:
#  ros__parameters:
#    smoother_plugins: ["SmoothPath"]
#
#    SmoothPath:
#      plugin: "nav2_constrained_smoother/ConstrainedSmoother"
#      reversing_enabled: false       # whether to detect forward/reverse direction and cusps. Should be set to false for paths without orientations assigned
#      path_downsampling_factor: 3   # every n-th node of the path is taken. Useful for speed-up
#      path_upsampling_factor: 1     # 0 - path remains downsampled, 1 - path is upsampled back to original granularity using cubic bezier, 2... - more upsampling
#      keep_start_orientation: true  # whether to prevent the start orientation from being smoothed
#      keep_goal_orientation: true   # whether to prevent the gpal orientation from being smoothed
#      minimum_turning_radius: 0.0  # minimum turning radius the robot can perform. Can be set to 0.0 (or w_curve can be set to 0.0 with the same effect) for diff-drive/holonomic robots
#      w_curve: 30.0                 # weight to enforce minimum_turning_radius
#      w_dist: 0.0                   # weight to bind path to original as optional replacement for cost weight
#      w_smooth: 2000000.0           # weight to maximize smoothness of path
#      w_cost: 0.015                 # weight to steer robot away from collision and cost
#
#      # Parameters used to improve obstacle avoidance near cusps (forward/reverse movement changes)
#      # See the [docs page](https://navigation.ros.org/configuration/packages/configuring-constrained-smoother) for further clarification
#      w_cost_cusp_multiplier: 3.0   # option to have higher weight during forward/reverse direction change which is often accompanied with dangerous rotations
#      cusp_zone_length: 2.5         # length of the section around cusp in which nodes use w_cost_cusp_multiplier (w_cost rises gradually inside the zone towards the cusp point, whose costmap weight equals w_cost*w_cost_cusp_multiplier)
#
#      # Points in robot frame to grab costmap values from. Format: [x1, y1, weight1, x2, y2, weight2, ...]
#      # IMPORTANT: Requires much higher number of iterations to actually improve the path. Uncomment only if you really need it (highly elongated/asymmetric robots)
#      # See the [docs page](https://navigation.ros.org/configuration/packages/configuring-constrained-smoother) for further clarification
#      # cost_check_points: [-0.185, 0.0, 1.0]
#
#      optimizer:
#        max_iterations: 70            # max iterations of smoother
#        debug_optimizer: false        # print debug info
#        gradient_tol: 5e3
#        fn_tol: 1.0e-15
#        param_tol: 1.0e-20


behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    #    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    #    spin:
    #      plugin: "nav2_behaviors/Spin"
    #    backup:
    #      plugin: "nav2_behaviors/BackUp"
    #    drive_on_heading:
    #      plugin: "nav2_behaviors/DriveOnHeading"
    #    wait:
    #      plugin: "nav2_behaviors/Wait"
    #    assisted_teleop:
    #      plugin: "nav2_behaviors/AssistedTeleop"
    global_frame: odom
    robot_base_frame: base_link
    transform_tolerance: 0.1
    use_sim_time: False
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

#waypoint_follower:
#  ros__parameters:
#    use_sim_time: False
#    loop_rate: 20
#    stop_on_failure: false
#    waypoint_task_executor_plugin: "wait_at_waypoint"
#    wait_at_waypoint:
#      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
#      enabled: True
#      waypoint_pause_duration: 200

#velocity_smoother:
#  ros__parameters:
#    use_sim_time: False
#    smoothing_frequency: 20.0
#    scale_velocities: False
#    feedback: "OPEN_LOOP"
#    max_velocity: [0.26, 0.26, 1.0] # TODO mettre la meme vitesse, mais pour l'instant ca empire la trajectoire
#    min_velocity: [-0.26, -0.26, -1.0]
#    max_accel: [2.5, 2.5, 3.2]
#    max_decel: [-2.5, -2.5, -3.2]
#    odom_topic: "odom"
#    odom_duration: 0.1
#    deadband_velocity: [0.0, 0.0, 0.0]
#    velocity_timeout: 1.0
