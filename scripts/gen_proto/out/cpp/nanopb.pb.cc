// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nanopb.proto

#include "nanopb.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_nanopb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NanoPBOptions_nanopb_2eproto;
class NanoPBOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NanoPBOptions> _instance;
} _NanoPBOptions_default_instance_;
static void InitDefaultsscc_info_NanoPBOptions_nanopb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::NanoPBOptions::_i_give_permission_to_break_this_code_default_callback_datatype_.DefaultConstruct();
  *::NanoPBOptions::_i_give_permission_to_break_this_code_default_callback_datatype_.get_mutable() = std::string("pb_callback_t", 13);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::NanoPBOptions::_i_give_permission_to_break_this_code_default_callback_datatype_.get_mutable());
  ::NanoPBOptions::_i_give_permission_to_break_this_code_default_callback_function_.DefaultConstruct();
  *::NanoPBOptions::_i_give_permission_to_break_this_code_default_callback_function_.get_mutable() = std::string("pb_default_field_callback", 25);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::NanoPBOptions::_i_give_permission_to_break_this_code_default_callback_function_.get_mutable());
  {
    void* ptr = &::_NanoPBOptions_default_instance_;
    new (ptr) ::NanoPBOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NanoPBOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NanoPBOptions_nanopb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NanoPBOptions_nanopb_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_nanopb_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_nanopb_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_nanopb_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_nanopb_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, max_size_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, max_length_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, max_count_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, int_size_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, type_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, long_names_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, packed_struct_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, packed_enum_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, skip_message_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, no_unions_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, msgid_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, anonymous_oneof_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, proto3_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, proto3_singular_msgs_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, enum_to_string_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, fixed_length_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, fixed_count_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, submsg_callback_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, mangle_names_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, callback_datatype_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, callback_function_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, descriptorsize_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, default_has_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, include_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, exclude_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, package_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, type_override_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, label_override_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, sort_by_tag_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, fallback_type_),
  PROTOBUF_FIELD_OFFSET(::NanoPBOptions, initializer_),
  4,
  13,
  5,
  7,
  6,
  24,
  8,
  9,
  10,
  11,
  12,
  14,
  15,
  16,
  17,
  19,
  20,
  21,
  18,
  0,
  1,
  23,
  22,
  ~0u,
  ~0u,
  2,
  26,
  28,
  25,
  27,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 36, sizeof(::NanoPBOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NanoPBOptions_default_instance_),
};

const char descriptor_table_protodef_nanopb_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014nanopb.proto\032 google/protobuf/descript"
  "or.proto\"\376\007\n\rNanoPBOptions\022\020\n\010max_size\030\001"
  " \001(\005\022\022\n\nmax_length\030\016 \001(\005\022\021\n\tmax_count\030\002 "
  "\001(\005\022&\n\010int_size\030\007 \001(\0162\010.IntSize:\nIS_DEFA"
  "ULT\022$\n\004type\030\003 \001(\0162\n.FieldType:\nFT_DEFAUL"
  "T\022\030\n\nlong_names\030\004 \001(\010:\004true\022\034\n\rpacked_st"
  "ruct\030\005 \001(\010:\005false\022\032\n\013packed_enum\030\n \001(\010:\005"
  "false\022\033\n\014skip_message\030\006 \001(\010:\005false\022\030\n\tno"
  "_unions\030\010 \001(\010:\005false\022\r\n\005msgid\030\t \001(\r\022\036\n\017a"
  "nonymous_oneof\030\013 \001(\010:\005false\022\025\n\006proto3\030\014 "
  "\001(\010:\005false\022#\n\024proto3_singular_msgs\030\025 \001(\010"
  ":\005false\022\035\n\016enum_to_string\030\r \001(\010:\005false\022\033"
  "\n\014fixed_length\030\017 \001(\010:\005false\022\032\n\013fixed_cou"
  "nt\030\020 \001(\010:\005false\022\036\n\017submsg_callback\030\026 \001(\010"
  ":\005false\022/\n\014mangle_names\030\021 \001(\0162\021.Typename"
  "Mangling:\006M_NONE\022(\n\021callback_datatype\030\022 "
  "\001(\t:\rpb_callback_t\0224\n\021callback_function\030"
  "\023 \001(\t:\031pb_default_field_callback\0220\n\016desc"
  "riptorsize\030\024 \001(\0162\017.DescriptorSize:\007DS_AU"
  "TO\022\032\n\013default_has\030\027 \001(\010:\005false\022\017\n\007includ"
  "e\030\030 \003(\t\022\017\n\007exclude\030\032 \003(\t\022\017\n\007package\030\031 \001("
  "\t\022A\n\rtype_override\030\033 \001(\0162*.google.protob"
  "uf.FieldDescriptorProto.Type\022C\n\016label_ov"
  "erride\030\037 \001(\0162+.google.protobuf.FieldDesc"
  "riptorProto.Label\022\031\n\013sort_by_tag\030\034 \001(\010:\004"
  "true\022.\n\rfallback_type\030\035 \001(\0162\n.FieldType:"
  "\013FT_CALLBACK\022\023\n\013initializer\030\036 \001(\t*i\n\tFie"
  "ldType\022\016\n\nFT_DEFAULT\020\000\022\017\n\013FT_CALLBACK\020\001\022"
  "\016\n\nFT_POINTER\020\004\022\r\n\tFT_STATIC\020\002\022\r\n\tFT_IGN"
  "ORE\020\003\022\r\n\tFT_INLINE\020\005*D\n\007IntSize\022\016\n\nIS_DE"
  "FAULT\020\000\022\010\n\004IS_8\020\010\022\t\n\005IS_16\020\020\022\t\n\005IS_32\020 \022"
  "\t\n\005IS_64\020@*Z\n\020TypenameMangling\022\n\n\006M_NONE"
  "\020\000\022\023\n\017M_STRIP_PACKAGE\020\001\022\r\n\tM_FLATTEN\020\002\022\026"
  "\n\022M_PACKAGE_INITIALS\020\003*E\n\016DescriptorSize"
  "\022\013\n\007DS_AUTO\020\000\022\010\n\004DS_1\020\001\022\010\n\004DS_2\020\002\022\010\n\004DS_"
  "4\020\004\022\010\n\004DS_8\020\010:E\n\016nanopb_fileopt\022\034.google"
  ".protobuf.FileOptions\030\362\007 \001(\0132\016.NanoPBOpt"
  "ions:G\n\rnanopb_msgopt\022\037.google.protobuf."
  "MessageOptions\030\362\007 \001(\0132\016.NanoPBOptions:E\n"
  "\016nanopb_enumopt\022\034.google.protobuf.EnumOp"
  "tions\030\362\007 \001(\0132\016.NanoPBOptions:>\n\006nanopb\022\035"
  ".google.protobuf.FieldOptions\030\362\007 \001(\0132\016.N"
  "anoPBOptionsB\032\n\030fi.kapsi.koti.jpa.nanopb"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_nanopb_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_nanopb_2eproto_sccs[1] = {
  &scc_info_NanoPBOptions_nanopb_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_nanopb_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nanopb_2eproto = {
  false, false, descriptor_table_protodef_nanopb_2eproto, "nanopb.proto", 1720,
  &descriptor_table_nanopb_2eproto_once, descriptor_table_nanopb_2eproto_sccs, descriptor_table_nanopb_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_nanopb_2eproto::offsets,
  file_level_metadata_nanopb_2eproto, 1, file_level_enum_descriptors_nanopb_2eproto, file_level_service_descriptors_nanopb_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_nanopb_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_nanopb_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FieldType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nanopb_2eproto);
  return file_level_enum_descriptors_nanopb_2eproto[0];
}
bool FieldType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IntSize_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nanopb_2eproto);
  return file_level_enum_descriptors_nanopb_2eproto[1];
}
bool IntSize_IsValid(int value) {
  switch (value) {
    case 0:
    case 8:
    case 16:
    case 32:
    case 64:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TypenameMangling_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nanopb_2eproto);
  return file_level_enum_descriptors_nanopb_2eproto[2];
}
bool TypenameMangling_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DescriptorSize_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nanopb_2eproto);
  return file_level_enum_descriptors_nanopb_2eproto[3];
}
bool DescriptorSize_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void NanoPBOptions::InitAsDefaultInstance() {
}
class NanoPBOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<NanoPBOptions>()._has_bits_);
  static void set_has_max_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_length(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_max_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_int_size(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_long_names(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_packed_struct(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_packed_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_skip_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_no_unions(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_msgid(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_anonymous_oneof(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_proto3(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_proto3_singular_msgs(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_enum_to_string(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_fixed_length(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_fixed_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_submsg_callback(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_mangle_names(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_callback_datatype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_callback_function(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_descriptorsize(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_default_has(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_package(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type_override(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_label_override(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_sort_by_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_fallback_type(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_initializer(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NanoPBOptions::_i_give_permission_to_break_this_code_default_callback_datatype_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NanoPBOptions::_i_give_permission_to_break_this_code_default_callback_function_;
NanoPBOptions::NanoPBOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  include_(arena),
  exclude_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NanoPBOptions)
}
NanoPBOptions::NanoPBOptions(const NanoPBOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      include_(from.include_),
      exclude_(from.exclude_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  callback_datatype_.UnsafeSetDefault(&::NanoPBOptions::_i_give_permission_to_break_this_code_default_callback_datatype_.get());
  if (from._internal_has_callback_datatype()) {
    callback_datatype_.Set(&::NanoPBOptions::_i_give_permission_to_break_this_code_default_callback_datatype_.get(), from._internal_callback_datatype(),
      GetArena());
  }
  callback_function_.UnsafeSetDefault(&::NanoPBOptions::_i_give_permission_to_break_this_code_default_callback_function_.get());
  if (from._internal_has_callback_function()) {
    callback_function_.Set(&::NanoPBOptions::_i_give_permission_to_break_this_code_default_callback_function_.get(), from._internal_callback_function(),
      GetArena());
  }
  package_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_package()) {
    package_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_package(),
      GetArena());
  }
  initializer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_initializer()) {
    initializer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_initializer(),
      GetArena());
  }
  ::memcpy(&max_size_, &from.max_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&label_override_) -
    reinterpret_cast<char*>(&max_size_)) + sizeof(label_override_));
  // @@protoc_insertion_point(copy_constructor:NanoPBOptions)
}

void NanoPBOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NanoPBOptions_nanopb_2eproto.base);
  callback_datatype_.UnsafeSetDefault(&::NanoPBOptions::_i_give_permission_to_break_this_code_default_callback_datatype_.get());
  callback_function_.UnsafeSetDefault(&::NanoPBOptions::_i_give_permission_to_break_this_code_default_callback_function_.get());
  package_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  initializer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&max_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&descriptorsize_) -
      reinterpret_cast<char*>(&max_size_)) + sizeof(descriptorsize_));
  long_names_ = true;
  sort_by_tag_ = true;
  type_override_ = 1;
  fallback_type_ = 1;
  label_override_ = 1;
}

NanoPBOptions::~NanoPBOptions() {
  // @@protoc_insertion_point(destructor:NanoPBOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NanoPBOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  callback_datatype_.DestroyNoArena(&::NanoPBOptions::_i_give_permission_to_break_this_code_default_callback_datatype_.get());
  callback_function_.DestroyNoArena(&::NanoPBOptions::_i_give_permission_to_break_this_code_default_callback_function_.get());
  package_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  initializer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NanoPBOptions::ArenaDtor(void* object) {
  NanoPBOptions* _this = reinterpret_cast< NanoPBOptions* >(object);
  (void)_this;
}
void NanoPBOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NanoPBOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NanoPBOptions& NanoPBOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NanoPBOptions_nanopb_2eproto.base);
  return *internal_default_instance();
}


void NanoPBOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:NanoPBOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  include_.Clear();
  exclude_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      callback_datatype_.ClearToDefault(&::NanoPBOptions::_i_give_permission_to_break_this_code_default_callback_datatype_.get(), GetArena());
    }
    if (cached_has_bits & 0x00000002u) {
      callback_function_.ClearToDefault(&::NanoPBOptions::_i_give_permission_to_break_this_code_default_callback_function_.get(), GetArena());
    }
    if (cached_has_bits & 0x00000004u) {
      package_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      initializer_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&max_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&int_size_) -
        reinterpret_cast<char*>(&max_size_)) + sizeof(int_size_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&packed_struct_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&proto3_) -
        reinterpret_cast<char*>(&packed_struct_)) + sizeof(proto3_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&proto3_singular_msgs_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&descriptorsize_) -
        reinterpret_cast<char*>(&proto3_singular_msgs_)) + sizeof(descriptorsize_));
  }
  if (cached_has_bits & 0x1f000000u) {
    long_names_ = true;
    sort_by_tag_ = true;
    type_override_ = 1;
    fallback_type_ = 1;
    label_override_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NanoPBOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 max_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_max_size(&has_bits);
          max_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_max_count(&has_bits);
          max_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .FieldType type = 3 [default = FT_DEFAULT];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::FieldType_IsValid(val))) {
            _internal_set_type(static_cast<::FieldType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool long_names = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_long_names(&has_bits);
          long_names_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool packed_struct = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_packed_struct(&has_bits);
          packed_struct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool skip_message = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_skip_message(&has_bits);
          skip_message_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .IntSize int_size = 7 [default = IS_DEFAULT];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::IntSize_IsValid(val))) {
            _internal_set_int_size(static_cast<::IntSize>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool no_unions = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_no_unions(&has_bits);
          no_unions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 msgid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_msgid(&has_bits);
          msgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool packed_enum = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_packed_enum(&has_bits);
          packed_enum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool anonymous_oneof = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_anonymous_oneof(&has_bits);
          anonymous_oneof_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool proto3 = 12 [default = false];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_proto3(&has_bits);
          proto3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enum_to_string = 13 [default = false];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_enum_to_string(&has_bits);
          enum_to_string_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_length = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_max_length(&has_bits);
          max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool fixed_length = 15 [default = false];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_fixed_length(&has_bits);
          fixed_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool fixed_count = 16 [default = false];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_fixed_count(&has_bits);
          fixed_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TypenameMangling mangle_names = 17 [default = M_NONE];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TypenameMangling_IsValid(val))) {
            _internal_set_mangle_names(static_cast<::TypenameMangling>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(17, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string callback_datatype = 18 [default = "pb_callback_t"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_callback_datatype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "NanoPBOptions.callback_datatype");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string callback_function = 19 [default = "pb_default_field_callback"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_callback_function();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "NanoPBOptions.callback_function");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DescriptorSize descriptorsize = 20 [default = DS_AUTO];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DescriptorSize_IsValid(val))) {
            _internal_set_descriptorsize(static_cast<::DescriptorSize>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(20, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool proto3_singular_msgs = 21 [default = false];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_proto3_singular_msgs(&has_bits);
          proto3_singular_msgs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool submsg_callback = 22 [default = false];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_submsg_callback(&has_bits);
          submsg_callback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool default_has = 23 [default = false];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_default_has(&has_bits);
          default_has_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string include = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_include();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "NanoPBOptions.include");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string package = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_package();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "NanoPBOptions.package");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string exclude = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_exclude();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "NanoPBOptions.exclude");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.FieldDescriptorProto.Type type_override = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type_IsValid(val))) {
            _internal_set_type_override(static_cast<PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(27, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool sort_by_tag = 28 [default = true];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_sort_by_tag(&has_bits);
          sort_by_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .FieldType fallback_type = 29 [default = FT_CALLBACK];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::FieldType_IsValid(val))) {
            _internal_set_fallback_type(static_cast<::FieldType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(29, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string initializer = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_initializer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "NanoPBOptions.initializer");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.FieldDescriptorProto.Label label_override = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Label_IsValid(val))) {
            _internal_set_label_override(static_cast<PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Label>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(31, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NanoPBOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NanoPBOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 max_size = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_size(), target);
  }

  // optional int32 max_count = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_count(), target);
  }

  // optional .FieldType type = 3 [default = FT_DEFAULT];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // optional bool long_names = 4 [default = true];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_long_names(), target);
  }

  // optional bool packed_struct = 5 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_packed_struct(), target);
  }

  // optional bool skip_message = 6 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_skip_message(), target);
  }

  // optional .IntSize int_size = 7 [default = IS_DEFAULT];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_int_size(), target);
  }

  // optional bool no_unions = 8 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_no_unions(), target);
  }

  // optional uint32 msgid = 9;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_msgid(), target);
  }

  // optional bool packed_enum = 10 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_packed_enum(), target);
  }

  // optional bool anonymous_oneof = 11 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_anonymous_oneof(), target);
  }

  // optional bool proto3 = 12 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_proto3(), target);
  }

  // optional bool enum_to_string = 13 [default = false];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_enum_to_string(), target);
  }

  // optional int32 max_length = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_max_length(), target);
  }

  // optional bool fixed_length = 15 [default = false];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_fixed_length(), target);
  }

  // optional bool fixed_count = 16 [default = false];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_fixed_count(), target);
  }

  // optional .TypenameMangling mangle_names = 17 [default = M_NONE];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->_internal_mangle_names(), target);
  }

  // optional string callback_datatype = 18 [default = "pb_callback_t"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_callback_datatype().data(), static_cast<int>(this->_internal_callback_datatype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.callback_datatype");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_callback_datatype(), target);
  }

  // optional string callback_function = 19 [default = "pb_default_field_callback"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_callback_function().data(), static_cast<int>(this->_internal_callback_function().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.callback_function");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_callback_function(), target);
  }

  // optional .DescriptorSize descriptorsize = 20 [default = DS_AUTO];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      20, this->_internal_descriptorsize(), target);
  }

  // optional bool proto3_singular_msgs = 21 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_proto3_singular_msgs(), target);
  }

  // optional bool submsg_callback = 22 [default = false];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_submsg_callback(), target);
  }

  // optional bool default_has = 23 [default = false];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_default_has(), target);
  }

  // repeated string include = 24;
  for (int i = 0, n = this->_internal_include_size(); i < n; i++) {
    const auto& s = this->_internal_include(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.include");
    target = stream->WriteString(24, s, target);
  }

  // optional string package = 25;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_package().data(), static_cast<int>(this->_internal_package().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.package");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_package(), target);
  }

  // repeated string exclude = 26;
  for (int i = 0, n = this->_internal_exclude_size(); i < n; i++) {
    const auto& s = this->_internal_exclude(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.exclude");
    target = stream->WriteString(26, s, target);
  }

  // optional .google.protobuf.FieldDescriptorProto.Type type_override = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      27, this->_internal_type_override(), target);
  }

  // optional bool sort_by_tag = 28 [default = true];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_sort_by_tag(), target);
  }

  // optional .FieldType fallback_type = 29 [default = FT_CALLBACK];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      29, this->_internal_fallback_type(), target);
  }

  // optional string initializer = 30;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_initializer().data(), static_cast<int>(this->_internal_initializer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.initializer");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_initializer(), target);
  }

  // optional .google.protobuf.FieldDescriptorProto.Label label_override = 31;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      31, this->_internal_label_override(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NanoPBOptions)
  return target;
}

size_t NanoPBOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NanoPBOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string include = 24;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(include_.size());
  for (int i = 0, n = include_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      include_.Get(i));
  }

  // repeated string exclude = 26;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(exclude_.size());
  for (int i = 0, n = exclude_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      exclude_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string callback_datatype = 18 [default = "pb_callback_t"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_callback_datatype());
    }

    // optional string callback_function = 19 [default = "pb_default_field_callback"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_callback_function());
    }

    // optional string package = 25;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_package());
    }

    // optional string initializer = 30;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_initializer());
    }

    // optional int32 max_size = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_size());
    }

    // optional int32 max_count = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_count());
    }

    // optional .FieldType type = 3 [default = FT_DEFAULT];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .IntSize int_size = 7 [default = IS_DEFAULT];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_int_size());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool packed_struct = 5 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool packed_enum = 10 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool skip_message = 6 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool no_unions = 8 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional uint32 msgid = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_msgid());
    }

    // optional int32 max_length = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_length());
    }

    // optional bool anonymous_oneof = 11 [default = false];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool proto3 = 12 [default = false];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool proto3_singular_msgs = 21 [default = false];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool enum_to_string = 13 [default = false];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

    // optional .TypenameMangling mangle_names = 17 [default = M_NONE];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mangle_names());
    }

    // optional bool fixed_length = 15 [default = false];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 1;
    }

    // optional bool fixed_count = 16 [default = false];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool submsg_callback = 22 [default = false];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool default_has = 23 [default = false];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional .DescriptorSize descriptorsize = 20 [default = DS_AUTO];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_descriptorsize());
    }

  }
  if (cached_has_bits & 0x1f000000u) {
    // optional bool long_names = 4 [default = true];
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 + 1;
    }

    // optional bool sort_by_tag = 28 [default = true];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional .google.protobuf.FieldDescriptorProto.Type type_override = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type_override());
    }

    // optional .FieldType fallback_type = 29 [default = FT_CALLBACK];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fallback_type());
    }

    // optional .google.protobuf.FieldDescriptorProto.Label label_override = 31;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_label_override());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NanoPBOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NanoPBOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const NanoPBOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NanoPBOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NanoPBOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NanoPBOptions)
    MergeFrom(*source);
  }
}

void NanoPBOptions::MergeFrom(const NanoPBOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NanoPBOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  include_.MergeFrom(from.include_);
  exclude_.MergeFrom(from.exclude_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_callback_datatype(from._internal_callback_datatype());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_callback_function(from._internal_callback_function());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_package(from._internal_package());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_initializer(from._internal_initializer());
    }
    if (cached_has_bits & 0x00000010u) {
      max_size_ = from.max_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_count_ = from.max_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      int_size_ = from.int_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      packed_struct_ = from.packed_struct_;
    }
    if (cached_has_bits & 0x00000200u) {
      packed_enum_ = from.packed_enum_;
    }
    if (cached_has_bits & 0x00000400u) {
      skip_message_ = from.skip_message_;
    }
    if (cached_has_bits & 0x00000800u) {
      no_unions_ = from.no_unions_;
    }
    if (cached_has_bits & 0x00001000u) {
      msgid_ = from.msgid_;
    }
    if (cached_has_bits & 0x00002000u) {
      max_length_ = from.max_length_;
    }
    if (cached_has_bits & 0x00004000u) {
      anonymous_oneof_ = from.anonymous_oneof_;
    }
    if (cached_has_bits & 0x00008000u) {
      proto3_ = from.proto3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      proto3_singular_msgs_ = from.proto3_singular_msgs_;
    }
    if (cached_has_bits & 0x00020000u) {
      enum_to_string_ = from.enum_to_string_;
    }
    if (cached_has_bits & 0x00040000u) {
      mangle_names_ = from.mangle_names_;
    }
    if (cached_has_bits & 0x00080000u) {
      fixed_length_ = from.fixed_length_;
    }
    if (cached_has_bits & 0x00100000u) {
      fixed_count_ = from.fixed_count_;
    }
    if (cached_has_bits & 0x00200000u) {
      submsg_callback_ = from.submsg_callback_;
    }
    if (cached_has_bits & 0x00400000u) {
      default_has_ = from.default_has_;
    }
    if (cached_has_bits & 0x00800000u) {
      descriptorsize_ = from.descriptorsize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x1f000000u) {
    if (cached_has_bits & 0x01000000u) {
      long_names_ = from.long_names_;
    }
    if (cached_has_bits & 0x02000000u) {
      sort_by_tag_ = from.sort_by_tag_;
    }
    if (cached_has_bits & 0x04000000u) {
      type_override_ = from.type_override_;
    }
    if (cached_has_bits & 0x08000000u) {
      fallback_type_ = from.fallback_type_;
    }
    if (cached_has_bits & 0x10000000u) {
      label_override_ = from.label_override_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NanoPBOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NanoPBOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NanoPBOptions::CopyFrom(const NanoPBOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NanoPBOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NanoPBOptions::IsInitialized() const {
  return true;
}

void NanoPBOptions::InternalSwap(NanoPBOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  include_.InternalSwap(&other->include_);
  exclude_.InternalSwap(&other->exclude_);
  callback_datatype_.Swap(&other->callback_datatype_, &::NanoPBOptions::_i_give_permission_to_break_this_code_default_callback_datatype_.get(), GetArena());
  callback_function_.Swap(&other->callback_function_, &::NanoPBOptions::_i_give_permission_to_break_this_code_default_callback_function_.get(), GetArena());
  package_.Swap(&other->package_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  initializer_.Swap(&other->initializer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NanoPBOptions, descriptorsize_)
      + sizeof(NanoPBOptions::descriptorsize_)
      - PROTOBUF_FIELD_OFFSET(NanoPBOptions, max_size_)>(
          reinterpret_cast<char*>(&max_size_),
          reinterpret_cast<char*>(&other->max_size_));
  swap(long_names_, other->long_names_);
  swap(sort_by_tag_, other->sort_by_tag_);
  swap(type_override_, other->type_override_);
  swap(fallback_type_, other->fallback_type_);
  swap(label_override_, other->label_override_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NanoPBOptions::GetMetadata() const {
  return GetMetadataStatic();
}

::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false >
  nanopb_fileopt(kNanopbFileoptFieldNumber, ::NanoPBOptions::default_instance());
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false >
  nanopb_msgopt(kNanopbMsgoptFieldNumber, ::NanoPBOptions::default_instance());
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::EnumOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false >
  nanopb_enumopt(kNanopbEnumoptFieldNumber, ::NanoPBOptions::default_instance());
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false >
  nanopb(kNanopbFieldNumber, ::NanoPBOptions::default_instance());

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NanoPBOptions* Arena::CreateMaybeMessage< ::NanoPBOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NanoPBOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
