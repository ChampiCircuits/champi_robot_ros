
hardware_interface_simu:
  ros__parameters:
    enable_accel_limits: false

    max_acceleration_linear: 2.0 # m/s^2
    max_deceleration_linear: 2.0 # m/s^2

    max_acceleration_angular: 20.0 # rad/s^2
    max_deceleration_angular: 20.0 # rad/s^2
    
    max_acceleration_wheel: 10.0 # rad/s^2
    imu_vel_yaw_cov: 0.00001


hardware_interface:
  ros__parameters:

    device_ser_no: 3952366C3233

    covariances:
      pose_wheels: [0.001, 0.001, 0.001, 0.001, 0.001, 0.001] # x y z roll pitch yaw
      vel_wheels: [0.001, 0.001, 0.001, 0.001, 0.001, 0.001]
      pose_otos: [0.001, 0.001, 0.001, 0.001, 0.001, 0.001]
      vel_otos: [0.001, 0.001, 0.001, 0.001, 0.001, 0.001]

    stm_config:
      cmd_vel_timeout: 1.0 # en seconde. Si aucune commande n'est reçue pendant ce temps, le robot s'arrête

      holo_drive_config:
        max_accel_wheel: 100.0 # rotation des roues en rotation/s²
        wheel_radius: 0.0292 # en m # 0.029
        base_radius: 0.13 # en m

        max_acceleration_linear: 1.5 # m/s^2
        max_acceleration_angular: 10.1 # rad/s^2

        max_deceleration_linear: 10.0 # m/s^2
        max_deceleration_angular: 20.0 # rad/s^2

      otos_config: # You have to restart node AND STM to apply the otos config (feature, not bug :))
        linear_scalar: 0.99 # [0.872 - 1.127]
        angular_scalar: 0.993 # [0.872 - 1.127]

holo_teleop_joy_node:
  ros__parameters:
    max_linear_speed: 0.5 # m/s
    max_angular_speed: 1.0 # rad/s

twist_mux:
  ros__parameters:
    use_stamped: false
    topics:
      stop:
        topic   : /ctrl/cmd_vel_stop
        timeout : 3.0
        priority: 102
      joystick:
        topic   : /teleop/cmd_vel
        timeout : 0.5
        priority: 103
      behavior_server:
        topic   : /ctrl/cmd_vel
        timeout : 0.5
        priority: 101

ld_lidar:
  ros__parameters:
    product_name: 'LDLiDAR_LD19'
    topic_name: 'scan'
    frame_id: 'base_laser'
    port_name: '/dev/ttyUSB0'
    port_baudrate: 230400
    laser_scan_dir: true
    enable_angle_crop_func: false
    angle_crop_min: 135.0
    angle_crop_max: 225.0
    range_min: 0.05
    range_max: 5.0
    # units: 'M'

enemy_tracker:
  ros__parameters:
    crop_box:
        x_min: 0.1 # m
        x_max: 1.9 # m
        y_min: 0.1 # m
        y_max: 2.9 # m

costmap_updater:
  ros__parameters:
    grid_width: 3.0 # m
    grid_height: 2.0 # m
    grid_resolution: 0.05 # m/cell
    robot_radius: 0.18 # m = 0.16 +0.02
    enemy_robot_radius: 0.3 # m = 0.2 + margin
    enemy_pos_prediction_time: 0.0 # s. 0.0 means disabled

pose_controller:
  ros__parameters:
    control_loop_period: 0.02 # s
    max_linear_acceleration: 1.5 # m/s^2
    max_angular_acceleration: 10.0 # rad/s^2

    max_linear_deceleration: 4.0 # m/s^2 # TODO NOT USED
    max_angular_deceleration: 20.0 # rad/s^2 # TODO NOT USED
    # When the ctrl_goal is reached and end_speed!=0 (we expect a new goal to be sent right away),
    # the robot will emergency stop once the timeout is elapsed.
    timeout_wait_next_goal: 0.5 # s.

path_planner:
  ros__parameters:
    planner_loop_period: 0.1
    waypoint_tolerance: 0.03 # m. Waypoint tolerance should be higher because the robot doesn't stop at waypoints thus is less precise
    debug: true

sm_ros_itf:
  ros__parameters:
    strategy_file: 'test_strat.yaml'
    use_above_default_strategy: true # works only in sim mode