### ukf config file ###
ukf:
    ros__parameters:

        # Wait for the service "enable" to be called before starting the filter. Defaults to false if unspecified.
        disabled_at_startup: false

        # The frequency, in Hz, at which the filter will output a position estimate. Note that the filter will not begin
        # computation until it receives at least one message from one of the inputs. It will then run continuously at the
        # frequency specified here, regardless of whether it receives more measurements. Defaults to 30 if unspecified.
        frequency: 20.0

        # The period, in seconds, after which we consider a sensor to have timed out. In this event, we carry out a predict
        # cycle on the EKF without correcting it. This parameter can be thought of as the minimum frequency with which the
        # filter will generate new output. Defaults to 1 / frequency if not specified.
        # sensor_timeout: 0.4

        # ekf_localization_node and ukf_localization_node both use a 3D omnidirectional motion model. If this parameter is
        # set to true, no 3D information will be used in your state estimate. Use this if you are operating in a planar
        # environment and want to ignore the effect of small variations in the ground plane that might otherwise be detected
        # by, for example, an IMU. Defaults to false if unspecified.
        two_d_mode: true

        # Use this parameter to provide an offset to the transform generated by ekf_localization_node. This can be used for
        # future dating the transform, which is required for interaction with some other packages. Defaults to 0.0 if
        # unspecified.
        transform_time_offset: 0.0

        # Use this parameter to provide specify how long the tf listener should wait for a transform to become available.
        # Defaults to 0.0 if unspecified.
        transform_timeout: 0.0

        # If you're having trouble, try setting this to true, and then echo the /diagnostics_agg topic to see if the node is
        # unhappy with any settings or data.
        print_diagnostics: true

        # Debug settings. Not for the faint of heart. Outputs a ludicrous amount of information to the file specified by
        # debug_out_file. I hope you like matrices! Please note that setting this to true will have strongly deleterious
        # effects on the performance of the node. Defaults to false if unspecified.
        debug: false

        # Defaults to "robot_localization_debug.txt" if unspecified. Please specify the full path.
        # debug_out_file: "/home/arusso/dev/robot_localization_debug.txt"

        # Whether we'll allow old measurements to cause a re-publication of the updated state
        permit_corrected_publication: true

        # Whether to publish the acceleration state. Defaults to false if unspecified.
        publish_acceleration: false

        # Whether to broadcast the transformation over the /tf topic. Defaults to true if unspecified.
        publish_tf: true

        map_frame: map              # Defaults to "map" if unspecified
        odom_frame: odom            # Defaults to "odom" if unspecified
        base_link_frame: base_link  # Defaults to "base_link" if unspecified
        world_frame: odom           # Defaults to the value of odom_frame if unspecified



        # ============================================= EXAMPLE INPUTS =================================================

        # The filter accepts an arbitrary number of inputs from each input message type (nav_msgs/Odometry,
        # geometry_msgs/PoseWithCovarianceStamped, geometry_msgs/TwistWithCovarianceStamped,
        # sensor_msgs/Imu).
        # odom0: /odom

        # Each sensor reading updates some or all of the filter's state. These options give you greater control over which
        # values from each measurement are fed to the filter. For example, if you have an odometry message as input, but only
        # want to use its Z position value, then set the entire vector to false, except for the third entry.

        # odom0_config: [false, false, false,
                      #  false, false, false,
                      #  true, true, false,
                      #  false, false, true,
                      #  false, false, false]

      # The order of the values is

      # x,      y,      z,
      # roll,   pitch,  yaw,
      # vx,     vy,     vz,
      # vroll,  vpitch, vyaw
      # ax,     ay,     az

        # If you have high-frequency data or are running with a low frequency parameter value, then you may want to increase
        # the size of the subscription queue so that more measurements are fused.
        # odom0_queue_size: 10

        # [ADVANCED] When measuring one pose variable with two sensors, a situation can arise in which both sensors under-
        # report their covariances. This can lead to the filter rapidly jumping back and forth between each measurement as they
        # arrive. In these cases, it often makes sense to (a) correct the measurement covariances, or (b) if velocity is also
        # measured by one of the sensors, let one sensor measure pose, and the other velocity. However, doing (a) or (b) isn't
        # always feasible, and so we expose the differential parameter. When differential mode is enabled, all absolute pose
        # data is converted to velocity data by differentiating the absolute pose measurements. These velocities are then
        # integrated as usual. NOTE: this only applies to sensors that provide pose measurements; setting differential to true
        # for twist measurements has no effect.
        # odom0_differential: false

        # [ADVANCED] When the node starts, if this parameter is true, then the first measurement is treated as a "zero point"
        # for all future measurements. While you can achieve the same effect with the differential paremeter, the key
        # difference is that the relative parameter doesn't cause the measurement to be converted to a velocity before
        # integrating it. If you simply want your measurements to start at 0 for a given sensor, set this to true.
        # odom0_relative: false

        # [ADVANCED] If your data is subject to outliers, use these threshold settings, expressed as Mahalanobis distances, to
        # control how far away from the current vehicle state a sensor measurement is permitted to be. Each defaults to
        # numeric_limits<double>::max() if unspecified. It is strongly recommended that these parameters be removed if not
        # required. Data is specified at the level of pose and twist variables, rather than for each variable in isolation.
        # For messages that have both pose and twist data, the parameter specifies to which part of the message we are applying
        # the thresholds.
        # odom0_pose_rejection_threshold: 5.0
        # odom0_twist_rejection_threshold: 1.0




      # =============================================== INPUTS =========================================================

        odom0: /odom_otos
        odom0_config: [true, true, false,   # x,      y,      z,
                       false, false, true,   # roll,   pitch,  yaw,
                       false, false, false,     # vx,     vy,     vz,
                       false, false, false,    # vroll,  vpitch, vyaw
                       false, false, false]   # ax,     ay,     az
        odom0_queue_size: 10
        odom0_differential: true
        odom0_relative: false



        # ============================================= CONTROL INPUT ==================================================

        # Whether or not we use the control input during predicition. Defaults to false.
        use_control: true

        # Whether the input (assumed to be cmd_vel) is a geometry_msgs/Twist or geometry_msgs/TwistStamped message. Defaults to
        # false.
        stamped_control: false

        # The last issued control command will be used in prediction for this period. Defaults to 0.2.
        control_timeout: 0.2

        # Which velocities are being controlled. Order is vx, vy, vz, vroll, vpitch, vyaw.
        control_config: [true, true, false, false, false, true]




        # ============================================== ACCELERATION MODEL ============================================

        # Places limits on how large the acceleration term will be. Should match your robot's kinematics.
        acceleration_limits: [1.0, 1.0, 0.0, 0.0, 0.0, 3.4]

        # Acceleration and deceleration limits are not always the same for robots.
        deceleration_limits: [1.3, 1.3, 0.0, 0.0, 0.0, 4.5]

        # If your robot cannot instantaneously reach its acceleration limit, the permitted change can be controlled with these
        # gains
        acceleration_gains: [0.8, 0.8, 0.0, 0.0, 0.0, 0.9] # TODO LETS CHECK THIS

        # If your robot cannot instantaneously reach its deceleration limit, the permitted change can be controlled with these
        # gains
        deceleration_gains: [1.0, 0.0, 0.0, 0.0, 0.0, 1.0] # TODO LETS CHECK THIS




        # ============================================= FILTER SETTINGS ================================================

        # [ADVANCED] The process noise covariance matrix can be difficult to tune, and can vary for each application, so it is
        # exposed as a configuration parameter. This matrix represents the noise we add to the total error after each
        # prediction step. The better the omnidirectional motion model matches your system, the smaller these values can be.
        # However, if users find that a given variable is slow to converge, one approach is to increase the
        # process_noise_covariance diagonal value for the variable in question, which will cause the filter's predicted error
        # to be larger, which will cause the filter to trust the incoming measurement more during correction. The values are
        # ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the matrix below if
        # unspecified.
        # Note: the specification of covariance matrices can be cumbersome, so all matrix parameters in this package support
        # both full specification or specification of only the diagonal values.
        process_noise_covariance: [0.05, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.05, 0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.05, 0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.05, 0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.05, 0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.05, 0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.05, 0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.05, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.5, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.01, 0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.01, 0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.01, 0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.01, 0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.01, 0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.01]
      # [ADVANCED] This represents the initial value for the state estimate error covariance matrix. Setting a diagonal
      # value (variance) to a large value will result in rapid convergence for initial measurements of the variable in
      # question. Users should take care not to use large values for variables that will not be measured directly. The values
      # are ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the matrix below
      #if unspecified.
        initial_estimate_covariance: [1e-9, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                      0.0,    1e-9, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                      0.0,    0.0,    1e-9, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                      0.0,    0.0,    0.0,    1e-9, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                      0.0,    0.0,    0.0,    0.0,    1e-9, 0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                      0.0,    0.0,    0.0,    0.0,    0.0,    1e-9, 0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                      0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-9, 0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                      0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-9, 0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                      0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-9, 0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                      0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-9,  0.0,     0.0,     0.0,    0.0,    0.0,
                                      0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     1e-9,  0.0,     0.0,    0.0,    0.0,
                                      0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     1e-9,  0.0,    0.0,    0.0,
                                      0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     1e-9, 0.0,    0.0,
                                      0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    1e-9, 0.0,
                                      0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    1e-9]

      # [ADVANCED, UKF ONLY] The alpha and kappa variables control the spread of the sigma points. Unless you are familiar
      # with UKFs, it's probably a good idea to leave these alone.
      # Defaults to 0.001 if unspecified.
        alpha: 0.001
      # Defaults to 0 if unspecified.
        kappa: 0.0

      # [ADVANCED, UKF ONLY] The beta variable relates to the distribution of the state vector. Again, it's probably best to
      # leave this alone if you're uncertain. Defaults to 2 if unspecified.
        beta: 2.0
        initial_state: [0.0, 0.0, 0.0, # x, y, z
                        0.0, 0.0, 0.0, # roll, pitch, yaw
                        0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0]